{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.78/legacy/direct-manipulation.md",
  "source_file_content_hash": "99b53671b10d8688ecef5aadbf82532dd17e2b015906229b05558b52059d0901",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: direct-manipulation\ntitle: Direct Manipulation\n---",
      "source_content_hash": "d4b98f9df8ef14c70f8a6a497c1abed19dd4e80fb5c09beeb8567466d92c4a2b",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4d1292be"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "It is sometimes necessary to make changes directly to a component without using state/props to trigger a re-render of the entire subtree. When using React in the browser for example, you sometimes need to directly modify a DOM node, and the same is true for views in mobile apps. `setNativeProps` is the React Native equivalent to setting properties directly on a DOM node.",
      "source_content_hash": "577faaa9a3f6d1f05309f1a294fc6850d7e9a8221360cdcef69842c1a0adb4f0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "有時需要直接修改元件而不透過狀態/屬性觸發整個子樹重新渲染。例如在瀏覽器中使用 React 時，有時需直接操作 DOM 節點，移動應用中的視圖亦是如此。`setNativeProps` 是 React Native 中相當於直接設置 DOM 節點屬性的方法。"
      }
    },
    {
      "segment_id": "6cae1da3",
      "source_content": ":::caution\nUse `setNativeProps` when frequent re-rendering creates a performance bottleneck!\n\nDirect manipulation will not be a tool that you reach for frequently. You will typically only be using it for creating continuous animations to avoid the overhead of rendering the component hierarchy and reconciling many views.\n`setNativeProps` is imperative and stores state in the native layer (DOM, UIView, etc.) and not within your React components, which makes your code more difficult to reason about.\n\nBefore you use it, try to solve your problem with `setState` and [`shouldComponentUpdate`](https://reactjs.org/docs/optimizing-performance.html#shouldcomponentupdate-in-action).\n:::",
      "source_content_hash": "57531cddea9c1882bfe115d78d3ad61fd7387899cfbdeebe2d1aaf9d832bd5e6",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::caution\n僅在頻繁重新渲染導致效能瓶頸時使用 `setNativeProps`！\n\n直接操作不應是頻繁使用的工具，通常僅用於創建連續動畫以避免元件層級渲染和大量視圖協調的開銷。\n`setNativeProps` 是命令式的，它將狀態儲存在原生層（DOM、UIView 等）而非 React 元件中，這會使程式碼更難維護。\n\n使用前請先嘗試用 `setState` 和 [`shouldComponentUpdate`](https://reactjs.org/docs/optimizing-performance.html#shouldcomponentupdate-in-action) 解決問題。\n:::"
      }
    },
    {
      "segment_id": "aee0e40d",
      "source_content": "## setNativeProps with TouchableOpacity",
      "source_content_hash": "e7b3ec45514558ac1996496818c72d5896c93269272e1645af6a2d2ac796adc7",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 搭配 TouchableOpacity 使用 setNativeProps"
      }
    },
    {
      "segment_id": "f5f6d2ce",
      "source_content": "[TouchableOpacity](https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Components/Touchable/TouchableOpacity.js) uses `setNativeProps` internally to update the opacity of its child component:",
      "source_content_hash": "2d3cdd165494ef92f405f3c50606325ebeada3653d4c8af58dc4f788f37f2e74",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[TouchableOpacity](https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Components/Touchable/TouchableOpacity.js) 內部使用 `setNativeProps` 來更新子元件的不透明度："
      }
    },
    {
      "segment_id": "41a8ae85",
      "source_content": "```tsx\nconst viewRef = useRef<View>();\nconst setOpacityTo = useCallback(value => {\n  // Redacted: animation related code\n  viewRef.current.setNativeProps({\n    opacity: value,\n  });\n}, []);\n```",
      "source_content_hash": "a9b1514f88fa23e7751b40684b2ccd9d2a85d593d9fa0e5bea19b104986e6bb9",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_41a8ae85"
      }
    },
    {
      "segment_id": "4daf5cdd",
      "source_content": "This allows us to write the following code and know that the child will have its opacity updated in response to taps, without the child having any knowledge of that fact or requiring any changes to its implementation:",
      "source_content_hash": "9c9aba3734afd6b54905702cbc5f3bfdeb1d58fd288a8684a19047da706958a2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這使我們能編寫以下程式碼，並確知子元件會根據點擊更新不透明度，而無需子元件知曉此邏輯或修改其實作方式："
      }
    },
    {
      "segment_id": "ef6eebef",
      "source_content": "```tsx\n<TouchableOpacity onPress={handlePress}>\n  <View>\n    <Text>Press me!</Text>\n  </View>\n</TouchableOpacity>\n```",
      "source_content_hash": "c8944741640570c7beab84861f67cc4740a964c5f9597bf219610d9ee06fbca4",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_ef6eebef"
      }
    },
    {
      "segment_id": "1042b50d",
      "source_content": "Let's imagine that `setNativeProps` was not available. One way that we might implement it with that constraint is to store the opacity value in the state, then update that value whenever `onPress` is fired:",
      "source_content_hash": "37306e3b55909f09ed9fa0f396b26be0494f31cdef2c4ed180f95bb882cfcf91",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "假設 `setNativeProps` 不可用，我們可能需將不透明度值儲存於狀態中，並在 `onPress` 觸發時更新："
      }
    },
    {
      "segment_id": "6648a219",
      "source_content": "```tsx\nconst [buttonOpacity, setButtonOpacity] = useState(1);\nreturn (\n  <TouchableOpacity\n    onPressIn={() => setButtonOpacity(0.5)}\n    onPressOut={() => setButtonOpacity(1)}>\n    <View style={{opacity: buttonOpacity}}>\n      <Text>Press me!</Text>\n    </View>\n  </TouchableOpacity>\n);\n```",
      "source_content_hash": "7d91f62234df3d8fa2a6fc4f80a6fbe3a6eab29212a8bd713ad83ddcf2990adf",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_6648a219"
      }
    },
    {
      "segment_id": "e536ea0d",
      "source_content": "This is computationally intensive compared to the original example - React needs to re-render the component hierarchy each time the opacity changes, even though other properties of the view and its children haven't changed. Usually this overhead isn't a concern but when performing continuous animations and responding to gestures, judiciously optimizing your components can improve your animations' fidelity.",
      "source_content_hash": "ba1a853eaba9385d5b88b2aabbebfd351e67e63af7e5b7fdf34e4622109f8090",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "相較原始範例，此方法計算量較大——即使視圖及其子元件的其他屬性未改變，React 仍需在每次不透明度變化時重新渲染元件層級。通常這種開銷無關緊要，但在執行連續動畫和處理手勢時，謹慎優化元件可提升動畫流暢度。"
      }
    },
    {
      "segment_id": "40158b4b",
      "source_content": "If you look at the implementation of `setNativeProps` in [NativeMethodsMixin](https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-prod.js) you will notice that it is a wrapper around `RCTUIManager.updateView` - this is the exact same function call that results from re-rendering - see [receiveComponent in ReactNativeBaseComponent](https://github.com/facebook/react-native/blob/fb2ec1ea47c53c2e7b873acb1cb46192ac74274e/Libraries/Renderer/oss/ReactNativeRenderer-prod.js#L5793-L5813).",
      "source_content_hash": "dbd8b6ab1a55ec7b910228dbef0ea154d8eda7b6158bbcbcc0ba5e08f5f0f647",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若查看 [NativeMethodsMixin](https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Renderer/implementations/ReactNativeRenderer-prod.js) 中 `setNativeProps` 的實作，會發現它實際是封裝了 `RCTUIManager.updateView`——這與重新渲染觸發的函數調用完全相同（參見 [ReactNativeBaseComponent 中的 receiveComponent](https://github.com/facebook/react-native/blob/fb2ec1ea47c53c2e7b873acb1cb46192ac74274e/Libraries/Renderer/oss/ReactNativeRenderer-prod.js#L5793-L5813)）。"
      }
    },
    {
      "segment_id": "c431704b",
      "source_content": "## Composite components and setNativeProps",
      "source_content_hash": "4f14ddf8138cb0e95bfed341d11dd6405d82a025cf459b23a00afb80c0298b51",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 複合元件與 setNativeProps"
      }
    },
    {
      "segment_id": "79ad944d",
      "source_content": "Composite components are not backed by a native view, so you cannot call `setNativeProps` on them. Consider this example:",
      "source_content_hash": "e1785ce45df80caf7bd60da2d967cad75ccf1a23415794c3d59eedc55fffa4ad",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "複合元件沒有對應的原生視圖，因此無法對其調用 `setNativeProps`。參考以下範例："
      }
    },
    {
      "segment_id": "706eae60",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=setNativeProps%20with%20Composite%20Components&ext=js\nimport React from 'react';\nimport {Text, TouchableOpacity, View} from 'react-native';\n\nconst MyButton = props => (\n  <View style={{marginTop: 50}}>\n    <Text>{props.label}</Text>\n  </View>\n);\n\nconst App = () => (\n  <TouchableOpacity>\n    <MyButton label=\"Press me!\" />\n  </TouchableOpacity>\n);\n\nexport default App;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=setNativeProps%20with%20Composite%20Components&ext=tsx\nimport React from 'react';\nimport {Text, TouchableOpacity, View} from 'react-native';\n\nconst MyButton = (props: {label: string}) => (\n  <View style={{marginTop: 50}}>\n    <Text>{props.label}</Text>\n  </View>\n);\n\nconst App = () => (\n  <TouchableOpacity>\n    <MyButton label=\"Press me!\" />\n  </TouchableOpacity>\n);\n\nexport default App;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "2c54179fb1c09101e73d7b1ead07962a617daeab3c1249fc6909e4258c8e077d",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_706eae60"
      }
    },
    {
      "segment_id": "6693c38c",
      "source_content": "If you run this you will immediately see this error: `Touchable child must either be native or forward setNativeProps to a native component`. This occurs because `MyButton` isn't directly backed by a native view whose opacity should be set. You can think about it like this: if you define a component with `createReactClass` you would not expect to be able to set a style prop on it and have that work - you would need to pass the style prop down to a child, unless you are wrapping a native component. Similarly, we are going to forward `setNativeProps` to a native-backed child component.",
      "source_content_hash": "4da0cc80d69ea3e5c1189bad12a9f203f489f2af9827f04b0ae3e5742c2647a7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "運行時會立即看到錯誤：`Touchable 子元件必須是原生元件或將 setNativeProps 轉發至原生元件`。這是因為 `MyButton` 並非直接由可設置不透明度的原生視圖構成。可以這樣理解：若用 `createReactClass` 定義元件，你不會期望直接對其設置樣式屬性就能生效——除非包裝了原生元件，否則需將樣式屬性傳遞給子元件。同理，我們需將 `setNativeProps` 轉發至原生支持的子元件。"
      }
    },
    {
      "segment_id": "8172a0a5",
      "source_content": "#### Forward setNativeProps to a child",
      "source_content_hash": "39588a349510d99641c85588ccc951a0d9a26b8752c56fb0dc5bd37268345957",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### 將 setNativeProps 轉發至子元件"
      }
    },
    {
      "segment_id": "1b4de6df",
      "source_content": "Since the `setNativeProps` method exists on any ref to a `View` component, it is enough to forward a ref on your custom component to one of the `<View />` components that it renders. This means that a call to `setNativeProps` on the custom component will have the same effect as if you called `setNativeProps` on the wrapped `View` component itself.",
      "source_content_hash": "915a77f87ff917e7edabb2ac89332600d957d063f518363375b4df9be4b903bc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "由於 `setNativeProps` 方法存在於任何 `View` 元件的 ref 上，只需將自訂元件的 ref 轉發至其渲染的某個 `<View />` 元件即可。這意味著對自訂元件調用 `setNativeProps` 的效果，等同於直接對被包裝的 `View` 元件調用該方法。"
      }
    },
    {
      "segment_id": "11507d75",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Forwarding%20setNativeProps&ext=js\nimport React from 'react';\nimport {Text, TouchableOpacity, View} from 'react-native';\n\nconst MyButton = React.forwardRef((props, ref) => (\n  <View {...props} ref={ref} style={{marginTop: 50}}>\n    <Text>{props.label}</Text>\n  </View>\n));\n\nconst App = () => (\n  <TouchableOpacity>\n    <MyButton label=\"Press me!\" />\n  </TouchableOpacity>\n);\n\nexport default App;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Forwarding%20setNativeProps&ext=tsx\nimport React from 'react';\nimport {Text, TouchableOpacity, View} from 'react-native';\n\nconst MyButton = React.forwardRef<View, {label: string}>((props, ref) => (\n  <View {...props} ref={ref} style={{marginTop: 50}}>\n    <Text>{props.label}</Text>\n  </View>\n));\n\nconst App = () => (\n  <TouchableOpacity>\n    <MyButton label=\"Press me!\" />\n  </TouchableOpacity>\n);\n\nexport default App;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "5a9a07efa76fd4c5c651988cb55443cfdf9f7e05214b61a677ea73a287e31cb5",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_11507d75"
      }
    },
    {
      "segment_id": "0ddaa835",
      "source_content": "You can now use `MyButton` inside of `TouchableOpacity`!",
      "source_content_hash": "3fd9a48f9ba4768eb8922233075fe2ca7fc34e4b3f90a533f32142c1ac901870",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在您可以在 `TouchableOpacity` 中使用 `MyButton` 了！"
      }
    },
    {
      "segment_id": "fd7ed056",
      "source_content": "You may have noticed that we passed all of the props down to the child view using `{...props}`. The reason for this is that `TouchableOpacity` is actually a composite component, and so in addition to depending on `setNativeProps` on its child, it also requires that the child perform touch handling. To do this, it passes on [various props](view.md#onmoveshouldsetresponder) that call back to the `TouchableOpacity` component. `TouchableHighlight`, in contrast, is backed by a native view and only requires that we implement `setNativeProps`.",
      "source_content_hash": "ae1a8b2bb648e1e0232e438e55a916db213eeeb791efa3787c6bc280e78f95fe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您可能注意到我們使用 `{...props}` 將所有屬性傳遞給子視圖。這是因為 `TouchableOpacity` 實際上是一個複合元件，除了依賴子元件的 `setNativeProps` 外，還需要子元件處理觸控操作。為此，它會傳遞[各種屬性](view.md#onmoveshouldsetresponder)回調到 `TouchableOpacity` 元件。相比之下，`TouchableHighlight` 由原生視圖支持，僅需要我們實現 `setNativeProps`。"
      }
    },
    {
      "segment_id": "58f98d22",
      "source_content": "## setNativeProps to edit TextInput value",
      "source_content_hash": "a6ecb0bf6b078449562269350493d598fe80994e8847b5d630206c1bc565e81e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 使用 setNativeProps 編輯 TextInput 值"
      }
    },
    {
      "segment_id": "d636abf8",
      "source_content": "Another very common use case of `setNativeProps` is to edit the value of the TextInput. The `controlled` prop of TextInput can sometimes drop characters when the `bufferDelay` is low and the user types very quickly. Some developers prefer to skip this prop entirely and instead use `setNativeProps` to directly manipulate the TextInput value when necessary. For example, the following code demonstrates editing the input when you tap a button:",
      "source_content_hash": "5c16cd7de7b0220f5b989ec2bb2c714287365b55cd0f6be930309600e0f22f66",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "另一個常見的 `setNativeProps` 使用情境是編輯 TextInput 的值。當 `bufferDelay` 較低且用戶輸入速度極快時，TextInput 的 `controlled` 屬性有時會丟失字符。部分開發者傾向完全跳過此屬性，改在必要時直接使用 `setNativeProps` 操作 TextInput 值。例如，以下代碼示範點擊按鈕時編輯輸入框："
      }
    },
    {
      "segment_id": "0f8eff48",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Clear%20text&ext=js\nimport React from 'react';\nimport {useCallback, useRef} from 'react';\nimport {\n  StyleSheet,\n  TextInput,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\n\nconst App = () => {\n  const inputRef = useRef(null);\n  const editText = useCallback(() => {\n    inputRef.current.setNativeProps({text: 'Edited Text'});\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <TextInput ref={inputRef} style={styles.input} />\n      <TouchableOpacity onPress={editText}>\n        <Text>Edit text</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  input: {\n    height: 50,\n    width: 200,\n    marginHorizontal: 20,\n    borderWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n\nexport default App;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Clear%20text&ext=tsx\nimport React from 'react';\nimport {useCallback, useRef} from 'react';\nimport {\n  StyleSheet,\n  TextInput,\n  Text,\n  TouchableOpacity,\n  View,\n} from 'react-native';\n\nconst App = () => {\n  const inputRef = useRef<TextInput>(null);\n  const editText = useCallback(() => {\n    inputRef.current?.setNativeProps({text: 'Edited Text'});\n  }, []);\n\n  return (\n    <View style={styles.container}>\n      <TextInput ref={inputRef} style={styles.input} />\n      <TouchableOpacity onPress={editText}>\n        <Text>Edit text</Text>\n      </TouchableOpacity>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  input: {\n    height: 50,\n    width: 200,\n    marginHorizontal: 20,\n    borderWidth: 1,\n    borderColor: '#ccc',\n  },\n});\n\nexport default App;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "14c7ca79062ce28216577ea934b711f12d550183e2c6a80ea671ef323527c4f6",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_0f8eff48"
      }
    },
    {
      "segment_id": "f4b938fe",
      "source_content": "You can use the [`clear`](../textinput#clear) method to clear the `TextInput` which clears the current input text using the same approach.",
      "source_content_hash": "f135d9b038987cd5d69cf63ec74bf863181c4d8bdfe8820e7dd893fd4acbd614",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您可以使用 [`clear`](../textinput#clear) 方法清除 `TextInput`，該方法採用相同方式清空當前輸入文字。"
      }
    },
    {
      "segment_id": "2b20caf3",
      "source_content": "## Avoiding conflicts with the render function",
      "source_content_hash": "4b1062a450ccdab28a3d40906335dede03ed3a455504ef9a41d39e7008de550e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 避免與渲染函數衝突"
      }
    },
    {
      "segment_id": "52d45a2c",
      "source_content": "If you update a property that is also managed by the render function, you might end up with some unpredictable and confusing bugs because anytime the component re-renders and that property changes, whatever value was previously set from `setNativeProps` will be completely ignored and overridden.",
      "source_content_hash": "948e74227a9a95bf9f8a7692aee2183766ac79f362026ec2ce76f16b25ab499a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若您更新的屬性同時由渲染函數管理，可能導致不可預測的錯誤，因為當元件重新渲染且該屬性變更時，先前透過 `setNativeProps` 設定的值將被完全忽略並覆寫。"
      }
    },
    {
      "segment_id": "a075432c",
      "source_content": "## setNativeProps & shouldComponentUpdate",
      "source_content_hash": "f0be8c3a7bc9e16ddab7f42b0e719e352092a682795313f45322d0b0ffdae069",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## setNativeProps 與 shouldComponentUpdate"
      }
    },
    {
      "segment_id": "5014d30c",
      "source_content": "By [intelligently applying `shouldComponentUpdate`](https://reactjs.org/docs/optimizing-performance.html#avoid-reconciliation) you can avoid the unnecessary overhead involved in reconciling unchanged component subtrees, to the point where it may be performant enough to use `setState` instead of `setNativeProps`.",
      "source_content_hash": "b4026551ebad95b774f11d0c27adebe2b4ad1876525273714d9b4f9d4fa76758",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "透過[智慧應用 `shouldComponentUpdate`](https://reactjs.org/docs/optimizing-performance.html#avoid-reconciliation)，可避免協調未變更元件子樹的額外開銷，甚至可能使 `setState` 的性能足以取代 `setNativeProps`。"
      }
    },
    {
      "segment_id": "4b62af77",
      "source_content": "## Other native methods",
      "source_content_hash": "d815609fcb6ce5756e41958fde9a1d9d275e84a3bb117554698bc560b0bba581",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 其他原生方法"
      }
    },
    {
      "segment_id": "740d2e67",
      "source_content": "The methods described here are available on most of the default components provided by React Native. Note, however, that they are _not_ available on composite components that aren't directly backed by a native view. This will generally include most components that you define in your own app.",
      "source_content_hash": "046402c26b8a08090a83909a2b508e3a4302aef346cd0dc232288aa64f8d3064",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "本文描述的方法適用於 React Native 提供的大多數預設元件。但請注意，這些方法_不適用_於非直接由原生視圖支持的複合元件，這通常包含您自訂應用中的多數元件。"
      }
    },
    {
      "segment_id": "1d7c4366",
      "source_content": "### measure(callback)",
      "source_content_hash": "42ede145526a82c5f9cee7ff9f7b742e6e7441536b3a5c556e2f74655dca2f52",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### measure(callback)"
      }
    },
    {
      "segment_id": "7fa65ec5",
      "source_content": "Determines the location on screen, width, and height in the viewport of the given view and returns the values via an async callback. If successful, the callback will be called with the following arguments:",
      "source_content_hash": "17e20462af69769fcecaa91bda433324c34ccd4bde1113111dbefffbf1706257",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "測量指定視圖在螢幕上的位置、寬度和高度，並透過異步回調返回數值。成功時回調參數包含："
      }
    },
    {
      "segment_id": "efec3fce",
      "source_content": "- x\n- y\n- width\n- height\n- pageX\n- pageY",
      "source_content_hash": "8a8f3ad8e8c6c2914c077cb244be5edcf1e4968cd57ad393a15baa5158a0e5b3",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- x\n- y\n- width\n- height\n- pageX\n- pageY"
      }
    },
    {
      "segment_id": "2ab62b74",
      "source_content": "Note that these measurements are not available until after the rendering has been completed in native. If you need the measurements as soon as possible and you don't need `pageX` and `pageY`, consider using the [`onLayout`](view.md#onlayout) property instead.",
      "source_content_hash": "6ea7d5b5cbabfab5e6bb7a39050e7f0f601aa4ad4e3bc441e0160e6b2c031789",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "請注意這些測量值需等待原生端渲染完成後才能取得。若需盡快獲取測量值且不需要 `pageX` 和 `pageY`，建議改用 [`onLayout`](view.md#onlayout) 屬性。"
      }
    },
    {
      "segment_id": "c9e08343",
      "source_content": "Also the width and height returned by `measure()` are the width and height of the component in the viewport. If you need the actual size of the component, consider using the [`onLayout`](view.md#onlayout) property instead.",
      "source_content_hash": "8fc12da3679304efbdf9ad56013382f83963a9c16db6d2e9531c58df49fdb6e1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此外，`measure()` 返回的寬高是元件在視窗中的尺寸。若需要元件的實際尺寸，建議使用 [`onLayout`](view.md#onlayout) 屬性。"
      }
    },
    {
      "segment_id": "0b7ed806",
      "source_content": "### measureInWindow(callback)",
      "source_content_hash": "71601f887631841d61fde77719d53630e8619033f0999898d4a7db24fd47c5dc",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### measureInWindow(callback)"
      }
    },
    {
      "segment_id": "8517ac25",
      "source_content": "Determines the location of the given view in the window and returns the values via an async callback. If the React root view is embedded in another native view, this will give you the absolute coordinates. If successful, the callback will be called with the following arguments:",
      "source_content_hash": "e524c2042bcf677288905c1ee9157d42ed8838411bcf7d47e615a3240d7f8f52",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "測量指定視圖在視窗中的位置，並透過異步回調返回數值。若 React 根視圖嵌入其他原生視圖中，此方法將提供絕對座標。成功時回調參數包含："
      }
    },
    {
      "segment_id": "7bae3301",
      "source_content": "- x\n- y\n- width\n- height",
      "source_content_hash": "f8fe52e94c5c1ffc6ced6bd58e1399deca75e89f3b636cf343256e84fe522c20",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- x\n- y\n- width\n- height"
      }
    },
    {
      "segment_id": "d96e8afa",
      "source_content": "### measureLayout(relativeToNativeComponentRef, onSuccess, onFail)",
      "source_content_hash": "eda66a06b87cc0a7cc5c0f5c06966147211774f0e33c30b770ab68dc13a628c0",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### measureLayout(relativeToNativeComponentRef, onSuccess, onFail)"
      }
    },
    {
      "segment_id": "e020f7ed",
      "source_content": "Like `measure()`, but measures the view relative to an ancestor, specified with `relativeToNativeComponentRef` reference. This means that the returned coordinates are relative to the origin `x`, `y` of the ancestor view.",
      "source_content_hash": "3ffaaa03e78723944f69c39c0ebd4fd981dd974d29b7945012fc9c787eb8e5b0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "類似 `measure()`，但測量相對於祖先視圖（透過 `relativeToNativeComponentRef` 引用指定）的相對位置。返回座標為相對於祖先視圖原點 `x`, `y` 的數值。"
      }
    },
    {
      "segment_id": "ef35d58d",
      "source_content": ":::note\nThis method can also be called with a `relativeToNativeNode` handler (instead of reference), but this variant is obsolete with the new architecture.\n:::",
      "source_content_hash": "5ec730cbfedf24839d835f8d0127f9405d5b615cd7b0d8ee5a238bd75f6dd0d2",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::note\n此方法亦可使用 `relativeToNativeNode` 處理程序（而非引用）調用，但此變體在新架構中已過時。\n:::"
      }
    },
    {
      "segment_id": "94e72c2a",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=measureLayout%20example&supportedPlatforms=android,ios&ext=js\nimport React, {useEffect, useRef, useState} from 'react';\nimport {Text, View, StyleSheet} from 'react-native';\n\nconst App = () => {\n  const textContainerRef = useRef(null);\n  const textRef = useRef(null);\n  const [measure, setMeasure] = useState(null);\n\n  useEffect(() => {\n    if (textRef.current && textContainerRef.current) {\n      textRef.current.measureLayout(\n        textContainerRef.current,\n        (left, top, width, height) => {\n          setMeasure({left, top, width, height});\n        },\n      );\n    }\n  }, [measure]);\n\n  return (\n    <View style={styles.container}>\n      <View ref={textContainerRef} style={styles.textContainer}>\n        <Text ref={textRef}>Where am I? (relative to the text container)</Text>\n      </View>\n      <Text style={styles.measure}>{JSON.stringify(measure)}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  textContainer: {\n    backgroundColor: '#61dafb',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 12,\n  },\n  measure: {\n    textAlign: 'center',\n    padding: 12,\n  },\n});\n\nexport default App;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=measureLayout%20example&ext=tsx\nimport React, {useEffect, useRef, useState} from 'react';\nimport {Text, View, StyleSheet} from 'react-native';\n\ntype Measurements = {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n};\n\nconst App = () => {\n  const textContainerRef = useRef<View>(null);\n  const textRef = useRef<Text>(null);\n  const [measure, setMeasure] = useState<Measurements | null>(null);\n\n  useEffect(() => {\n    if (textRef.current && textContainerRef.current) {\n      textRef.current?.measureLayout(\n        textContainerRef.current,\n        (left, top, width, height) => {\n          setMeasure({left, top, width, height});\n        },\n        () => {\n          console.error('measurement failed');\n        },\n      );\n    }\n  }, [measure]);\n\n  return (\n    <View style={styles.container}>\n      <View ref={textContainerRef} style={styles.textContainer}>\n        <Text ref={textRef}>Where am I? (relative to the text container)</Text>\n      </View>\n      <Text style={styles.measure}>{JSON.stringify(measure)}</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n  },\n  textContainer: {\n    backgroundColor: '#61dafb',\n    justifyContent: 'center',\n    alignItems: 'center',\n    padding: 12,\n  },\n  measure: {\n    textAlign: 'center',\n    padding: 12,\n  },\n});\n\nexport default App;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "7b4725855a51e17e5ecb10a23750e3ed73a264d48c71384299ff7b18c2254d15",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_94e72c2a"
      }
    },
    {
      "segment_id": "b6ec34ca",
      "source_content": "### focus()",
      "source_content_hash": "4119f5bf9384561424f8e9773ce1efd53522e0665fe6e1794a9cca51dbd293f5",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### focus()"
      }
    },
    {
      "segment_id": "0beac34c",
      "source_content": "Requests focus for the given input or view. The exact behavior triggered will depend on the platform and type of view.",
      "source_content_hash": "d16c3ede12d258f315c6aab5f53ea527272280779afe57607e779412dd8b2a07",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "請求將焦點設定於指定的輸入框或視圖上。觸發的具體行為會依平台和視圖類型而有所不同。"
      }
    },
    {
      "segment_id": "394d8574",
      "source_content": "### blur()",
      "source_content_hash": "07061806aa2efe66f2e3214a5bfd7971794e42e9725459a4e9710ca2b3719457",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### blur()"
      }
    },
    {
      "segment_id": "13c7706c",
      "source_content": "Removes focus from an input or view. This is the opposite of `focus()`.",
      "source_content_hash": "fc1c83cf79f7dc0147df99205d0e3c93f7e0dc97ef5ef5378b7862854dc4014f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "移除輸入框或視圖的焦點。此為 `focus()` 的反向操作。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.78/legacy/direct-manipulation.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.655631+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "99b53671b10d8688ecef5aadbf82532dd17e2b015906229b05558b52059d0901"
  }
}