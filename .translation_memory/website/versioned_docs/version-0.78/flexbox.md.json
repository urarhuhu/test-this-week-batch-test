{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.78/flexbox.md",
  "source_file_content_hash": "ac63a52a2cd107bf2556c62a9a54f8b3e04a72ce1f4eb2f7dcece8a4392d5459",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: flexbox\ntitle: Layout with Flexbox\n---",
      "source_content_hash": "3cffe3efeab0344fefaf5b081037b4207be4071a62a8c1ede88db37784db5627",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4d1292be"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "A component can specify the layout of its children using the Flexbox algorithm. Flexbox is designed to provide a consistent layout on different screen sizes.",
      "source_content_hash": "eb40390b9e17b030ad1ac620cd85634ead08833de65ddc9e3a6003f839a9df3e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "元件可以透過 Flexbox 演算法來指定其子元素的佈局方式。Flexbox 的設計目的是在不同螢幕尺寸上提供一致的佈局。"
      }
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "You will normally use a combination of `flexDirection`, `alignItems`, and `justifyContent` to achieve the right layout.",
      "source_content_hash": "8ca54f79a3081aaebdd7a18317131c05e68d6f0b5e7c150b1433d7ad3985263d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "通常你會結合使用 `flexDirection`、`alignItems` 和 `justifyContent` 來達成理想的佈局效果。"
      }
    },
    {
      "segment_id": "0e7eb58c",
      "source_content": ":::caution\nFlexbox works the same way in React Native as it does in CSS on the web, with a few exceptions.\nThe defaults are different, with `flexDirection` defaulting to `column` instead of `row`, `alignContent` defaulting to `flex-start` instead of `stretch`, `flexShrink` defaulting to `0` instead of `1`, the `flex` parameter only supporting a single number.\n:::",
      "source_content_hash": "5b1463dcb220613eda4d344a58530c869d6635ce991120a476139914fff8ee9f",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::caution\nFlexbox 在 React Native 中的運作方式與在網頁 CSS 中大致相同，但有一些例外：\n預設值不同，`flexDirection` 預設為 `column` 而非 `row`，`alignContent` 預設為 `flex-start` 而非 `stretch`，`flexShrink` 預設為 `0` 而非 `1`，且 `flex` 參數僅支援單一數值。\n:::"
      }
    },
    {
      "segment_id": "3daf1b88",
      "source_content": "## Flex",
      "source_content_hash": "ff56bb1d7f2aeb5c0debbfe043b42d72d4f1bed819d46ff31707dd88b4b153b8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## Flex 彈性佈局"
      }
    },
    {
      "segment_id": "f6168993",
      "source_content": "[`flex`](layout-props#flex) will define how your items are going to **“fill”** over the available space along your main axis. Space will be divided according to each element's flex property.",
      "source_content_hash": "9f9c5a7a2943b72365b2837ad5bf7988b99dbb9d661e69a2de308a77d4e35198",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[`flex`](layout-props#flex) 屬性定義了子元素如何沿主軸**「填滿」**可用空間。空間會根據每個元素的 flex 屬性比例分配。"
      }
    },
    {
      "segment_id": "f5f6d2ce",
      "source_content": "In the following example, the red, orange, and green views are all children in the container view that has `flex: 1` set. The red view uses `flex: 1` , the orange view uses `flex: 2`, and the green view uses `flex: 3` . **1+2+3 = 6**, which means that the red view will get `1/6` of the space, the orange `2/6` of the space, and the green `3/6` of the space.",
      "source_content_hash": "17640a28cc75e5e274fe869aff57071a91c124d1f6cb98c40483cf7cc7f58904",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在以下範例中，紅色、橘色和綠色視圖都是容器視圖的子元素，且容器設定了 `flex: 1`。紅色視圖使用 `flex: 1`，橘色視圖使用 `flex: 2`，綠色視圖使用 `flex: 3`。**1+2+3 = 6**，這表示紅色視圖將獲得 `1/6` 的空間，橘色視圖獲得 `2/6`，綠色視圖獲得 `3/6`。"
      }
    },
    {
      "segment_id": "41a8ae85",
      "source_content": "```SnackPlayer name=Flex%20Example\nimport React from 'react';\nimport {StyleSheet, View} from 'react-native';\n\nconst Flex = () => {\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          // Try setting `flexDirection` to `\"row\"`.\n          flexDirection: 'column',\n        },\n      ]}>\n      <View style={{flex: 1, backgroundColor: 'red'}} />\n      <View style={{flex: 2, backgroundColor: 'darkorange'}} />\n      <View style={{flex: 3, backgroundColor: 'green'}} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n  },\n});\n\nexport default Flex;\n```",
      "source_content_hash": "933c956d54f4c85539fc8e7fe60daab6ce07e3a9c1e5d5a6d84c5be69fab893b",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_41a8ae85"
      }
    },
    {
      "segment_id": "60410af6",
      "source_content": "## Flex Direction",
      "source_content_hash": "2e29f1d62c5a23785004add253d2cfd17ee80941455667b00e012b73ea7cf100",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## Flex Direction 主軸方向"
      }
    },
    {
      "segment_id": "b9aaa519",
      "source_content": "[`flexDirection`](layout-props#flexdirection) controls the direction in which the children of a node are laid out. This is also referred to as the main axis. The cross axis is the axis perpendicular to the main axis, or the axis which the wrapping lines are laid out in.",
      "source_content_hash": "31c691933763972d16e3ff37ccca279c780d9d086b2993528280656ed08aedc9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[`flexDirection`](layout-props#flexdirection) 控制子節點的排列方向，這也被稱為主軸。交叉軸則是與主軸垂直的方向，或是換行時的排列方向。"
      }
    },
    {
      "segment_id": "e3321a43",
      "source_content": "- `column` (**default value**) Align children from top to bottom. If wrapping is enabled, then the next line will start to the right of the first item on the top of the container.\n\n- `row` Align children from left to right. If wrapping is enabled, then the next line will start under the first item on the left of the container.\n\n- `column-reverse` Align children from bottom to top. If wrapping is enabled, then the next line will start to the right of the first item on the bottom of the container.\n\n- `row-reverse` Align children from right to left. If wrapping is enabled, then the next line will start under the first item on the right of the container.",
      "source_content_hash": "6fd64c26c5bbdb5c62a21ef790a14d3b3cc69c2e6b7cbcfde7a7428d8d4068e5",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `column` (**預設值**) 子元素從上到下排列。若啟用換行，則下一行會從容器頂部第一個項目的右側開始。\n- `row` 子元素從左到右排列。若啟用換行，則下一行會從容器左側第一個項目的下方開始。\n- `column-reverse` 子元素從下到上排列。若啟用換行，則下一行會從容器底部第一個項目的右側開始。\n- `row-reverse` 子元素從右到左排列。若啟用換行，則下一行會從容器右側第一個項目的下方開始。"
      }
    },
    {
      "segment_id": "531437ca",
      "source_content": "You can learn more [here](https://www.yogalayout.dev/docs/styling/flex-direction).",
      "source_content_hash": "f8b3f4301b395abb361e025ea21ef4c30a5bcf51d1523faeeb72395273945f49",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以在此[了解更多](https://www.yogalayout.dev/docs/styling/flex-direction)。"
      }
    },
    {
      "segment_id": "c537a3d3",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Flex%20Direction&ext=js\nimport React, {useState} from 'react';\nimport {StyleSheet, Text, TouchableOpacity, View} from 'react-native';\n\nconst FlexDirectionBasics = () => {\n  const [flexDirection, setflexDirection] = useState('column');\n\n  return (\n    <PreviewLayout\n      label=\"flexDirection\"\n      values={['column', 'row', 'column-reverse', 'row-reverse']}\n      selectedValue={flexDirection}\n      setSelectedValue={setflexDirection}>\n      <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default FlexDirectionBasics;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Flex%20Direction&ext=tsx\nimport React, {useState} from 'react';\nimport {StyleSheet, Text, TouchableOpacity, View} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\nconst FlexDirectionBasics = () => {\n  const [flexDirection, setflexDirection] = useState('column');\n\n  return (\n    <PreviewLayout\n      label=\"flexDirection\"\n      values={['column', 'row', 'column-reverse', 'row-reverse']}\n      selectedValue={flexDirection}\n      setSelectedValue={setflexDirection}>\n      <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  label: string;\n  values: string[];\n  selectedValue: string;\n  setSelectedValue: (value: string) => void;\n}>;\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}: PreviewLayoutProps) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default FlexDirectionBasics;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "bef43e16b11ed3a6e8cd88cb53eec4177f0da34a03239c288c70d69ebc5a415b",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_c537a3d3"
      }
    },
    {
      "segment_id": "846134ef",
      "source_content": "## Layout Direction",
      "source_content_hash": "842a814b2f8980bc1d84cfac3ae44b2a9319fe548d682179ed426020946c3b79",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## Layout Direction 佈局方向"
      }
    },
    {
      "segment_id": "53e725dc",
      "source_content": "Layout [`direction`](layout-props#direction) specifies the direction in which children and text in a hierarchy should be laid out. Layout direction also affects what edge `start` and `end` refer to. By default, React Native lays out with LTR layout direction. In this mode `start` refers to left and `end` refers to right.",
      "source_content_hash": "4726927926e7f9e1d71f85b98b1d988b0f056db8a03051e59072923e0068b115",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "佈局 [`direction`](layout-props#direction) 指定了子元素和文字在層級結構中的排列方向。佈局方向也會影響 `start` 和 `end` 所指向的邊緣。預設情況下，React Native 使用 LTR（由左至右）佈局方向。在此模式下，`start` 指向左側，`end` 指向右側。"
      }
    },
    {
      "segment_id": "ce3bcadf",
      "source_content": "- `LTR` (**default value**) Text and children are laid out from left to right. Margin and padding applied to the start of an element are applied on the left side.\n\n- `RTL` Text and children are laid out from right to left. Margin and padding applied to the start of an element are applied on the right side.",
      "source_content_hash": "a64fe861fff55c46aebc247e0005ae69b731b4e91ebb5238de27cc4afbc3908d",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `LTR` (**預設值**) 文字和子元素由左至右排列。應用於元素起始位置的 margin 和 padding 會作用於左側。\n- `RTL` 文字和子元素由右至左排列。應用於元素起始位置的 margin 和 padding 會作用於右側。"
      }
    },
    {
      "segment_id": "5ca07c68",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Flex%20Direction&ext=js\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\n\nconst DirectionLayout = () => {\n  const [direction, setDirection] = useState('ltr');\n\n  return (\n    <PreviewLayout\n      label=\"direction\"\n      selectedValue={direction}\n      values={['ltr', 'rtl']}\n      setSelectedValue={setDirection}>\n      <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default DirectionLayout;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Flex%20Direction&ext=tsx\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\nconst DirectionLayout = () => {\n  const [direction, setDirection] = useState('ltr');\n\n  return (\n    <PreviewLayout\n      label=\"direction\"\n      selectedValue={direction}\n      values={['ltr', 'rtl']}\n      setSelectedValue={setDirection}>\n      <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  label: string;\n  values: string[];\n  selectedValue: string;\n  setSelectedValue: (value: string) => void;\n}>;\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}: PreviewLayoutProps) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default DirectionLayout;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "4b19a3bf8381091b00c5eb0ff5d2bc033b86b304c8adcf6a2b2b70bbb8cb1cf2",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_5ca07c68"
      }
    },
    {
      "segment_id": "152bce91",
      "source_content": "## Justify Content",
      "source_content_hash": "840f78008b3f94616629a64bb95ca9cf78d79800f224748f9fc2fb2215321938",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## Justify Content 主軸對齊"
      }
    },
    {
      "segment_id": "13ccbdec",
      "source_content": "[`justifyContent`](layout-props#justifycontent) describes how to align children within the main axis of their container. For example, you can use this property to center a child horizontally within a container with `flexDirection` set to `row` or vertically within a container with `flexDirection` set to `column`.",
      "source_content_hash": "1ee3c058132b1f74ea44bdf7a78928a975e77dcee1bdb337e2334a5c5f184e45",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[`justifyContent`](layout-props#justifycontent) 描述了如何沿容器的主軸對齊子元素。例如，你可以使用此屬性在 `flexDirection` 設為 `row` 的容器中水平置中子元素，或在 `flexDirection` 設為 `column` 的容器中垂直置中子元素。"
      }
    },
    {
      "segment_id": "bc349d8b",
      "source_content": "- `flex-start`(**default value**) Align children of a container to the start of the container's main axis.\n\n- `flex-end` Align children of a container to the end of the container's main axis.\n\n- `center` Align children of a container in the center of the container's main axis.\n\n- `space-between` Evenly space off children across the container's main axis, distributing the remaining space between the children.\n\n- `space-around` Evenly space off children across the container's main axis, distributing the remaining space around the children. Compared to `space-between`, using `space-around` will result in space being distributed to the beginning of the first child and end of the last child.\n\n- `space-evenly` Evenly distribute children within the alignment container along the main axis. The spacing between each pair of adjacent items, the main-start edge and the first item, and the main-end edge and the last item, are all exactly the same.",
      "source_content_hash": "d66e4a85883a69a0d4ea3decb06800941d592fff60d5196270471176f8d6f12b",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `flex-start`（**預設值**）將容器的子元素對齊至主軸的起始端。\n\n- `flex-end` 將容器的子元素對齊至主軸的末端。\n\n- `center` 將容器的子元素對齊至主軸的中心。\n\n- `space-between` 沿主軸均勻分布子元素，剩餘空間分配在子元素之間。\n\n- `space-around` 沿主軸均勻分布子元素，剩餘空間環繞子元素分配。與 `space-between` 相比，`space-around` 會在首個子元素前和最後子元素後也分配空間。\n\n- `space-evenly` 沿主軸完全均勻分布子元素。每對相鄰子元素之間、主軸起始端與首個子元素之間、主軸末端與最後子元素之間的間距完全相同。"
      }
    },
    {
      "segment_id": "0cfab7d6",
      "source_content": "You can learn more [here](https://www.yogalayout.dev/docs/styling/justify-content).",
      "source_content_hash": "ffea2bc829be9a3d5c0b44d9a3cc30e745f09663ba0447c805b92c21fd0eec65",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以在此[了解更多](https://www.yogalayout.dev/docs/styling/justify-content)。"
      }
    },
    {
      "segment_id": "c59938e3",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Justify%20Content&ext=js\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\n\nconst JustifyContentBasics = () => {\n  const [justifyContent, setJustifyContent] = useState('flex-start');\n\n  return (\n    <PreviewLayout\n      label=\"justifyContent\"\n      selectedValue={justifyContent}\n      values={[\n        'flex-start',\n        'flex-end',\n        'center',\n        'space-between',\n        'space-around',\n        'space-evenly',\n      ]}\n      setSelectedValue={setJustifyContent}>\n      <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default JustifyContentBasics;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Justify%20Content&ext=tsx\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\nconst JustifyContentBasics = () => {\n  const [justifyContent, setJustifyContent] = useState('flex-start');\n\n  return (\n    <PreviewLayout\n      label=\"justifyContent\"\n      selectedValue={justifyContent}\n      values={[\n        'flex-start',\n        'flex-end',\n        'center',\n        'space-between',\n        'space-around',\n        'space-evenly',\n      ]}\n      setSelectedValue={setJustifyContent}>\n      <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  label: string;\n  values: string[];\n  selectedValue: string;\n  setSelectedValue: (value: string) => void;\n}>;\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}: PreviewLayoutProps) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default JustifyContentBasics;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "475d91748232ef3ab66d9a2a49a93bb8d5be3eebb3bdc54f07e90ac7ef287152",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_c59938e3"
      }
    },
    {
      "segment_id": "ad565a3c",
      "source_content": "## Align Items",
      "source_content_hash": "4a257fc0b309880e9e3f4d32e5561e340d5d0f0698b72ad4af9b6c941190f9a0",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 對齊項目 (Align Items)"
      }
    },
    {
      "segment_id": "f3bed9df",
      "source_content": "[`alignItems`](layout-props#alignitems) describes how to align children along the cross axis of their container. It is very similar to `justifyContent` but instead of applying to the main axis, `alignItems` applies to the cross axis.",
      "source_content_hash": "2b75409e3d026ddb305cd0dd98bdb2a3b69ef269b277fa4ea87a300bd6db24ea",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[`alignItems`](layout-props#alignitems) 描述如何沿容器的交叉軸對齊子元素。其功能與 `justifyContent` 類似，但作用於交叉軸而非主軸。"
      }
    },
    {
      "segment_id": "97506226",
      "source_content": "- `stretch` (**default value**) Stretch children of a container to match the `height` of the container's cross axis.\n\n- `flex-start` Align children of a container to the start of the container's cross axis.\n\n- `flex-end` Align children of a container to the end of the container's cross axis.\n\n- `center` Align children of a container in the center of the container's cross axis.\n\n- `baseline` Align children of a container along a common baseline. Individual children can be set to be the reference baseline for their parents.",
      "source_content_hash": "c0b59b55b33df64bca195a6ef000c076ec172c395839f1f91b573fe2004d87bf",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `stretch`（**預設值**）拉伸容器的子元素以匹配容器交叉軸的 `height`。\n\n- `flex-start` 將容器的子元素對齊至交叉軸的起始端。\n\n- `flex-end` 將容器的子元素對齊至交叉軸的末端。\n\n- `center` 將容器的子元素對齊至交叉軸的中心。\n\n- `baseline` 沿共同基線對齊容器的子元素。可將個別子元素設為父元素的參考基線。"
      }
    },
    {
      "segment_id": "5a357fc6",
      "source_content": ":::info\nFor `stretch` to have an effect, children must not have a fixed dimension along the secondary axis. In the following example, setting `alignItems: stretch` does nothing until the `width: 50` is removed from the children.\n:::",
      "source_content_hash": "e1b425c1e91099317e24dd288a7d908b13c719d10f54d2247d8de34a60fac858",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::info\n要使 `stretch` 生效，子元素在次要軸上不能有固定尺寸。以下範例中，除非移除子元素的 `width: 50`，否則設置 `alignItems: stretch` 不會產生效果。\n:::"
      }
    },
    {
      "segment_id": "1c6a8a5f",
      "source_content": "You can learn more [here](https://www.yogalayout.dev/docs/styling/align-items-self).",
      "source_content_hash": "a04e8895ef377f342175a6eae6224eef20f0ed452b136d32e86bfc4cb844cfb4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以在此[了解更多](https://www.yogalayout.dev/docs/styling/align-items-self)。"
      }
    },
    {
      "segment_id": "40c3fbc2",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Align%20Items&ext=js\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\n\nconst AlignItemsLayout = () => {\n  const [alignItems, setAlignItems] = useState('stretch');\n\n  return (\n    <PreviewLayout\n      label=\"alignItems\"\n      selectedValue={alignItems}\n      values={['stretch', 'flex-start', 'flex-end', 'center', 'baseline']}\n      setSelectedValue={setAlignItems}>\n      <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View\n        style={[\n          styles.box,\n          {\n            backgroundColor: 'steelblue',\n            width: 'auto',\n            minWidth: 50,\n          },\n        ]}\n      />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    minHeight: 200,\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default AlignItemsLayout;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Align%20Items&ext=tsx\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\nconst AlignItemsLayout = () => {\n  const [alignItems, setAlignItems] = useState('stretch');\n\n  return (\n    <PreviewLayout\n      label=\"alignItems\"\n      selectedValue={alignItems}\n      values={['stretch', 'flex-start', 'flex-end', 'center', 'baseline']}\n      setSelectedValue={setAlignItems}>\n      <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View\n        style={[\n          styles.box,\n          {\n            backgroundColor: 'steelblue',\n            width: 'auto',\n            minWidth: 50,\n          },\n        ]}\n      />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  label: string;\n  values: string[];\n  selectedValue: string;\n  setSelectedValue: (value: string) => void;\n}>;\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}: PreviewLayoutProps) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    minHeight: 200,\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default AlignItemsLayout;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "ddb5acb2606da3d05d65acc10551474ac25a69e422b08e21fd05b51411143c16",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_40c3fbc2"
      }
    },
    {
      "segment_id": "deab0099",
      "source_content": "## Align Self",
      "source_content_hash": "ecdf1fe73b26ca53ae8c7b402251de8585b389387f753cacd134810827319db8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 自身對齊 (Align Self)"
      }
    },
    {
      "segment_id": "f6e6394b",
      "source_content": "[`alignSelf`](layout-props#alignself) has the same options and effect as `alignItems` but instead of affecting the children within a container, you can apply this property to a single child to change its alignment within its parent. `alignSelf` overrides any option set by the parent with `alignItems`.",
      "source_content_hash": "ba21022150698e23c7cc8ce61e760c45bfd29fcc0c9ea85fc964e3eb55d58b7b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[`alignSelf`](layout-props#alignself) 的選項與效果和 `alignItems` 相同，但作用於單一子元素，可覆寫父容器透過 `alignItems` 設置的對齊方式。"
      }
    },
    {
      "segment_id": "c39d71d5",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Align%20Self&ext=js\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\n\nconst AlignSelfLayout = () => {\n  const [alignSelf, setAlignSelf] = useState('stretch');\n\n  return (\n    <PreviewLayout\n      label=\"alignSelf\"\n      selectedValue={alignSelf}\n      values={['stretch', 'flex-start', 'flex-end', 'center', 'baseline']}\n      setSelectedValue={setAlignSelf}>\n      <View\n        style={[\n          styles.box,\n          {\n            alignSelf,\n            width: 'auto',\n            minWidth: 50,\n            backgroundColor: 'powderblue',\n          },\n        ]}\n      />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={styles.container}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    minHeight: 200,\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default AlignSelfLayout;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Align%20Self&ext=tsx\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport type {PropsWithChildren} from 'react';\nimport type {FlexAlignType} from 'react-native';\n\nconst AlignSelfLayout = () => {\n  const [alignSelf, setAlignSelf] = useState<FlexAlignType>('stretch');\n\n  return (\n    <PreviewLayout\n      label=\"alignSelf\"\n      selectedValue={alignSelf}\n      values={['stretch', 'flex-start', 'flex-end', 'center', 'baseline']}\n      setSelectedValue={setAlignSelf}>\n      <View\n        style={[\n          styles.box,\n          {\n            alignSelf,\n            width: 'auto',\n            minWidth: 50,\n            backgroundColor: 'powderblue',\n          },\n        ]}\n      />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  label: string;\n  values: FlexAlignType[];\n  selectedValue: string;\n  setSelectedValue: (value: FlexAlignType) => void;\n}>;\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}: PreviewLayoutProps) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={styles.container}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    minHeight: 200,\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default AlignSelfLayout;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "92db8b1c7844d14f9d79cdc3282f4f0c23af25098a8b2fb92ee4537fdf8c8d52",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_c39d71d5"
      }
    },
    {
      "segment_id": "275d84f0",
      "source_content": "## Align Content",
      "source_content_hash": "9c03a57ec79e6466cf38530c8813f319f321f881ee383722ff113915c0bbdbf0",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 對齊內容 (Align Content)"
      }
    },
    {
      "segment_id": "51f9efbf",
      "source_content": "[alignContent](layout-props#aligncontent) defines the distribution of lines along the cross-axis. This only has effect when items are wrapped to multiple lines using `flexWrap`.",
      "source_content_hash": "9c3f0eeded83d4fff244c3334f1324a22e56d1c01cfb70efb367339059dbdad3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[alignContent](layout-props#aligncontent) 定義多行內容在交叉軸上的分布方式，僅在使用 `flexWrap` 換行時生效。"
      }
    },
    {
      "segment_id": "ff3b8884",
      "source_content": "- `flex-start` (**default value**) Align wrapped lines to the start of the container's cross axis.\n\n- `flex-end` Align wrapped lines to the end of the container's cross axis.\n\n- `stretch` (_default value when using Yoga on the web_) Stretch wrapped lines to match the height of the container's cross axis.\n\n- `center` Align wrapped lines in the center of the container's cross axis.\n\n- `space-between` Evenly space wrapped lines across the container's cross axis, distributing the remaining space between the lines.\n\n- `space-around` Evenly space wrapped lines across the container's cross axis, distributing the remaining space around the lines. Each end of the container has a half-sized space compared to the space between items.\n\n- `space-evenly` Evenly space wrapped lines across the container's cross axis, distributing the remaining space around the lines. Each space is the same size.",
      "source_content_hash": "152606c07853e826a7c97ba230daa50c262230ef272883e724f9ae5c84bb1be2",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `flex-start`（**預設值**）將換行內容對齊至交叉軸的起始端。\n\n- `flex-end` 將換行內容對齊至交叉軸的末端。\n\n- `stretch`（_Yoga 在網頁端的預設值_）拉伸換行內容以匹配容器交叉軸的高度。\n\n- `center` 將換行內容對齊至交叉軸的中心。\n\n- `space-between` 沿交叉軸均勻分布換行內容，剩餘空間分配在行與行之間。\n\n- `space-around` 沿交叉軸均勻分布換行內容，剩餘空間環繞各行分配。容器兩端的空間為行間空間的一半。\n\n- `space-evenly` 沿交叉軸完全均勻分布換行內容，所有間距大小相同。"
      }
    },
    {
      "segment_id": "ef7bbc13",
      "source_content": "You can learn more [here](https://www.yogalayout.dev/docs/styling/align-content).",
      "source_content_hash": "ef439615f2751ef8a572d88bb2aa794a7ab8f36e19a0463d5520209cef0b2944",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以在此[了解更多](https://www.yogalayout.dev/docs/styling/align-content)。"
      }
    },
    {
      "segment_id": "13615bdd",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Align%20Content&ext=js\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\n\nconst AlignContentLayout = () => {\n  const [alignContent, setAlignContent] = useState('flex-start');\n\n  return (\n    <PreviewLayout\n      label=\"alignContent\"\n      selectedValue={alignContent}\n      values={[\n        'flex-start',\n        'flex-end',\n        'stretch',\n        'center',\n        'space-between',\n        'space-around',\n      ]}\n      setSelectedValue={setAlignContent}>\n      <View style={[styles.box, {backgroundColor: 'orangered'}]} />\n      <View style={[styles.box, {backgroundColor: 'orange'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumseagreen'}]} />\n      <View style={[styles.box, {backgroundColor: 'deepskyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumturquoise'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumslateblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'purple'}]} />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexWrap: 'wrap',\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    maxHeight: 400,\n  },\n  box: {\n    width: 50,\n    height: 80,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default AlignContentLayout;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Align%20Content&ext=tsx\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\nconst AlignContentLayout = () => {\n  const [alignContent, setAlignContent] = useState('flex-start');\n\n  return (\n    <PreviewLayout\n      label=\"alignContent\"\n      selectedValue={alignContent}\n      values={[\n        'flex-start',\n        'flex-end',\n        'stretch',\n        'center',\n        'space-between',\n        'space-around',\n      ]}\n      setSelectedValue={setAlignContent}>\n      <View style={[styles.box, {backgroundColor: 'orangered'}]} />\n      <View style={[styles.box, {backgroundColor: 'orange'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumseagreen'}]} />\n      <View style={[styles.box, {backgroundColor: 'deepskyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumturquoise'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumslateblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'purple'}]} />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  label: string;\n  values: string[];\n  selectedValue: string;\n  setSelectedValue: (value: string) => void;\n}>;\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}: PreviewLayoutProps) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexWrap: 'wrap',\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    maxHeight: 400,\n  },\n  box: {\n    width: 50,\n    height: 80,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default AlignContentLayout;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "1838050b6aefcdcf2de007efa0c95e4f0597ea9eb722e3fe22799ec1c4b68767",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_13615bdd"
      }
    },
    {
      "segment_id": "fc816aab",
      "source_content": "## Flex Wrap",
      "source_content_hash": "ae598338f00b3983012e21fbf6ce0652cbfdae7d7d5574f8816ad992eb739c2c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 彈性換行 (Flex Wrap)"
      }
    },
    {
      "segment_id": "2f8abb7c",
      "source_content": "The [`flexWrap`](layout-props#flexwrap) property is set on containers and it controls what happens when children overflow the size of the container along the main axis. By default, children are forced into a single line (which can shrink elements). If wrapping is allowed, items are wrapped into multiple lines along the main axis if needed.",
      "source_content_hash": "1b2bc65b6fdbc3821bbb37700cbda31630d7bdcf2e9779eb9cd02bb7617a3f7b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "783e0529",
      "source_content": "When wrapping lines, `alignContent` can be used to specify how the lines are placed in the container. Learn more [here](https://www.yogalayout.dev/docs/styling/flex-wrap).",
      "source_content_hash": "7c8111de27cdcba7a4ba95d26f88873e3ef7e2f518d894750074adade3ae61a5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "bded19c3",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Flex%20Wrap&ext=js\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\n\nconst FlexWrapLayout = () => {\n  const [flexWrap, setFlexWrap] = useState('wrap');\n\n  return (\n    <PreviewLayout\n      label=\"flexWrap\"\n      selectedValue={flexWrap}\n      values={['wrap', 'nowrap']}\n      setSelectedValue={setFlexWrap}>\n      <View style={[styles.box, {backgroundColor: 'orangered'}]} />\n      <View style={[styles.box, {backgroundColor: 'orange'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumseagreen'}]} />\n      <View style={[styles.box, {backgroundColor: 'deepskyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumturquoise'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumslateblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'purple'}]} />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    maxHeight: 400,\n  },\n  box: {\n    width: 50,\n    height: 80,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default FlexWrapLayout;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Flex%20Wrap&ext=tsx\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\nconst FlexWrapLayout = () => {\n  const [flexWrap, setFlexWrap] = useState('wrap');\n\n  return (\n    <PreviewLayout\n      label=\"flexWrap\"\n      selectedValue={flexWrap}\n      values={['wrap', 'nowrap']}\n      setSelectedValue={setFlexWrap}>\n      <View style={[styles.box, {backgroundColor: 'orangered'}]} />\n      <View style={[styles.box, {backgroundColor: 'orange'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumseagreen'}]} />\n      <View style={[styles.box, {backgroundColor: 'deepskyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumturquoise'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumslateblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'purple'}]} />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  label: string;\n  values: string[];\n  selectedValue: string;\n  setSelectedValue: (value: string) => void;\n}>;\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}: PreviewLayoutProps) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    maxHeight: 400,\n  },\n  box: {\n    width: 50,\n    height: 80,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default FlexWrapLayout;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "aad93577ac35eaec2dd2365fc8a5443476e8dc3cb69ffdd4056d8105cb7e304d",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "f6aa7c0b",
      "source_content": "## Flex Basis, Grow, and Shrink",
      "source_content_hash": "8acecf6054c35b03920f4b8a6252a3a1e97a03254843bfc79319b34123224b1e",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "60b0dc85",
      "source_content": "- [`flexBasis`](layout-props#flexbasis) is an axis-independent way of providing the default size of an item along the main axis. Setting the `flexBasis` of a child is similar to setting the `width` of that child if its parent is a container with `flexDirection: row` or setting the `height` of a child if its parent is a container with `flexDirection: column`. The `flexBasis` of an item is the default size of that item, the size of the item before any `flexGrow` and `flexShrink` calculations are performed.\n\n- [`flexGrow`](layout-props#flexgrow) describes how much space within a container should be distributed among its children along the main axis. After laying out its children, a container will distribute any remaining space according to the flex grow values specified by its children.\n\n  `flexGrow` accepts any floating point value >= 0, with 0 being the default value. A container will distribute any remaining space among its children weighted by the children’s `flexGrow` values.\n\n- [`flexShrink`](layout-props#flexshrink) describes how to shrink children along the main axis in the case in which the total size of the children overflows the size of the container on the main axis. `flexShrink` is very similar to `flexGrow` and can be thought of in the same way if any overflowing size is considered to be negative remaining space. These two properties also work well together by allowing children to grow and shrink as needed.\n\n  `flexShrink` accepts any floating point value >= 0, with 0 being the default value (on the web, the default is 1). A container will shrink its children weighted by the children’s `flexShrink` values.",
      "source_content_hash": "72a7450dcecce3fa4c817a16091c1961a34ad3a29a784a94e7420301677dc277",
      "node_type": "list",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "5df73577",
      "source_content": "You can learn more [here](https://www.yogalayout.dev/docs/styling/flex-basis-grow-shrink).",
      "source_content_hash": "5458d253bbb99ff108a7c3fe9af852408e3428675a6bb8e21d1c51091f47425b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "35f6c801",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Flex%20Basis%2C%20Grow%2C%20and%20Shrink&ext=js\nimport React, {useState} from 'react';\nimport {View, Text, TextInput, StyleSheet} from 'react-native';\n\nconst App = () => {\n  const [powderblue, setPowderblue] = useState({\n    flexGrow: 0,\n    flexShrink: 1,\n    flexBasis: 'auto',\n  });\n  const [skyblue, setSkyblue] = useState({\n    flexGrow: 1,\n    flexShrink: 0,\n    flexBasis: 100,\n  });\n  const [steelblue, setSteelblue] = useState({\n    flexGrow: 0,\n    flexShrink: 1,\n    flexBasis: 200,\n  });\n  return (\n    <View style={styles.container}>\n      <View\n        style={[\n          styles.container,\n          {\n            flexDirection: 'row',\n            alignContent: 'space-between',\n          },\n        ]}>\n        <BoxInfo color=\"powderblue\" {...powderblue} setStyle={setPowderblue} />\n        <BoxInfo color=\"skyblue\" {...skyblue} setStyle={setSkyblue} />\n        <BoxInfo color=\"steelblue\" {...steelblue} setStyle={setSteelblue} />\n      </View>\n      <View style={styles.previewContainer}>\n        <View\n          style={[\n            styles.box,\n            {\n              flexBasis: powderblue.flexBasis,\n              flexGrow: powderblue.flexGrow,\n              flexShrink: powderblue.flexShrink,\n              backgroundColor: 'powderblue',\n            },\n          ]}\n        />\n        <View\n          style={[\n            styles.box,\n            {\n              flexBasis: skyblue.flexBasis,\n              flexGrow: skyblue.flexGrow,\n              flexShrink: skyblue.flexShrink,\n              backgroundColor: 'skyblue',\n            },\n          ]}\n        />\n        <View\n          style={[\n            styles.box,\n            {\n              flexBasis: steelblue.flexBasis,\n              flexGrow: steelblue.flexGrow,\n              flexShrink: steelblue.flexShrink,\n              backgroundColor: 'steelblue',\n            },\n          ]}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst BoxInfo = ({color, flexBasis, flexShrink, setStyle, flexGrow}) => (\n  <View style={[styles.row, {flexDirection: 'column'}]}>\n    <View\n      style={[\n        styles.boxLabel,\n        {\n          backgroundColor: color,\n        },\n      ]}>\n      <Text\n        style={{\n          color: '#fff',\n          fontWeight: '500',\n          textAlign: 'center',\n        }}>\n        Box\n      </Text>\n    </View>\n    <Text style={styles.label}>flexBasis</Text>\n    <TextInput\n      value={flexBasis}\n      style={styles.input}\n      onChangeText={fB =>\n        setStyle(value => ({\n          ...value,\n          flexBasis: isNaN(parseInt(fB, 10)) ? 'auto' : parseInt(fB, 10),\n        }))\n      }\n    />\n    <Text style={styles.label}>flexShrink</Text>\n    <TextInput\n      value={flexShrink}\n      style={styles.input}\n      onChangeText={fS =>\n        setStyle(value => ({\n          ...value,\n          flexShrink: isNaN(parseInt(fS, 10)) ? undefined : parseInt(fS, 10),\n        }))\n      }\n    />\n    <Text style={styles.label}>flexGrow</Text>\n    <TextInput\n      value={flexGrow}\n      style={styles.input}\n      onChangeText={fG =>\n        setStyle(value => ({\n          ...value,\n          flexGrow: isNaN(parseInt(fG, 10)) ? undefined : parseInt(fG, 10),\n        }))\n      }\n    />\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 10,\n  },\n  box: {\n    flex: 1,\n    height: 50,\n    width: 50,\n  },\n  boxLabel: {\n    minWidth: 80,\n    padding: 8,\n    borderRadius: 4,\n    marginTop: 8,\n  },\n  label: {\n    marginTop: 6,\n    fontSize: 16,\n    fontWeight: '100',\n  },\n  previewContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'aliceblue',\n  },\n  row: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n  input: {\n    borderBottomWidth: 1,\n    paddingVertical: 3,\n    width: 50,\n    textAlign: 'center',\n  },\n});\n\nexport default App;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Flex%20Basis%2C%20Grow%2C%20and%20Shrink&ext=tsx\nimport React, {useState} from 'react';\nimport {View, Text, TextInput, StyleSheet} from 'react-native';\nimport type {ViewStyle} from 'react-native';\n\nconst App = () => {\n  const [powderblue, setPowderblue] = useState<ViewStyle>({\n    flexGrow: 0,\n    flexShrink: 1,\n    flexBasis: 'auto',\n  });\n  const [skyblue, setSkyblue] = useState<ViewStyle>({\n    flexGrow: 1,\n    flexShrink: 0,\n    flexBasis: 100,\n  });\n  const [steelblue, setSteelblue] = useState<ViewStyle>({\n    flexGrow: 0,\n    flexShrink: 1,\n    flexBasis: 200,\n  });\n  return (\n    <View style={styles.container}>\n      <View\n        style={[\n          styles.container,\n          {\n            flexDirection: 'row',\n            alignContent: 'space-between',\n          },\n        ]}>\n        <BoxInfo color=\"powderblue\" {...powderblue} setStyle={setPowderblue} />\n        <BoxInfo color=\"skyblue\" {...skyblue} setStyle={setSkyblue} />\n        <BoxInfo color=\"steelblue\" {...steelblue} setStyle={setSteelblue} />\n      </View>\n      <View style={styles.previewContainer}>\n        <View\n          style={[\n            styles.box,\n            {\n              flexBasis: powderblue.flexBasis,\n              flexGrow: powderblue.flexGrow,\n              flexShrink: powderblue.flexShrink,\n              backgroundColor: 'powderblue',\n            },\n          ]}\n        />\n        <View\n          style={[\n            styles.box,\n            {\n              flexBasis: skyblue.flexBasis,\n              flexGrow: skyblue.flexGrow,\n              flexShrink: skyblue.flexShrink,\n              backgroundColor: 'skyblue',\n            },\n          ]}\n        />\n        <View\n          style={[\n            styles.box,\n            {\n              flexBasis: steelblue.flexBasis,\n              flexGrow: steelblue.flexGrow,\n              flexShrink: steelblue.flexShrink,\n              backgroundColor: 'steelblue',\n            },\n          ]}\n        />\n      </View>\n    </View>\n  );\n};\n\ntype BoxInfoProps = ViewStyle & {\n  color: string;\n  setStyle: React.Dispatch<React.SetStateAction<ViewStyle>>;\n};\n\nconst BoxInfo = ({\n  color,\n  flexBasis,\n  flexShrink,\n  setStyle,\n  flexGrow,\n}: BoxInfoProps) => (\n  <View style={[styles.row, {flexDirection: 'column'}]}>\n    <View\n      style={[\n        styles.boxLabel,\n        {\n          backgroundColor: color,\n        },\n      ]}>\n      <Text\n        style={{\n          color: '#fff',\n          fontWeight: '500',\n          textAlign: 'center',\n        }}>\n        Box\n      </Text>\n    </View>\n    <Text style={styles.label}>flexBasis</Text>\n    <TextInput\n      value={String(flexBasis)}\n      style={styles.input}\n      onChangeText={fB =>\n        setStyle(value => ({\n          ...value,\n          flexBasis: isNaN(parseInt(fB, 10)) ? 'auto' : parseInt(fB, 10),\n        }))\n      }\n    />\n    <Text style={styles.label}>flexShrink</Text>\n    <TextInput\n      value={String(flexShrink)}\n      style={styles.input}\n      onChangeText={fS =>\n        setStyle(value => ({\n          ...value,\n          flexShrink: isNaN(parseInt(fS, 10)) ? undefined : parseInt(fS, 10),\n        }))\n      }\n    />\n    <Text style={styles.label}>flexGrow</Text>\n    <TextInput\n      value={String(flexGrow)}\n      style={styles.input}\n      onChangeText={fG =>\n        setStyle(value => ({\n          ...value,\n          flexGrow: isNaN(parseInt(fG, 10)) ? undefined : parseInt(fG, 10),\n        }))\n      }\n    />\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 10,\n  },\n  box: {\n    flex: 1,\n    height: 50,\n    width: 50,\n  },\n  boxLabel: {\n    minWidth: 80,\n    padding: 8,\n    borderRadius: 4,\n    marginTop: 8,\n  },\n  label: {\n    marginTop: 6,\n    fontSize: 16,\n    fontWeight: '100',\n  },\n  previewContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'aliceblue',\n  },\n  row: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n  input: {\n    borderBottomWidth: 1,\n    paddingVertical: 3,\n    width: 50,\n    textAlign: 'center',\n  },\n});\n\nexport default App;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "5fa9741ab2ac5cc348a9cec5f0db8c690a674066d11860f263a648d23e5dcd3f",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "df7fa11a",
      "source_content": "## Row Gap, Column Gap and Gap",
      "source_content_hash": "278caa0a1f01b45cb1bd72dee78aab008470585e32db3426ac41295f10eaa348",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "00010715",
      "source_content": "- [`rowGap`](layout-props#rowgap) sets the size of the gap (gutter) between an element's rows.\n\n- [`columnGap`](layout-props#columngap) sets the size of the gap (gutter) between an element's columns.\n\n- [`gap`](layout-props#gap) sets the size of the gap (gutter) between rows and columns. It is a shorthand for `rowGap` and `columnGap`.",
      "source_content_hash": "2daf0538f2637a2ed5ced7ddb7535839d8ecce973b3a5553024dcca0ba58db2b",
      "node_type": "list",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "9302d5ed",
      "source_content": "You can use `flexWrap` and `alignContent` along with `gap` to add consistent spacing between items.",
      "source_content_hash": "849494c346f8c42b41a7a2fc6f6c1f4bad58a5d886a981b7ba27a18f44a92e7f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "ed9c828d",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Row%20Gap%20and%20Column%20Gap&ext=js\nimport React, {useState} from 'react';\nimport {View, Text, StyleSheet, TextInput} from 'react-native';\n\nconst RowGapAndColumnGap = () => {\n  const [rowGap, setRowGap] = useState(10);\n  const [columnGap, setColumnGap] = useState(10);\n\n  return (\n    <PreviewLayout\n      columnGap={columnGap}\n      handleColumnGapChange={setColumnGap}\n      rowGap={rowGap}\n      handleRowGapChange={setRowGap}>\n      <View style={[styles.box, styles.box1]} />\n      <View style={[styles.box, styles.box2]} />\n      <View style={[styles.box, styles.box3]} />\n      <View style={[styles.box, styles.box4]} />\n      <View style={[styles.box, styles.box5]} />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  children,\n  handleColumnGapChange,\n  handleRowGapChange,\n  rowGap,\n  columnGap,\n}) => (\n  <View style={styles.previewContainer}>\n    <View style={styles.inputContainer}>\n      <View style={styles.itemsCenter}>\n        <Text>Row Gap</Text>\n        <TextInput\n          style={styles.input}\n          value={rowGap}\n          onChangeText={v => handleRowGapChange(Number(v))}\n        />\n      </View>\n      <View style={styles.itemsCenter}>\n        <Text>Column Gap</Text>\n        <TextInput\n          style={styles.input}\n          value={columnGap}\n          onChangeText={v => handleColumnGapChange(Number(v))}\n        />\n      </View>\n    </View>\n    <View style={[styles.container, {rowGap, columnGap}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  itemsCenter: {alignItems: 'center'},\n  inputContainer: {\n    gap: 4,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  previewContainer: {padding: 10, flex: 1},\n  input: {\n    borderBottomWidth: 1,\n    paddingVertical: 3,\n    width: 50,\n    textAlign: 'center',\n  },\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    maxHeight: 400,\n    flexWrap: 'wrap',\n    alignContent: 'flex-start',\n  },\n  box: {\n    width: 50,\n    height: 80,\n  },\n  box1: {\n    backgroundColor: 'orangered',\n  },\n  box2: {\n    backgroundColor: 'orange',\n  },\n  box3: {\n    backgroundColor: 'mediumseagreen',\n  },\n  box4: {\n    backgroundColor: 'deepskyblue',\n  },\n  box5: {\n    backgroundColor: 'mediumturquoise',\n  },\n});\n\nexport default RowGapAndColumnGap;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Row%20Gap%20and%20Column%20Gap&ext=tsx\nimport React, {useState} from 'react';\nimport {View, Text, StyleSheet, TextInput} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\nconst RowGapAndColumnGap = () => {\n  const [rowGap, setRowGap] = useState(10);\n  const [columnGap, setColumnGap] = useState(10);\n\n  return (\n    <PreviewLayout\n      columnGap={columnGap}\n      handleColumnGapChange={setColumnGap}\n      rowGap={rowGap}\n      handleRowGapChange={setRowGap}>\n      <View style={[styles.box, styles.box1]} />\n      <View style={[styles.box, styles.box2]} />\n      <View style={[styles.box, styles.box3]} />\n      <View style={[styles.box, styles.box4]} />\n      <View style={[styles.box, styles.box5]} />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  columnGap: number;\n  handleColumnGapChange: (gap: number) => void;\n  rowGap: number;\n  handleRowGapChange: (gap: number) => void;\n}>;\n\nconst PreviewLayout = ({\n  children,\n  handleColumnGapChange,\n  handleRowGapChange,\n  rowGap,\n  columnGap,\n}: PreviewLayoutProps) => (\n  <View style={styles.previewContainer}>\n    <View style={styles.inputContainer}>\n      <View style={styles.itemsCenter}>\n        <Text>Row Gap</Text>\n        <TextInput\n          style={styles.input}\n          value={String(rowGap)}\n          onChangeText={v => handleRowGapChange(Number(v))}\n        />\n      </View>\n      <View style={styles.itemsCenter}>\n        <Text>Column Gap</Text>\n        <TextInput\n          style={styles.input}\n          value={String(columnGap)}\n          onChangeText={v => handleColumnGapChange(Number(v))}\n        />\n      </View>\n    </View>\n    <View style={[styles.container, {rowGap, columnGap}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  itemsCenter: {alignItems: 'center'},\n  inputContainer: {\n    gap: 4,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  previewContainer: {padding: 10, flex: 1},\n  input: {\n    borderBottomWidth: 1,\n    paddingVertical: 3,\n    width: 50,\n    textAlign: 'center',\n  },\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    maxHeight: 400,\n    flexWrap: 'wrap',\n    alignContent: 'flex-start',\n  },\n  box: {\n    width: 50,\n    height: 80,\n  },\n  box1: {\n    backgroundColor: 'orangered',\n  },\n  box2: {\n    backgroundColor: 'orange',\n  },\n  box3: {\n    backgroundColor: 'mediumseagreen',\n  },\n  box4: {\n    backgroundColor: 'deepskyblue',\n  },\n  box5: {\n    backgroundColor: 'mediumturquoise',\n  },\n});\n\nexport default RowGapAndColumnGap;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "06a5bd817ba43acfa2d6be77117d1ac3ed23a135065543ea6be8a08fc61ff2e5",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "146b7979",
      "source_content": "## Width and Height",
      "source_content_hash": "9abbaf8e3e1ca33cc2531be5a07ce1f4a30152e6c9ea262cf2c40404c9e93b70",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "a5b0c976",
      "source_content": "The `width` property specifies the width of an element's content area. Similarly, the `height` property specifies the height of an element's content area.",
      "source_content_hash": "ba3f3f1f7e3896523edd822d9c66a32f6fcaec897cb423da503254b958cd0c99",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "6480cf87",
      "source_content": "Both `width` and `height` can take the following values:",
      "source_content_hash": "ff802e94b2a831ade1b2bb0dae051600bbd034ffef6cb6dce953b980cd17c121",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "d47a848d",
      "source_content": "- `auto` (**default value**) React Native calculates the width/height for the element based on its content, whether that is other children, text, or an image.\n\n- `pixels` Defines the width/height in absolute pixels. Depending on other styles set on the component, this may or may not be the final dimension of the node.\n\n- `percentage` Defines the width or height in percentage of its parent's width or height, respectively.",
      "source_content_hash": "f1e38242231f2176e69efed4260cf9f104a0c1ea266388646468516d7e5c17d0",
      "node_type": "list",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "6fce9aad",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Width%20and%20Height&ext=js\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';\n\nconst WidthHeightBasics = () => {\n  const [widthType, setWidthType] = useState('auto');\n  const [heightType, setHeightType] = useState('auto');\n\n  return (\n    <PreviewLayout\n      widthType={widthType}\n      heightType={heightType}\n      widthValues={['auto', 300, '80%']}\n      heightValues={['auto', 200, '60%']}\n      setWidthType={setWidthType}\n      setHeightType={setHeightType}>\n      <View\n        style={{\n          alignSelf: 'flex-start',\n          backgroundColor: 'aliceblue',\n          height: heightType,\n          width: widthType,\n          padding: 15,\n        }}>\n        <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n        <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n        <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n      </View>\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  children,\n  widthType,\n  heightType,\n  widthValues,\n  heightValues,\n  setWidthType,\n  setHeightType,\n}) => (\n  <SafeAreaProvider>\n    <SafeAreaView style={{flex: 1, padding: 10}}>\n      <View style={styles.row}>\n        <Text style={styles.label}>width </Text>\n        {widthValues.map(value => (\n          <TouchableOpacity\n            key={value}\n            onPress={() => setWidthType(value)}\n            style={[styles.button, widthType === value && styles.selected]}>\n            <Text\n              style={[\n                styles.buttonLabel,\n                widthType === value && styles.selectedLabel,\n              ]}>\n              {value}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n      <View style={styles.row}>\n        <Text style={styles.label}>height </Text>\n        {heightValues.map(value => (\n          <TouchableOpacity\n            key={value}\n            onPress={() => setHeightType(value)}\n            style={[styles.button, heightType === value && styles.selected]}>\n            <Text\n              style={[\n                styles.buttonLabel,\n                heightType === value && styles.selectedLabel,\n              ]}>\n              {value}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n      {children}\n    </SafeAreaView>\n  </SafeAreaProvider>\n);\n\nconst styles = StyleSheet.create({\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    padding: 8,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginRight: 10,\n    marginBottom: 10,\n  },\n  selected: {\n    backgroundColor: 'coral',\n    shadowOpacity: 0,\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default WidthHeightBasics;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Width%20and%20Height&ext=tsx\nimport React, {useState, PropsWithChildren} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';\n\ntype Dimension = 'auto' | `${number}%` | number;\n\nconst WidthHeightBasics = () => {\n  const [widthType, setWidthType] = useState<Dimension>('auto');\n  const [heightType, setHeightType] = useState<Dimension>('auto');\n\n  return (\n    <PreviewLayout\n      widthType={widthType}\n      heightType={heightType}\n      widthValues={['auto', 300, '80%']}\n      heightValues={['auto', 200, '60%']}\n      setWidthType={setWidthType}\n      setHeightType={setHeightType}>\n      <View\n        style={{\n          alignSelf: 'flex-start',\n          backgroundColor: 'aliceblue',\n          height: heightType,\n          width: widthType,\n          padding: 15,\n        }}>\n        <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n        <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n        <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n      </View>\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  widthType: Dimension;\n  heightType: Dimension;\n  widthValues: Dimension[];\n  heightValues: Dimension[];\n  setWidthType: (value: Dimension) => void;\n  setHeightType: (value: Dimension) => void;\n}>;\n\nconst PreviewLayout = ({\n  children,\n  widthType,\n  heightType,\n  widthValues,\n  heightValues,\n  setWidthType,\n  setHeightType,\n}: PreviewLayoutProps) => (\n  <SafeAreaProvider>\n    <SafeAreaView style={{flex: 1, padding: 10}}>\n      <View style={styles.row}>\n        <Text style={styles.label}>width </Text>\n        {widthValues.map(value => (\n          <TouchableOpacity\n            key={value}\n            onPress={() => setWidthType(value)}\n            style={[styles.button, widthType === value && styles.selected]}>\n            <Text\n              style={[\n                styles.buttonLabel,\n                widthType === value && styles.selectedLabel,\n              ]}>\n              {value}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n      <View style={styles.row}>\n        <Text style={styles.label}>height </Text>\n        {heightValues.map(value => (\n          <TouchableOpacity\n            key={value}\n            onPress={() => setHeightType(value)}\n            style={[styles.button, heightType === value && styles.selected]}>\n            <Text\n              style={[\n                styles.buttonLabel,\n                heightType === value && styles.selectedLabel,\n              ]}>\n              {value}\n            </Text>\n          </TouchableOpacity>\n        ))}\n      </View>\n      {children}\n    </SafeAreaView>\n  </SafeAreaProvider>\n);\n\nconst styles = StyleSheet.create({\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    padding: 8,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginRight: 10,\n    marginBottom: 10,\n  },\n  selected: {\n    backgroundColor: 'coral',\n    shadowOpacity: 0,\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default WidthHeightBasics;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "8b53ed32ffd3fa7f379daed7318dd1421fe47c179a4e759b74f2862775d4b843",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "9e8d1b4a",
      "source_content": "## Position",
      "source_content_hash": "a1e6cac43200f15e387782b5322acf39016271321669d3cc6eed5658158ea8a6",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "aa23d0fe",
      "source_content": "The `position` type of an element defines how it is positioned relative to either itself, its parent, or its [containing block](./flexbox.md#the-containing-block).",
      "source_content_hash": "e5712cbbb04357b6b6faa6c4e57276d66c9c0a72c210412482fd489cccb5381e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "d89d2ae4",
      "source_content": "- `relative` (**default value**) By default, an element is positioned relatively. This means an element is positioned according to the normal flow of the layout, and then offset relative to that position based on the values of `top`, `right`, `bottom`, and `left`. The offset does not affect the position of any sibling or parent elements.\n\n- `absolute` When positioned absolutely, an element doesn't take part in the normal layout flow. It is instead laid out independent of its siblings. The position is determined based on the `top`, `right`, `bottom`, and `left` values. These values will position the element relative to its containing block.\n\n- `static` When positioned statically, an element is positioned according to the normal flow of layout, and will ignore the `top`, `right`, `bottom`, and `left` values. This `position` will also cause the element to not form a containing block for absolute descendants, unless some other superceding style prop is present (e.g. `transform`). This allows `absolute` elements to be positioned to something that is not their parent. Note that **`static` is only available on the New Architecture**.",
      "source_content_hash": "9a4e2ddd9c74c989e7c4ac5a246c3aef6d181b25852c328022fdd6fef22a0dd6",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `relative`（**預設值**）預設情況下，元素採用相對定位。這表示元素會依照正常的佈局流排列，然後根據 `top`、`right`、`bottom` 和 `left` 的值進行相對偏移。此偏移不會影響其他兄弟元素或父元素的位置。\n\n- `absolute` 當元素採用絕對定位時，它不會參與正常的佈局流，而是獨立於其兄弟元素進行排列。其位置由 `top`、`right`、`bottom` 和 `left` 的值決定，這些值會將元素定位到其「包含區塊」（containing block）的相對位置。\n\n- `static` 當元素採用靜態定位時，它會依照正常的佈局流排列，並忽略 `top`、`right`、`bottom` 和 `left` 的值。此 `position` 設定還會導致元素無法成為其絕對定位子元素的包含區塊，除非有其他優先的樣式屬性存在（例如 `transform`）。這允許絕對定位元素可以定位到非其父元素的區塊。注意：**`static` 僅在新架構（New Architecture）中可用**。"
      }
    },
    {
      "segment_id": "811b4953",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Position&ext=js\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\n\nconst PositionLayout = () => {\n  const [position, setPosition] = useState('relative');\n\n  return (\n    <PreviewLayout\n      label=\"position\"\n      selectedValue={position}\n      values={['relative', 'absolute', 'static']}\n      setSelectedValue={setPosition}>\n      <View\n        style={[\n          styles.box,\n          {\n            top: 25,\n            left: 25,\n            position,\n            backgroundColor: 'powderblue',\n          },\n        ]}\n      />\n      <View\n        style={[\n          styles.box,\n          {\n            top: 50,\n            left: 50,\n            position,\n            backgroundColor: 'skyblue',\n          },\n        ]}\n      />\n      <View\n        style={[\n          styles.box,\n          {\n            top: 75,\n            left: 75,\n            position,\n            backgroundColor: 'steelblue',\n          },\n        ]}\n      />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={styles.container}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    minHeight: 200,\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default PositionLayout;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Position&ext=tsx\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\nconst PositionLayout = () => {\n  const [position, setPosition] = useState<'relative' | 'absolute' | 'static'>(\n    'relative',\n  );\n\n  return (\n    <PreviewLayout\n      label=\"position\"\n      selectedValue={position}\n      values={['relative', 'absolute', 'static']}\n      setSelectedValue={setPosition}>\n      <View\n        style={[\n          styles.box,\n          {\n            top: 25,\n            left: 25,\n            position,\n            backgroundColor: 'powderblue',\n          },\n        ]}\n      />\n      <View\n        style={[\n          styles.box,\n          {\n            top: 50,\n            left: 50,\n            position,\n            backgroundColor: 'skyblue',\n          },\n        ]}\n      />\n      <View\n        style={[\n          styles.box,\n          {\n            top: 75,\n            left: 75,\n            position,\n            backgroundColor: 'steelblue',\n          },\n        ]}\n      />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  label: string;\n  values: Array<'relative' | 'absolute' | 'static'>;\n  selectedValue: string;\n  setSelectedValue: (value: 'relative' | 'absolute' | 'static') => void;\n}>;\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}: PreviewLayoutProps) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={styles.container}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    minHeight: 200,\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default PositionLayout;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "76d56956fd20f234744647f13dd0bfdd2eb58b094f80db4029f1f6e7f2f8dcf4",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_811b4953"
      }
    },
    {
      "segment_id": "582d1fb9",
      "source_content": "## The Containing Block",
      "source_content_hash": "537bf3aa95590534f78e4f84c624b6828b3d019839782503cfcce37dcb63a135",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 包含區塊（Containing Block）"
      }
    },
    {
      "segment_id": "e925b79d",
      "source_content": "The containing block of an element is an ancestor element which controls its position and size.\nThe way containing blocks work in React Native is very similar to [how they work on the web](https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block), with some simplifications due to the lack of some web features.",
      "source_content_hash": "6417e9bbe821fc22e97332dfaf7d5dea5e09ef4a3aa79c3492efc8b7201c04eb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "元素的包含區塊是指控制其位置和大小的祖先元素。React Native 中「包含區塊」的運作方式與 [網頁上的機制](https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block) 非常相似，但由於缺少某些網頁特性而有所簡化。"
      }
    },
    {
      "segment_id": "c9a77a69",
      "source_content": "The `top`, `right`, `bottom`, and `left` values of an absolutely positioned element will be\nrelative to its containing block.",
      "source_content_hash": "16c0d66c9bfa3c3569ea9501fe4d4411fb9d9166172ed5eaedd0db8449117b91",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "絕對定位元素的 `top`、`right`、`bottom` 和 `left` 值會相對於其包含區塊計算。"
      }
    },
    {
      "segment_id": "a77e6c15",
      "source_content": "Percentage lengths (e.g.: `width: '50%'` or `padding: '10%'`) applied to absolutely positioned elements will be calculated relatively to the size of its containing block. For example, if the containing block is 100 points wide, then `width: 50%` on an absolutely positioned element will cause it to be 50 points wide.",
      "source_content_hash": "3957bdea2a736d46525cb27834ffb679bba9deff53636a11845ba0c8b927ca05",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "套用於絕對定位元素的百分比長度（例如 `width: '50%'` 或 `padding: '10%'`）會根據其包含區塊的大小計算。例如，若包含區塊的寬度為 100 點，則絕對定位元素的 `width: 50%` 會使其寬度為 50 點。"
      }
    },
    {
      "segment_id": "46f5966f",
      "source_content": "The following list will help you determine the containing block of any given element:",
      "source_content_hash": "219bb7cf0a3fde50b2f6a4b852fb6a5993e76e28803154dd41e7e3df4a89a2b6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "以下列表可幫助你判斷任何元素的包含區塊："
      }
    },
    {
      "segment_id": "262a4178",
      "source_content": "- If that element has a `position` type of `relative` or `static`, then its containing block is its parent.\n- If that element has a `position` type of `absolute`, then its containing block is the nearest ancestor in which one of the following is true:\n  - It has a `position` type other than `static`\n  - It has a `transform`",
      "source_content_hash": "32d976469a690f0dd7d5928052aab742cd5b0454556b64a58024aac1e2703fb1",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 若該元素的 `position` 類型為 `relative` 或 `static`，則其包含區塊為其父元素。\n- 若該元素的 `position` 類型為 `absolute`，則其包含區塊為最近的符合以下任一條件的祖先元素：\n  - 其 `position` 類型不為 `static`\n  - 其設有 `transform` 屬性"
      }
    },
    {
      "segment_id": "93136c17",
      "source_content": "## Going Deeper",
      "source_content_hash": "114681f45611e2d3608fc0c48990004df4456990bae7f0ce627ab9741a4a558d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 深入探索"
      }
    },
    {
      "segment_id": "ee9a362b",
      "source_content": "Check out the interactive [yoga playground](https://www.yogalayout.dev/playground) that you can use to get a better understanding of flexbox.",
      "source_content_hash": "c92df8d94f281ed6ad390e09dfc198b600d3ce2cb382d1620783cb4cfedb6dbb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以透過互動式的 [yoga playground](https://www.yogalayout.dev/playground) 進一步理解 flexbox 的運作方式。"
      }
    },
    {
      "segment_id": "1abf38d3",
      "source_content": "We've covered the basics, but there are many other styles you may need for layouts. The full list of props that control layout is documented [here](./layout-props.md).",
      "source_content_hash": "9c446e259e14cdebf77556ea06f4254694806509d2666f62d74a6cf73654b294",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們已涵蓋基礎知識，但你可能還需要其他樣式來完成佈局。完整的佈局控制屬性列表可參考 [此文件](./layout-props.md)。"
      }
    },
    {
      "segment_id": "f70a3ff9",
      "source_content": "Additionally, you can see some examples from [Wix Engineers](https://medium.com/wix-engineering/the-full-react-native-layout-cheat-sheet-a4147802405c).",
      "source_content_hash": "87f1ff7db5ecd3e2ca95e25e1cf669e041fb86634a28fe14ec7b800023f25612",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此外，你也可以查看 [Wix 工程師](https://medium.com/wix-engineering/the-full-react-native-layout-cheat-sheet-a4147802405c) 提供的範例。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.78/flexbox.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.659621+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "ac63a52a2cd107bf2556c62a9a54f8b3e04a72ce1f4eb2f7dcece8a4392d5459"
  }
}