{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.77/other-debugging-methods.md",
  "source_file_content_hash": "29bdcdad1d7d3b888b0ee477790722147e21722d6d383bb1a6b9b38920a5a7b0",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: other-debugging-methods\ntitle: Other Debugging Methods\n---",
      "source_content_hash": "a20d31d008f5e4b4a56ce9a3dbeff26747cd2399c3c4e8bd5df1d76d1157c46e",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4d1292be"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "This page covers how to use legacy JavaScript debugging methods. If you are getting started with a new React Native or Expo app, we recommend using [React Native DevTools](./react-native-devtools).",
      "source_content_hash": "02b97db60094bc805228e4c8535841b1fd1431157c673b764e93fa66c1517d89",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "本頁面涵蓋如何使用傳統的 JavaScript 除錯方法。如果您正在開始一個新的 React Native 或 Expo 應用程式，我們建議使用 [React Native DevTools](./react-native-devtools)。"
      }
    },
    {
      "segment_id": "1cc03ec8",
      "source_content": "## Safari Developer Tools (direct JSC debugging)",
      "source_content_hash": "f0a34babea72a16df7da9554cbfd7af5a1f4905eafed660c19d98f06475e9b9f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## Safari 開發者工具（直接 JSC 除錯）"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "You can use Safari to debug the iOS version of your app when using [JavaScriptCore](https://trac.webkit.org/wiki/JavaScriptCore) (JSC) as your app's runtime.",
      "source_content_hash": "97cb289664eace29676511bc27343136583ebbe997b79bbfb8a8265486e0b074",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當使用 [JavaScriptCore](https://trac.webkit.org/wiki/JavaScriptCore) (JSC) 作為應用程式的運行環境時，您可以使用 Safari 來除錯 iOS 版本的應用程式。"
      }
    },
    {
      "segment_id": "9e760345",
      "source_content": "1. **Physical devices only**: Open the Settings app, and navigate to Safari > Advanced, and make sure \"Web Inspector\" is turned on.\n2. On your Mac, open Safari and enable the Develop menu. This can be found under Safari > Settings..., then the Advanced tab, then selecting \"Show features for web developers\".\n3. Find your device under the Develop menu, and select the \"JSContext\" item from the submenu. This will open Safari's Web Inspector, which includes Console and Sources panels similar to Chrome DevTools.",
      "source_content_hash": "90fe67afe2c2f8484ed0f002269a27cab90557164553191520579769f9bf27bb",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "1. **僅限實體裝置**：打開設定應用程式，導航至 Safari > 進階，並確保「網頁檢查器」已開啟。\n2. 在您的 Mac 上，打開 Safari 並啟用「開發」選單。這可以在 Safari > 設定... 中找到，然後選擇「進階」標籤，再勾選「顯示網頁開發者功能」。\n3. 在「開發」選單中找到您的裝置，並從子選單中選擇「JSContext」項目。這將打開 Safari 的網頁檢查器，其中包含與 Chrome DevTools 類似的「主控台」和「來源」面板。"
      }
    },
    {
      "segment_id": "39b3772c",
      "source_content": "![Opening Safari Web Inspector](/docs/assets/debugging-safari-developer-tools.jpg)",
      "source_content_hash": "a02ca99622dc977adae4042269406ea28185941ab816f311f8313372d02904f0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![開啟 Safari 網頁檢查器](/docs/assets/debugging-safari-developer-tools.jpg)"
      }
    },
    {
      "segment_id": "80e6256a",
      "source_content": ":::tip\nWhile source maps may not be enabled by default, you can follow [this guide](https://blog.nparashuram.com/2019/10/debugging-react-native-ios-apps-with.html) or [video](https://www.youtube.com/watch?v=GrGqIIz51k4) to enable them and set break points at the right places in the source code.\n:::",
      "source_content_hash": "bf9e2652be0c0ac58f721d16e0f66924f641a3b7f2203384d70fde5e9ff7f337",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::tip\n雖然原始碼對應可能預設未啟用，但您可以參考[此指南](https://blog.nparashuram.com/2019/10/debugging-react-native-ios-apps-with.html)或[影片](https://www.youtube.com/watch?v=GrGqIIz51k4)來啟用它們，並在原始碼的正確位置設定中斷點。\n:::"
      }
    },
    {
      "segment_id": "6604338b",
      "source_content": ":::tip\nEvery time the app is reloaded, a new JSContext is created. Choosing \"Automatically Show Web Inspectors for JSContexts\" saves you from having to select the latest JSContext manually.\n:::",
      "source_content_hash": "b492a6557c091d2514bdbdd7800794812e06e93c01afcc07287a6c932b8794ee",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::tip\n每次應用程式重新載入時，都會建立一個新的 JSContext。選擇「自動顯示 JSContext 的網頁檢查器」可以避免您手動選擇最新的 JSContext。\n:::"
      }
    },
    {
      "segment_id": "3c36424c",
      "source_content": "## Remote JavaScript Debugging (deprecated)",
      "source_content_hash": "94cb3658f3ab3035b52f09691377c598470af3b1302beed68adbd4b7e77d4f1a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 遠端 JavaScript 除錯（已棄用）"
      }
    },
    {
      "segment_id": "f79f5ed0",
      "source_content": ":::warning\nRemote JavaScript Debugging is deprecated in React Native 0.73 and will be removed in a future release.\n:::",
      "source_content_hash": "34ac38269e9db6b41b62b7875a3e887d1970dbe36fc0db36e93e372cea0fc4a5",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::warning\n遠端 JavaScript 除錯在 React Native 0.73 中已被棄用，並將在未來的版本中移除。\n:::"
      }
    },
    {
      "segment_id": "7499a4e7",
      "source_content": "Remote JavaScript Debugging connects an external web browser (Chrome) to your app and runs your JavaScript code inside a web page. This allows you to use Chrome's debugger as you would with any web app. Note that the browser environment can be very different, and not all React Native modules will work when debugging this way.",
      "source_content_hash": "998b5192fe3087dcc76cd69a8838600bef60c4930e8704686a543a07f6a13abe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "遠端 JavaScript 除錯將外部網頁瀏覽器（Chrome）連接到您的應用程式，並在網頁中執行您的 JavaScript 程式碼。這讓您可以像除錯任何網頁應用程式一樣使用 Chrome 的除錯工具。請注意，瀏覽器環境可能非常不同，且並非所有 React Native 模組在這種除錯方式下都能正常運作。"
      }
    },
    {
      "segment_id": "109ace10",
      "source_content": "### Setup",
      "source_content_hash": "8896b8d3db53502f4fd604d42db230e8aa1df8a01474b979920665ef08680a11",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 設定"
      }
    },
    {
      "segment_id": "135468ee",
      "source_content": "Since React Native 0.73, Remote JavaScript Debugging must be **manually enabled** using the `NativeDevSettings` module.",
      "source_content_hash": "8f84d35fec601324ef6438470425b79c6396b90f1c7a172865f7822beaa60090",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "自 React Native 0.73 起，遠端 JavaScript 除錯必須使用 `NativeDevSettings` 模組**手動啟用**。"
      }
    },
    {
      "segment_id": "a11df754",
      "source_content": "```js\nimport NativeDevSettings from 'react-native/Libraries/NativeModules/specs/NativeDevSettings';\n\nfunction MyApp() {\n  // Assign this to a dev-only button or useEffect call\n  const connectToRemoteDebugger = () => {\n    NativeDevSettings.setIsDebuggingRemotely(true);\n  };\n}\n```",
      "source_content_hash": "325dd74e23cb6c1bb95a798c641d68d209c9f4c78588320da641c874c034b70a",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_a11df754"
      }
    },
    {
      "segment_id": "c504c207",
      "source_content": "When `NativeDevSettings.setIsDebuggingRemotely(true)` is invoked, this will open a new tab at [http://localhost:8081/debugger-ui](http://localhost:8081/debugger-ui).",
      "source_content_hash": "b192ffc4df877576638b328e291e0e34f99a74a6d7fd1812de1aeef1e1c8f1b6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當調用 `NativeDevSettings.setIsDebuggingRemotely(true)` 時，這將在 [http://localhost:8081/debugger-ui](http://localhost:8081/debugger-ui) 開啟一個新分頁。"
      }
    },
    {
      "segment_id": "98d26038",
      "source_content": "From this page, open Chrome DevTools via:",
      "source_content_hash": "c7f638622ffc5cae703ae3dc4077df819cba1a25e760af656f05b7a696f3c4d1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "從此頁面，可以透過以下方式開啟 Chrome DevTools："
      }
    },
    {
      "segment_id": "c94a9c0e",
      "source_content": "- View > Developer > Developer Tools\n- <kbd>⌥ Option</kbd> + <kbd>Cmd ⌘</kbd> + <kbd>I</kbd> (macOS) / <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>I</kbd> (Windows and Linux).",
      "source_content_hash": "7bf63e11da02bc46cdf91d9acdaa13769bcc11f4127550b4c6235cc15a218523",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 檢視 > 開發人員 > 開發人員工具\n- <kbd>⌥ Option</kbd> + <kbd>Cmd ⌘</kbd> + <kbd>I</kbd> (macOS) / <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>I</kbd> (Windows 和 Linux)。"
      }
    },
    {
      "segment_id": "e536ea0d",
      "source_content": "The Console and Sources panels will allow you to inspect your React Native code.",
      "source_content_hash": "5e67266f39715917d89250451bb05e1c7288548ac01c7a6a183af2d1f1fe3d4d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "「主控台」和「來源」面板將允許您檢查 React Native 程式碼。"
      }
    },
    {
      "segment_id": "40158b4b",
      "source_content": "![The remote debugger window in Chrome](/docs/assets/debugging-chrome-remote-debugger.jpg)",
      "source_content_hash": "bc03acf9676e80afb6f0b05a484a15b7884156e92a8e12847e6e6eba83be71b5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![Chrome 中的遠端除錯器視窗](/docs/assets/debugging-chrome-remote-debugger.jpg)"
      }
    },
    {
      "segment_id": "974ac4b5",
      "source_content": ":::info\nUnder Remote JavaScript Debugging, the web version of React DevTools in Chrome will not work with React Native. See the [React Native DevTools](./react-native-devtools) guide to explore how to use React DevTools in our integrated debugger.\n:::",
      "source_content_hash": "ba68814516c67845bf9aa770777a3de35a94a8af1a0caa0fe86b10431908274c",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::info\n在遠端 JavaScript 除錯模式下，Chrome 中的網頁版 React DevTools 無法與 React Native 一起使用。請參閱 [React Native DevTools](./react-native-devtools) 指南，了解如何在我們的整合除錯器中使用 React DevTools。\n:::"
      }
    },
    {
      "segment_id": "e0724a69",
      "source_content": ":::note\nOn Android, if the times between the debugger and device have drifted, things such as animations and event behavior might not work properly. This can be fixed by running ``adb shell \"date `date +%m%d%H%M%Y.%S%3N`\"``. Root access is required if using a physical device.\n:::",
      "source_content_hash": "17cf300c2b63a2813cb12df6e0efa1de726d63e4cde7696b420cbb5f28b12eeb",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "ee8401db",
      "source_content": "### Debugging on a physical device",
      "source_content_hash": "a92d8a1590a0b4cb943b6f8d43d6c50d420b0684a54e60677dca9a0f8dd13ba2",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 在實體裝置上除錯"
      }
    },
    {
      "segment_id": "c1d6a7ca",
      "source_content": ":::info\nIf you're using Expo CLI, this is configured for you already.\n:::",
      "source_content_hash": "88055ae607eb641393a03d1afa9b0fbc944a15edd47a1cee8c7648d589043add",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::info\n若您使用 Expo CLI，此設定已預先配置完成。\n:::"
      }
    },
    {
      "segment_id": "091b48eb",
      "source_content": "<Tabs groupId=\"platform\" defaultValue={constants.defaultPlatform} values={constants.platforms} className=\"pill-tabs\">\n<TabItem value=\"ios\">\n\nOn iOS devices, open the file [`RCTWebSocketExecutor.mm`](https://github.com/facebook/react-native/blob/master/packages/react-native/React/CoreModules/RCTWebSocketExecutor.mm) and change \"localhost\" to the IP address of your computer.\n\n</TabItem>\n<TabItem value=\"android\">\n\nOn Android 5.0+ devices connected via USB, you can use the [`adb` command line tool](http://developer.android.com/tools/help/adb.html) to set up port forwarding from the device to your computer:\n\n```sh\nadb reverse tcp:8081 tcp:8081\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "7527261564367e8f5d8da7b2b79e8ddf99945411db4cfed55802ce06afac0c49",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_091b48eb"
      }
    },
    {
      "segment_id": "e2e299c8",
      "source_content": ":::note\nIf you run into any issues, it may be possible that one of your Chrome extensions is interacting in unexpected ways with the debugger. Try disabling all of your extensions and re-enabling them one-by-one until you find the problematic extension.\n:::",
      "source_content_hash": "749f3b23a61746e8165f3308ba70db80894149aed6bf51a5189ba50a6cc7b69e",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::note\n若遇到問題，可能是某個 Chrome 擴充功能與偵錯工具發生非預期交互作用。請嘗試停用所有擴充功能後逐一重新啟用，直到找出造成問題的擴充元件。\n:::"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.77/other-debugging-methods.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.645305+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "29bdcdad1d7d3b888b0ee477790722147e21722d6d383bb1a6b9b38920a5a7b0"
  }
}