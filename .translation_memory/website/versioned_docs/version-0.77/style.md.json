{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.77/style.md",
  "source_file_content_hash": "f8553a26f91d15662bd55acc3c0f568475db1d3a7cb45889c89147f89f74419b",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: style\ntitle: Style\n---",
      "source_content_hash": "e69692e5cfe5b5f38cef1ef8bde3cf17fe4ed3e9cd4faf2ac13cc646adcb9614",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "With React Native, you style your application using JavaScript. All of the core components accept a prop named `style`. The style names and [values](colors.md) usually match how CSS works on the web, except names are written using camel casing, e.g. `backgroundColor` rather than `background-color`.",
      "source_content_hash": "0975957051971a79aff3bde9659fb1c27ccbdfac07a103bd53683812b00744f2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在 React Native 中，您使用 JavaScript 來為應用程式設定樣式。所有核心元件都接受名為 `style` 的屬性。樣式名稱和[值](colors.md)通常與網頁上的 CSS 運作方式相符，但名稱使用駝峰式命名，例如 `backgroundColor` 而非 `background-color`。"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "The `style` prop can be a plain old JavaScript object. That's what we usually use for example code. You can also pass an array of styles - the last style in the array has precedence, so you can use this to inherit styles.",
      "source_content_hash": "5edcec4e3c459733a7c400e7f2b3a87419e249166292186b7c182f23af5026c0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`style` 屬性可以是一個普通的 JavaScript 物件。這是我們在範例代碼中通常使用的。您也可以傳遞一個樣式陣列——陣列中的最後一個樣式具有優先權，因此您可以使用此方式來繼承樣式。"
      }
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "As a component grows in complexity, it is often cleaner to use `StyleSheet.create` to define several styles in one place. Here's an example:",
      "source_content_hash": "2646c7d8abaa335cd095a94e6268449233e712ece48f18fd0b9a1deafb38800f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "隨著元件複雜度的增加，通常更清晰的做法是使用 `StyleSheet.create` 在一個地方定義多個樣式。以下是一個範例："
      }
    },
    {
      "segment_id": "ee201347",
      "source_content": "```SnackPlayer name=Style\nimport React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst LotsOfStyles = () => {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.red}>just red</Text>\n      <Text style={styles.bigBlue}>just bigBlue</Text>\n      <Text style={[styles.bigBlue, styles.red]}>bigBlue, then red</Text>\n      <Text style={[styles.red, styles.bigBlue]}>red, then bigBlue</Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 50,\n  },\n  bigBlue: {\n    color: 'blue',\n    fontWeight: 'bold',\n    fontSize: 30,\n  },\n  red: {\n    color: 'red',\n  },\n});\n\nexport default LotsOfStyles;\n```",
      "source_content_hash": "67018a5914bf5dd8f60de3da1c2b3e8ef08c77c6db9fa3ac44e78ae6f6edaf18",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_ee201347"
      }
    },
    {
      "segment_id": "95e9ba12",
      "source_content": "One common pattern is to make your component accept a `style` prop which in turn is used to style subcomponents. You can use this to make styles \"cascade\" the way they do in CSS.",
      "source_content_hash": "1744c27ae53df464a61cda083c11579be4d4c79a5e2e8babcc0958ffeb6c70f2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "一個常見的模式是讓您的元件接受一個 `style` 屬性，該屬性又用於為子元件設定樣式。您可以使用此方式來實現樣式的「層疊」效果，就像在 CSS 中一樣。"
      }
    },
    {
      "segment_id": "8af76f3d",
      "source_content": "There are a lot more ways to customize the text style. Check out the [Text component reference](text.md) for a complete list.",
      "source_content_hash": "9552f0279a0c6074a6c3cad33596d62d0b4e3557f4774d110e0c389a8b18dcbf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "還有更多方法可以自訂文字樣式。請查看[文字元件參考](text.md)以獲取完整列表。"
      }
    },
    {
      "segment_id": "a9d49f92",
      "source_content": "Now you can make your text beautiful. The next step in becoming a style expert is to [learn how to control component size](height-and-width.md).",
      "source_content_hash": "9f5998c2dc206fd30235302658c26d8b10ac9bd7f10f7715fa8367cc9e0088f1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在您可以讓您的文字變得美觀。成為樣式專家的下一步是[學習如何控制元件大小](height-and-width.md)。"
      }
    },
    {
      "segment_id": "6d28a77c",
      "source_content": "## Known issues",
      "source_content_hash": "4cecb6da2e40cc04ae6e30cf3f1e7cbd0703e50078cb7c162c0ca14c29be5058",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 已知問題"
      }
    },
    {
      "segment_id": "b4ef1e56",
      "source_content": "- [react-native#29308](https://github.com/facebook/react-native/issues/29308#issuecomment-792864162): In some cases React Native does not match how CSS works on the web, for example the touch area never extends past the parent view bounds and on Android negative margin is not supported.",
      "source_content_hash": "e2b7dda9237196ddcbbb784caeb384367c45e9bf85f1c4224b2c391cea21200c",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- [react-native#29308](https://github.com/facebook/react-native/issues/29308#issuecomment-792864162)：在某些情況下，React Native 與網頁上的 CSS 運作方式不符，例如觸控區域永遠不會超出父視圖的邊界，且在 Android 上不支援負邊距。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.77/style.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.635429+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "f8553a26f91d15662bd55acc3c0f568475db1d3a7cb45889c89147f89f74419b"
  }
}