{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.77/optimizing-flatlist-configuration.md",
  "source_file_content_hash": "540e689d9044867ec5e7d59bddc69ce66d9d9e270266064075c763fee90cd3a7",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: optimizing-flatlist-configuration\ntitle: Optimizing Flatlist Configuration\n---",
      "source_content_hash": "6d14d08eb4d27b1ea9a9566b1d801cf782e413ab6e4dfc3f1d0fdb32918a0e5e",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "b3de8742",
      "source_content": "## Terms",
      "source_content_hash": "17be6000a3b19d122dbabb642871fd68803ea7415f70eddee285d02c6b421582",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 術語"
      }
    },
    {
      "segment_id": "df80d009",
      "source_content": "- **VirtualizedList:** The component behind `FlatList` (React Native's implementation of the [`Virtual List`](https://bvaughn.github.io/react-virtualized/#/components/List) concept.)\n\n- **Memory consumption:** How much information about your list is being stored in memory, which could lead to an app crash.\n\n- **Responsiveness:** Application ability to respond to interactions. Low responsiveness, for instance, is when you touch on a component and it waits a bit to respond, instead of responding immediately as expected.\n\n- **Blank areas:** When `VirtualizedList` can't render your items fast enough, you may enter a part of your list with non-rendered components that appear as blank space.\n\n- **Viewport:** The visible area of content that is rendered to pixels.\n\n- **Window:** The area in which items should be mounted, which is generally much larger than the viewport.",
      "source_content_hash": "9839c1edc77817c09c26de9bc1d858cb5b305afc72f1887d1b51352fc95a851e",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- **VirtualizedList:** `FlatList` 的底層組件（React Native 對 [`虛擬列表`](https://bvaughn.github.io/react-virtualized/#/components/List) 概念的實現。）\n\n- **記憶體消耗:** 列表相關資訊佔用的記憶體量，過高可能導致應用程式崩潰。\n\n- **響應性:** 應用程式對互動的反應能力。例如低響應性表現為觸控元件後延遲回應，而非預期的立即反應。\n\n- **空白區域:** 當 `VirtualizedList` 無法快速渲染項目時，列表會出現未渲染元件形成的空白區塊。\n\n- **視窗區域 (Viewport):** 實際渲染為像素的可見內容區域。\n\n- **渲染窗口 (Window):** 應掛載項目的區域範圍，通常遠大於視窗區域。"
      }
    },
    {
      "segment_id": "bc633244",
      "source_content": "## Props",
      "source_content_hash": "5b94a6cc928a22f2ff71078f7462cd97dbe259a0c4d1877ab3afc2a92dded915",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 屬性"
      }
    },
    {
      "segment_id": "2df4f75f",
      "source_content": "Here are a list of props that can help to improve `FlatList` performance:",
      "source_content_hash": "7ca251ae0511b663bd71a361f5e506f3873f14a97ea4f07f0b0771efaaa510f4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "以下是有助提升 `FlatList` 效能的屬性列表："
      }
    },
    {
      "segment_id": "95b38f97",
      "source_content": "### removeClippedSubviews",
      "source_content_hash": "99591e1f89a0ab48cd5c9abfa9775e674a1138f1b5722b16dc89a1805eb00664",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### removeClippedSubviews"
      }
    },
    {
      "segment_id": "9e1bd9df",
      "source_content": "| Type    | Default |\n| ------- | ------- |\n| Boolean | False   |",
      "source_content_hash": "6fd5982330597b0e8b55f82341d49e68b2462a838504c9df73a89e9a22af8b53",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_9e1bd9df"
      }
    },
    {
      "segment_id": "26524352",
      "source_content": "If `true`, views that are outside of the viewport are detached from the native view hierarchy.",
      "source_content_hash": "71ee54435058b0ecf9d956df46fa8498cab9b0740a9f68e68950d5e19f780c64",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "設為 `true` 時，視窗區域外的視圖會從原生視圖層級中分離。"
      }
    },
    {
      "segment_id": "73ab96a3",
      "source_content": "**Pros:** This reduces time spent on the main thread, and thus reduces the risk of dropped frames, by excluding views outside of the viewport from the native rendering and drawing traversals.",
      "source_content_hash": "8a3ffac185c868fed1702b8b4c366c58726ab30cea6cd5391a1d226757695d53",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**優點:** 透過排除視窗區域外的視圖，減少主執行緒處理時間，從而降低掉幀風險。"
      }
    },
    {
      "segment_id": "7499a4e7",
      "source_content": "**Cons:** Be aware that this implementation can have bugs, such as missing content (mainly observed on iOS), especially if you are doing complex things with transforms and/or absolute positioning. Also note this does not save significant memory because the views are not deallocated, only detached.",
      "source_content_hash": "73b03bc5e5dfe1f720e85774aa91b027603b8eca0d5540278c11384c13a30869",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**缺點:** 此實作可能存在錯誤（尤其在 iOS 上），特別是當使用複雜變換或絕對定位時，可能導致內容缺失。請注意這不會顯著節省記憶體，因為視圖僅被分離而非釋放。"
      }
    },
    {
      "segment_id": "109ace10",
      "source_content": "### maxToRenderPerBatch",
      "source_content_hash": "c368e811e0ee129de47aa75e97c55f3deece0368be9d434df6e2efff1db9462b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### maxToRenderPerBatch"
      }
    },
    {
      "segment_id": "c75fd5e6",
      "source_content": "| Type   | Default |\n| ------ | ------- |\n| Number | 10      |",
      "source_content_hash": "853d9823e28c1d4da0bcc133498c05936f0d8798cce7f3a9b9f353be3fd052cb",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_c75fd5e6"
      }
    },
    {
      "segment_id": "50746522",
      "source_content": "It is a `VirtualizedList` prop that can be passed through `FlatList`. This controls the amount of items rendered per batch, which is the next chunk of items rendered on every scroll.",
      "source_content_hash": "46c0d27cc1b56b650dda708a46a2124134c158909c9c4714d574f0175f28b98b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此為可透過 `FlatList` 傳遞的 `VirtualizedList` 屬性，控制每批次渲染的項目數量（每次滾動時渲染的下一個項目區塊）。"
      }
    },
    {
      "segment_id": "95e9ba12",
      "source_content": "**Pros:** Setting a bigger number means less visual blank areas when scrolling (increases the fill rate).",
      "source_content_hash": "03b6a1870f56e7e110e07f4578e36e2a9aabb794e0aa0b6b7a01708c917a0b8b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**優點:** 設定較大數值可減少滾動時的視覺空白區域（提升填充率）。"
      }
    },
    {
      "segment_id": "8af76f3d",
      "source_content": "**Cons:** More items per batch means longer periods of JavaScript execution potentially blocking other event processing, like presses, hurting responsiveness.",
      "source_content_hash": "6fc6286091da7b5eb9fa804c39c6c15889e4d08a39095085c1916a33c91161f7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**缺點:** 每批次處理更多項目會導致 JavaScript 執行時間延長，可能阻塞點擊等事件處理，影響響應性。"
      }
    },
    {
      "segment_id": "c674e260",
      "source_content": "### updateCellsBatchingPeriod",
      "source_content_hash": "e34ecd57ef3b7a45c094b5cc98d58883eaf893f059e48772fa0d019889b9f6b8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### updateCellsBatchingPeriod"
      }
    },
    {
      "segment_id": "8b0f8d70",
      "source_content": "| Type   | Default |\n| ------ | ------- |\n| Number | 50      |",
      "source_content_hash": "49beef7f0ecdf49cbf974d83fe2832ea93b1c5f85e97adb272c9b995f2d7be61",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_8b0f8d70"
      }
    },
    {
      "segment_id": "b36c6338",
      "source_content": "While `maxToRenderPerBatch` tells the amount of items rendered per batch, setting `updateCellsBatchingPeriod` tells your `VirtualizedList` the delay in milliseconds between batch renders (how frequently your component will be rendering the windowed items).",
      "source_content_hash": "1d7a8d7522ae4a45dc2e325fa03b343def4f0183aef85a3516c0dbceaf9720f1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`maxToRenderPerBatch` 控制每批次渲染數量，而 `updateCellsBatchingPeriod` 則設定批次渲染間的毫秒延遲（控制窗口化項目的渲染頻率）。"
      }
    },
    {
      "segment_id": "b9aaa519",
      "source_content": "**Pros:** Combining this prop with `maxToRenderPerBatch` gives you the power to, for example, render more items in a less frequent batch, or less items in a more frequent batch.",
      "source_content_hash": "affff4a3f8c78692daa00c1d1f7671b88dc9cb173e3575242aac5f88866e8b4a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**優點:** 結合此屬性與 `maxToRenderPerBatch` 可靈活調配，例如實現「少量高頻批次」或「大量低頻批次」渲染。"
      }
    },
    {
      "segment_id": "e536ea0d",
      "source_content": "**Cons:** Less frequent batches may cause blank areas, More frequent batches may cause responsiveness issues.",
      "source_content_hash": "15f94a94f3795b191e9a302d20d160b3a0559f3c77549fa0473852b63bb19390",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**缺點:** 低頻批次可能導致空白區域，高頻批次可能引發響應性問題。"
      }
    },
    {
      "segment_id": "ab5fc5b5",
      "source_content": "### initialNumToRender",
      "source_content_hash": "54210fdf1ef70d18ff45f703a614282906c65b7a124919a1634c1091b6d64eee",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### initialNumToRender"
      }
    },
    {
      "segment_id": "82ac713a",
      "source_content": "| Type   | Default |\n| ------ | ------- |\n| Number | 10      |",
      "source_content_hash": "853d9823e28c1d4da0bcc133498c05936f0d8798cce7f3a9b9f353be3fd052cb",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_82ac713a"
      }
    },
    {
      "segment_id": "531437ca",
      "source_content": "The initial amount of items to render.",
      "source_content_hash": "77f3114e5cc05a84b03186d01eceffff27f6fb5d8801a21e59b5c023760f7faf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "初始渲染的項目數量。"
      }
    },
    {
      "segment_id": "06e24cc0",
      "source_content": "**Pros:** Define precise number of items that would cover the screen for every device. This can be a big performance boost for the initial render.",
      "source_content_hash": "21b02676402ac4ce33b4652630f7a56b0c00420d0bcfaaaa45ce11b24c03391f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**優點:** 精確定義覆蓋各裝置螢幕的項目數，可大幅提升初始渲染效能。"
      }
    },
    {
      "segment_id": "7f71ff2a",
      "source_content": "**Cons:** Setting a low `initialNumToRender` may cause blank areas, especially if it's too small to cover the viewport on initial render.",
      "source_content_hash": "d45f6f883bed4c4711dead21623cbe272d8bd190c3198c9d4db56a11f0377480",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**缺點:** 設定過低的 `initialNumToRender` 可能導致空白區域，尤其在初始渲染時無法覆蓋視窗區域的情況下。"
      }
    },
    {
      "segment_id": "047c2395",
      "source_content": "### windowSize",
      "source_content_hash": "7a70f899e5765b2af5f1e96abd4867dfb2c141fe8be2020fed7dc29195c5e777",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### windowSize"
      }
    },
    {
      "segment_id": "0f41bcbd",
      "source_content": "| Type   | Default |\n| ------ | ------- |\n| Number | 21      |",
      "source_content_hash": "b61e72130171381d9939235eb40713734602df7e97bb522de78c2cb7dc989b67",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_0f41bcbd"
      }
    },
    {
      "segment_id": "d0dd855b",
      "source_content": "The number passed here is a measurement unit where 1 is equivalent to your viewport height. The default value is 21 (10 viewports above, 10 below, and one in between).",
      "source_content_hash": "d29a12fd3881c26fbd5d1c3869f2cca199cc66d91d36736789f9511d10c724fe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此數值以視窗高度為單位（1 = 1倍視窗高度），預設值為 21（上方 10 倍、下方 10 倍及中間 1 倍區域）。"
      }
    },
    {
      "segment_id": "7736989b",
      "source_content": "**Pros:** Bigger `windowSize` will result in less chance of seeing blank space while scrolling. On the other hand, smaller `windowSize` will result in fewer items mounted simultaneously, saving memory.",
      "source_content_hash": "58178df970fe6a5bad4df9e3045d2f822ce0dd944a5616a817d870c3aef3b919",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**優點:** 較大的 `windowSize` 可降低滾動時出現空白的機率；較小的 `windowSize` 則能減少同時掛載的項目數以節省記憶體。"
      }
    },
    {
      "segment_id": "6270d577",
      "source_content": "**Cons:** For a bigger `windowSize`, you will have more memory consumption. For a lower `windowSize`, you will have a bigger chance of seeing blank areas.",
      "source_content_hash": "0985d054118ada881b6d8c444fb29a05b7bc3f76088a3611c90eb9b3268b7266",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**缺點:** 較大的 `windowSize` 會增加記憶體消耗，較小的 `windowSize` 則提高出現空白區域的可能性。"
      }
    },
    {
      "segment_id": "a4bf4268",
      "source_content": "## List items",
      "source_content_hash": "8514dfacbc5c022ed6c3059bb9a5cce1ff2deb9147b414a973c9f65a6e0dc3b1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 列表項目"
      }
    },
    {
      "segment_id": "ec619944",
      "source_content": "Below are some tips about list item components. They are the core of your list, so they need to be fast.",
      "source_content_hash": "82fb1e7f1c4a33dfc152c56c2c524a56d348f0eab7fd5ad17280b6c8a749c32b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "以下是一些關於列表項元件的技巧。它們是列表的核心，因此需要保持高效。"
      }
    },
    {
      "segment_id": "2e771fd0",
      "source_content": "### Use basic components",
      "source_content_hash": "17faf01e55017ffd12769a53293e27f9db01b9e955a7e22ae5862fd2fe189bef",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 使用基礎元件"
      }
    },
    {
      "segment_id": "0750bfa1",
      "source_content": "The more complex your components are, the slower they will render. Try to avoid a lot of logic and nesting in your list items. If you are reusing this list item component a lot in your app, create a component only for your big lists and make them with as little logic and nesting as possible.",
      "source_content_hash": "5c39052ecdd4cd2ae7dd15fc1c5f85c340325c09f4f00bb3d1dd4485a4d11d07",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "元件越複雜，渲染速度越慢。盡量避免在列表項中加入過多邏輯和嵌套結構。如果在應用中頻繁重用該列表項元件，可以專門為大型列表創建一個元件，並盡可能減少邏輯和嵌套層次。"
      }
    },
    {
      "segment_id": "bd30d33e",
      "source_content": "### Use light components",
      "source_content_hash": "f1b099380338f5094faf8d4f8ee570b9f80fedc042d9fa69a9c971aa88e196b4",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 使用輕量級元件"
      }
    },
    {
      "segment_id": "6b77b644",
      "source_content": "The heavier your components are, the slower they render. Avoid heavy images (use a cropped version or thumbnail for list items, as small as possible). Talk to your design team, use as little effects and interactions and information as possible in your list. Show them in your item's detail.",
      "source_content_hash": "dcd5ab1cb2d63f5a20a1d7430329ac141dcaf8d01c45c5e9d0f96db7cdef157f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "元件越重，渲染速度越慢。避免使用過大的圖片（在列表項中使用裁剪版或縮略圖，盡可能小）。與設計團隊溝通，在列表中盡量減少效果、互動和資訊的展示，將這些內容放在項目的詳細頁面中。"
      }
    },
    {
      "segment_id": "5baf88e2",
      "source_content": "### Use `memo()`",
      "source_content_hash": "5e8e79a17a40762f91493ac88193992e262033af880fac8bc21b11c240e1d629",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 使用 `memo()`"
      }
    },
    {
      "segment_id": "eb51d107",
      "source_content": "`React.memo()` creates a memoized component that will be re-rendered only when the props passed to the component change. We can use this function to optimize the components in the FlatList.",
      "source_content_hash": "cc678ccedebce28ec735efe2b04752144362434342d92acc885fe126bccf8dc1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`React.memo()` 會創建一個記憶化的元件，只有在傳遞給元件的 props 發生變化時才會重新渲染。我們可以使用這個函數來優化 FlatList 中的元件。"
      }
    },
    {
      "segment_id": "dc73c0d2",
      "source_content": "```tsx\nimport React, {memo} from 'react';\nimport {View, Text} from 'react-native';\n\nconst MyListItem = memo(\n  ({title}: {title: string}) => (\n    <View>\n      <Text>{title}</Text>\n    </View>\n  ),\n  (prevProps, nextProps) => {\n    return prevProps.title === nextProps.title;\n  },\n);\n\nexport default MyListItem;\n```",
      "source_content_hash": "2952f444f16e1a1b6556294fcbc2a740579e44546a98170c3cd4d4cc56ee78a6",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_dc73c0d2"
      }
    },
    {
      "segment_id": "44aaa880",
      "source_content": "In this example, we have determined that MyListItem should be re-rendered only when the title changes. We passed the comparison function as the second argument to React.memo() so that the component is re-rendered only when the specified prop is changed. If the comparison function returns true, the component will not be re-rendered.",
      "source_content_hash": "e02f1ecd9241f878379d09b75064af29aa0e66ef4ad83707b44dbc79eacb35c8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在這個例子中，我們確定 MyListItem 只有在 title 改變時才需要重新渲染。我們將比較函數作為第二個參數傳遞給 React.memo()，這樣元件只有在指定的 prop 改變時才會重新渲染。如果比較函數返回 true，元件將不會重新渲染。"
      }
    },
    {
      "segment_id": "638efb88",
      "source_content": "### Use cached optimized images",
      "source_content_hash": "e26aaa94891a6f1427580ba4448a8d7265e59001f091013549558eaff96ef2b8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 使用緩存的優化圖片"
      }
    },
    {
      "segment_id": "558df877",
      "source_content": "You can use the community packages (such as [react-native-fast-image](https://github.com/DylanVann/react-native-fast-image) from [@DylanVann](https://github.com/DylanVann)) for more performant images. Every image in your list is a `new Image()` instance. The faster it reaches the `loaded` hook, the faster your JavaScript thread will be free again.",
      "source_content_hash": "e923dda36c651ef45cf75113b4ff91c82b4016d59d345982e03154e465116cb0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "可以使用社區套件（例如 [@DylanVann](https://github.com/DylanVann) 的 [react-native-fast-image](https://github.com/DylanVann/react-native-fast-image)）來獲得更高效的圖片。列表中的每個圖片都是一個 `new Image()` 實例。圖片越快達到 `loaded` 鉤子，JavaScript 線程就能越快釋放。"
      }
    },
    {
      "segment_id": "64d57278",
      "source_content": "### Use getItemLayout",
      "source_content_hash": "66823ade2ff9547c8a45ba656fcf4a0230cadcaae7b1251b96de5c7cc4ed3a0a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 使用 getItemLayout"
      }
    },
    {
      "segment_id": "5f82a1e9",
      "source_content": "If all your list item components have the same height (or width, for a horizontal list), providing the [getItemLayout](flatlist#getitemlayout) prop removes the need for your `FlatList` to manage async layout calculations. This is a very desirable optimization technique.",
      "source_content_hash": "1f9c7f30890607c864ebf1dc1a8eea641860d5885c28eb48b366708cc5c51c76",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果所有列表項元件的高度相同（或水平列表的寬度相同），提供 [getItemLayout](flatlist#getitemlayout) prop 可以讓 `FlatList` 無需管理異步佈局計算。這是一個非常理想的優化技術。"
      }
    },
    {
      "segment_id": "6fc234cf",
      "source_content": "If your components have dynamic size and you really need performance, consider asking your design team if they may think of a redesign in order to perform better.",
      "source_content_hash": "f181ab62c179a1b0e43e7f1e3d51828f17c73a903d1920c4a79d09ae10039d18",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果元件大小動態變化且確實需要性能提升，可以考慮請設計團隊重新設計以提升性能。"
      }
    },
    {
      "segment_id": "4dd6a631",
      "source_content": "### Use keyExtractor or key",
      "source_content_hash": "5614f5cf4aa37b3410478345bab82e34ec0778b8259eca5a85ee6078539532ca",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 使用 keyExtractor 或 key"
      }
    },
    {
      "segment_id": "f45239ba",
      "source_content": "You can set the [`keyExtractor`](flatlist#keyextractor) to your `FlatList` component. This prop is used for caching and as the React `key` to track item re-ordering.",
      "source_content_hash": "2899c2fe94280f0c4a8cd0c47e6470692e603e202d5d77ab72d7dfd78bad767b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "可以為 `FlatList` 元件設置 [`keyExtractor`](flatlist#keyextractor)。這個 prop 用於緩存和作為 React 的 `key` 來追蹤項目的重新排序。"
      }
    },
    {
      "segment_id": "692c6053",
      "source_content": "You can also use a `key` prop in your item component.",
      "source_content_hash": "48b586af53b6cf368270aeb5b3e924fc9dd5cb476979dba8d6e999112b0ae1a6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "也可以在項目元件中使用 `key` prop。"
      }
    },
    {
      "segment_id": "c83259bb",
      "source_content": "### Avoid anonymous function on renderItem",
      "source_content_hash": "fdad6baf85078125f8dbdf90b3d44a3d3272203bced8ab6783e57a81a027c783",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 避免在 renderItem 中使用匿名函數"
      }
    },
    {
      "segment_id": "14bc6b75",
      "source_content": "For functional components, move the `renderItem` function outside of the returned JSX. Also, ensure that it is wrapped in a `useCallback` hook to prevent it from being recreated each render.",
      "source_content_hash": "9161f9ece830732aaa187a9574618e48d033bc99026ab972c8222965884f9497",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "對於函數式元件，將 `renderItem` 函數移到返回的 JSX 之外。同時，確保它被 `useCallback` 鉤子包裹，以防止每次渲染時重新創建。"
      }
    },
    {
      "segment_id": "e478ec2c",
      "source_content": "For class components, move the `renderItem` function outside of the render function, so it won't recreate itself each time the render function is called.",
      "source_content_hash": "6fe8e85835b811d123fc906169d7778f5c93e956a5f9b37a32894c5a050b326a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "對於類元件，將 `renderItem` 函數移到 render 函數之外，這樣它就不會在每次調用 render 函數時重新創建。"
      }
    },
    {
      "segment_id": "e908327f",
      "source_content": "```tsx\nconst renderItem = useCallback(({item}) => (\n   <View key={item.key}>\n      <Text>{item.title}</Text>\n   </View>\n ), []);\n\nreturn (\n  // ...\n\n  <FlatList data={items} renderItem={renderItem} />;\n  // ...\n);\n```",
      "source_content_hash": "b76545cdda78cb21c38195a1951799311c1a13824ab6e9c0c86802ff51846ef4",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_e908327f"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.77/optimizing-flatlist-configuration.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.632065+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "540e689d9044867ec5e7d59bddc69ce66d9d9e270266064075c763fee90cd3a7"
  }
}