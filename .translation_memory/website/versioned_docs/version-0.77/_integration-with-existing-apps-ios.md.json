{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.77/_integration-with-existing-apps-ios.md",
  "source_file_content_hash": "3133fe0bd40b430308abb7d757a0f66972c1a738f47218f978b719b09175b08d",
  "segments": [
    {
      "segment_id": "a9b642df",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_a9b642df"
      }
    },
    {
      "segment_id": "adbc947a",
      "source_content": "## Key Concepts",
      "source_content_hash": "dfa7c52d142437bb74c4b7713c923cc1f67dda7d1ce85a63282198e6bf1e47b8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 核心概念"
      }
    },
    {
      "segment_id": "e7ec8f99",
      "source_content": "The keys to integrating React Native components into your iOS application are to:",
      "source_content_hash": "f710f71fd03f4d21f7f880954c1d9404919bca1340ea5a22a19d3b0740229482",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "將 React Native 元件整合至 iOS 應用的關鍵在於："
      }
    },
    {
      "segment_id": "57e757df",
      "source_content": "1. Set up the correct directory structure.\n2. Install the necessary NPM dependencies.\n3. Adding React Native to your Podfile configuration.\n4. Writing the TypeScript code for your first React Native screen.\n5. Integrate React Native with your iOS code using a `RCTRootView`.\n6. Testing your integration by running the bundler and seeing your app in action.",
      "source_content_hash": "6f3235d454a34843abbda48318f67f8560b147ae55996ab0c03c0d97c7ff9bbe",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "1. 建立正確的目錄結構\n2. 安裝必要的 NPM 相依套件\n3. 在 Podfile 配置中添加 React Native\n4. 為首個 React Native 畫面編寫 TypeScript 程式碼\n5. 使用 `RCTRootView` 將 React Native 與 iOS 程式碼整合\n6. 透過執行打包工具並查看應用運作來測試整合結果"
      }
    },
    {
      "segment_id": "70153c6e",
      "source_content": "## Using the Community Template",
      "source_content_hash": "ab8eaa18ccb6715ba9ff00b85866645e08b28266df4d92f4814b2b6c3bea07ba",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 使用社群範本"
      }
    },
    {
      "segment_id": "86b54d44",
      "source_content": "While you follow this guide, we suggest you to use the [React Native Community Template](https://github.com/react-native-community/template/) as reference. The template contains a **minimal iOS app** and will help you understanding how to integrate React Native into an existing iOS app.",
      "source_content_hash": "bcc2181b82e47a76aa5dcdd0a576dd35412f9fd2c6172c6015d9e90b699b1d6d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "遵循本指南時，建議您參考 [React Native 社群範本](https://github.com/react-native-community/template/)。該範本包含一個**精簡版 iOS 應用**，能協助您理解如何將 React Native 整合至現有 iOS 應用。"
      }
    },
    {
      "segment_id": "d350c018",
      "source_content": "## Prerequisites",
      "source_content_hash": "bbd3d4949a6f237efd8d4ff5c7c5f30d968e7a989ad12f3d7dcef69c98053912",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 必要條件"
      }
    },
    {
      "segment_id": "1acb9a05",
      "source_content": "Follow the guide on [setting up your development environment](set-up-your-environment) and using [React Native without a framework](getting-started-without-a-framework) to configure your development environment for building React Native apps for iOS.\nThis guide also assumes you're familiar with the basics of iOS development such as creating a `UIViewController` and editing the `Podfile` file.",
      "source_content_hash": "b3b82042efa15f47755b83c1741947f6082495ade4feacdfc6a1dc69e61c8aad",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "請先完成[開發環境設定指南](set-up-your-environment)並參閱[無框架使用 React Native](getting-started-without-a-framework)來配置 iOS 版 React Native 應用的開發環境。\n本指南同時假設您已具備 iOS 開發基礎知識，例如建立 `UIViewController` 和編輯 `Podfile` 檔案。"
      }
    },
    {
      "segment_id": "40f9552a",
      "source_content": "### 1. Set up directory structure",
      "source_content_hash": "608eaf807b2dd9f81ca43051d95d088da7edcc2a1ca245bc360838dcfda12ec5",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 1. 建立目錄結構"
      }
    },
    {
      "segment_id": "f2c2bdd0",
      "source_content": "To ensure a smooth experience, create a new folder for your integrated React Native project, then **move your existing iOS project** to the `/ios` subfolder.",
      "source_content_hash": "89c6b491a393adbaddf8952acc559c48d192ec97fbb0582873bbf25ff7613760",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "為確保流程順暢，請先為整合專案建立新資料夾，然後**將現有 iOS 專案**移至 `/ios` 子資料夾。"
      }
    },
    {
      "segment_id": "fa430ad4",
      "source_content": "## 2. Install NPM dependencies",
      "source_content_hash": "4f391db6000e3924acbd95b80b111923206938a3a43a75b6deb1e7e2f6735e7b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 2. 安裝 NPM 相依套件"
      }
    },
    {
      "segment_id": "4b1d2d7d",
      "source_content": "Go to the root directory and run the following command:",
      "source_content_hash": "1cf1452ac5c3121b9a29a1ff8d3d7e84b86e6d072e3f01b262dc5bb8282e2265",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "進入根目錄執行以下指令："
      }
    },
    {
      "segment_id": "cb57d798",
      "source_content": "```shell\ncurl -O https://raw.githubusercontent.com/react-native-community/template/refs/heads/0.77-stable/template/package.json\n```",
      "source_content_hash": "b76680a973226f749133c65cab8dfe5452f24735cdcb275d9ad27e055bff1e88",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_cb57d798"
      }
    },
    {
      "segment_id": "bdc231b1",
      "source_content": "This will copy the `package.json` [file from the Community template](https://github.com/react-native-community/template/blob/0.77-stable/template/package.json) to your project.",
      "source_content_hash": "a0acb2d18eff4c811b6e0066eb483a826292cd26e41049f034a78f1c9f0b9410",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此指令會將[社群範本中的 package.json](https://github.com/react-native-community/template/blob/0.77-stable/template/package.json)複製到您的專案。"
      }
    },
    {
      "segment_id": "97ae4a01",
      "source_content": "Next, install the NPM packages by running:",
      "source_content_hash": "bd506fe0a61ad42684a771d9c9848a3b3eebbe5e21312430376e99a8e0c3b006",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "接著執行以下指令安裝 NPM 套件："
      }
    },
    {
      "segment_id": "100eac36",
      "source_content": "<Tabs groupId=\"package-manager\" queryString defaultValue={constants.defaultPackageManager} values={constants.packageManagers}>\n<TabItem value=\"npm\">\n\n```shell\nnpm install\n```\n\n</TabItem>\n<TabItem value=\"yarn\">\n\n```shell\nyarn install\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "59e841b63b6bfb68ac05adc61cb933d7e73e79d6be61c783375f2961c5d78bb7",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_100eac36"
      }
    },
    {
      "segment_id": "b9aaa519",
      "source_content": "Installation process has created a new `node_modules` folder. This folder stores all the JavaScript dependencies required to build your project.",
      "source_content_hash": "faa7f50a015bcca5cb81396bc8015669c49c160fc0c0f690fdd72344d0d3692c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "安裝程序會建立新的 `node_modules` 資料夾，此資料夾儲存專案建置所需的所有 JavaScript 相依套件。"
      }
    },
    {
      "segment_id": "e536ea0d",
      "source_content": "Add `node_modules/` to your `.gitignore` file (here the [Community default one](https://github.com/react-native-community/template/blob/0.77-stable/template/_gitignore)).",
      "source_content_hash": "7348e95006a64256ec0c95ec53546978d5f5d92d1c245cfed5095ddb4ab39262",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "請將 `node_modules/` 加入您的 `.gitignore` 檔案（可參考[社群預設範本](https://github.com/react-native-community/template/blob/0.77-stable/template/_gitignore)）。"
      }
    },
    {
      "segment_id": "ab5fc5b5",
      "source_content": "### 3. Install Development tools",
      "source_content_hash": "01aa9a34df690caba56bb1905567388a365dad5f6a0a3d50fd387872714f897f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 3. 安裝開發工具"
      }
    },
    {
      "segment_id": "c431704b",
      "source_content": "### Command Line Tools for Xcode",
      "source_content_hash": "9e992d35b198c9fb3ac07a95ff8712e4d0a7bc76f99f8d5ea50f4094fbae714e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### Xcode 命令列工具"
      }
    },
    {
      "segment_id": "79ad944d",
      "source_content": "Install the Command Line Tools. Choose **Settings... (or Preferences...)** in the Xcode menu. Go to the Locations panel and install the tools by selecting the most recent version in the Command Line Tools dropdown.",
      "source_content_hash": "482a6be244d41430a0ef6decf2b8c129dbd24655114501e3b336d496b281b17f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "安裝命令列工具。在 Xcode 選單中選擇 **Settings... (或 Preferences...)**，進入 Locations 面板後，從 Command Line Tools 下拉選單選擇最新版本進行安裝。"
      }
    },
    {
      "segment_id": "531437ca",
      "source_content": "![Xcode Command Line Tools](/docs/assets/GettingStartedXcodeCommandLineTools.png)",
      "source_content_hash": "788b2f7f494fc9118f26914cd3b6a6e12fdad2c885474356f820d4aa1540f40d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![Xcode 命令列工具](/docs/assets/GettingStartedXcodeCommandLineTools.png)"
      }
    },
    {
      "segment_id": "bd92edfc",
      "source_content": "### CocoaPods",
      "source_content_hash": "e13c9a6760bae8ccfcc945d47e6d9f5f7e7f70bba6f0cb7ee2dafd7d549fb11a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### CocoaPods"
      }
    },
    {
      "segment_id": "7f71ff2a",
      "source_content": "[CocoaPods](https://cocoapods.org) is a package management tool for iOS and macOS development. We use it to add the actual React Native framework code locally into your current project.",
      "source_content_hash": "8350da71199c3008f4c6f1c980aec91579806cd644b20cc30c37eaf6ccdac5df",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[CocoaPods](https://cocoapods.org) 是 iOS 和 macOS 開發的套件管理工具，我們用它將 React Native 框架程式碼本地化加入現有專案。"
      }
    },
    {
      "segment_id": "147e8550",
      "source_content": "We recommend installing CocoaPods using [Homebrew](https://brew.sh/):",
      "source_content_hash": "d708a460f162b196843452d39cb9d7691385b6833dc3e4cc332e50428e848135",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "建議透過 [Homebrew](https://brew.sh/) 安裝 CocoaPods："
      }
    },
    {
      "segment_id": "af983f82",
      "source_content": "```shell\nbrew install cocoapods\n```",
      "source_content_hash": "60f33506f688f7ba1b581227fff89f1735aecb2e511a937d33a70a315e7ab7c9",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_af983f82"
      }
    },
    {
      "segment_id": "98355e36",
      "source_content": "## 4. Adding React Native to your app",
      "source_content_hash": "9af10abaa46901310f90343a2df199c415f8d576710ab6ff862311889d564362",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 4. 將 React Native 加入應用"
      }
    },
    {
      "segment_id": "2fd0be2a",
      "source_content": "### Configuring CocoaPods",
      "source_content_hash": "7564f818ffff59aff740eecabbde683db5f26a90989c6f567c0ba115d2e5c515",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 配置 CocoaPods"
      }
    },
    {
      "segment_id": "6270d577",
      "source_content": "To configure CocoaPods, we need two files:",
      "source_content_hash": "f170a39aa1b1758ecde3789fbf39b9489d54fa544c4f18f4ac76faf973ddd25f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "配置 CocoaPods 需要兩個檔案："
      }
    },
    {
      "segment_id": "c142abbb",
      "source_content": "- A **Gemfile** that defines which Ruby dependencies we need.\n- A **Podfile** that defines how to properly install our dependencies.",
      "source_content_hash": "65872f622278fd8e37e00fd2fa5b63053ad98473de7a3f878718c45abd3a9a49",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- **Gemfile**：定義所需的 Ruby 相依套件\n- **Podfile**：定義相依套件的正確安裝方式"
      }
    },
    {
      "segment_id": "8126f763",
      "source_content": "For the **Gemfile**, go to the root directory of your project and run this command",
      "source_content_hash": "344a0b486c49170a0298bf2f0a1ef487be637fae782403e60eec4a3a89298277",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "建立 **Gemfile** 請在專案根目錄執行："
      }
    },
    {
      "segment_id": "f6563256",
      "source_content": "```sh\ncurl -O https://raw.githubusercontent.com/react-native-community/template/refs/heads/0.77-stable/template/Gemfile\n```",
      "source_content_hash": "d47c4c2be488538b22e16619517f17956619490c712983371f0a9d0684329385",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_f6563256"
      }
    },
    {
      "segment_id": "51867d16",
      "source_content": "This will download the Gemfile from the template.\nSimilarly, for the **Podfile**, go to the `ios` folder of your project and run",
      "source_content_hash": "4883fbc0e6cf539dca20920f5a03efdb7150ca4a7714dca9c2a37df32492ee60",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此指令會從範本下載 Gemfile。\n同理，建立 **Podfile** 請進入專案的 `ios` 資料夾執行："
      }
    },
    {
      "segment_id": "19913a56",
      "source_content": "```sh\ncurl -O https://raw.githubusercontent.com/react-native-community/template/refs/heads/0.77-stable/template/ios/Podfile\n```",
      "source_content_hash": "eb91f12448363c6e532003fcc8b2b5ffa9c9e82c0745ea6bfc889876e4d5cb25",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_19913a56"
      }
    },
    {
      "segment_id": "1862c5fe",
      "source_content": "Please use the Community Template as a reference point for the [Gemfile](https://github.com/react-native-community/template/blob/0.77-stable/template/Gemfile) and for the [Podfile](https://github.com/react-native-community/template/blob/0.77-stable/template/ios/Podfile).",
      "source_content_hash": "d906a41d308e0c96711044f788da843e95653f87cbf401ea938b609de00c9ea2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "請使用社群範本作為 [Gemfile](https://github.com/react-native-community/template/blob/0.77-stable/template/Gemfile) 和 [Podfile](https://github.com/react-native-community/template/blob/0.77-stable/template/ios/Podfile) 的參考基準。"
      }
    },
    {
      "segment_id": "5064856a",
      "source_content": ":::note\nRemember to change [this line](https://github.com/react-native-community/template/blob/0.77-stable/template/ios/Podfile#L17) and [this line](https://github.com/react-native-community/template/blob/0.77-stable/template/ios/Podfile#L26) of the Podfile to match the name of your app.\n\nIf your app don't have tests, remember to remove [this block](https://github.com/react-native-community/template/blob/0.77-stable/template/ios/Podfile#L26-L29).\n:::",
      "source_content_hash": "bf8583286e14033aba00b8b50ccf9b95cfee871e1ae9f0ea9f584e38e9717d4d",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::note\n請記得修改 Podfile 中的[這一行](https://github.com/react-native-community/template/blob/0.77-stable/template/ios/Podfile#L17)和[這一行](https://github.com/react-native-community/template/blob/0.77-stable/template/ios/Podfile#L26)，使其符合您的應用程式名稱。\n\n若您的應用程式沒有測試項目，請記得刪除[此區塊](https://github.com/react-native-community/template/blob/0.77-stable/template/ios/Podfile#L26-L29)。\n:::"
      }
    },
    {
      "segment_id": "f0984c2a",
      "source_content": "Now, we need to run a couple of extra commands to install the Ruby gems and the Pods.\nNavigate to the `ios` folder and run the following commands:",
      "source_content_hash": "3ea7ed2ea1a3b32fcac36556e135a6510337e9842dd22a354780568a4b287552",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在我們需要執行幾個額外指令來安裝 Ruby gems 和 Pods。\n請導航至 `ios` 資料夾並執行以下指令："
      }
    },
    {
      "segment_id": "59534425",
      "source_content": "```sh\nbundle install\nbundle exec pod install\n```",
      "source_content_hash": "79a44a979f564a7c4de40bfbd5bd374e776b720440a711132708bd9f89229a63",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_59534425"
      }
    },
    {
      "segment_id": "d21af28f",
      "source_content": "The first command will install the Ruby dependencies and the second command will actually integrate the React Native code in your application so that your iOS files can import the React Native headers.",
      "source_content_hash": "c81990cf81b07cd93f014ad6175a100c7e91bda64742212766058d5e4c18bea8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "第一個指令會安裝 Ruby 相依套件，第二個指令則會實際將 React Native 程式碼整合至您的應用程式，讓 iOS 檔案能夠導入 React Native 標頭檔。"
      }
    },
    {
      "segment_id": "f8614e13",
      "source_content": "## 5. Writing the TypeScript Code",
      "source_content_hash": "fb983e2e9e93a3cfa8ee9ad840bbd467f2159e18b667d3e506d4aed573571e0b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 5. 撰寫 TypeScript 程式碼"
      }
    },
    {
      "segment_id": "396efb28",
      "source_content": "Now we will actually modify the native iOS application to integrate React Native.",
      "source_content_hash": "a75b10c9751c84dc635f8f630af45cdd4f775d54001d7a58e5755d7c85eb743c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在我們將實際修改原生 iOS 應用程式來整合 React Native。"
      }
    },
    {
      "segment_id": "558df877",
      "source_content": "The first bit of code we will write is the actual React Native code for the new screen that will be integrated into our application.",
      "source_content_hash": "2726f221c9676b02e0bee7533c06f4941661b7ab5fb03484bdbef2ff9541ede7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們要撰寫的第一段程式碼，是針對將整合至應用程式的新畫面所編寫的 React Native 程式碼。"
      }
    },
    {
      "segment_id": "64d57278",
      "source_content": "### Create a `index.js` file",
      "source_content_hash": "62765e740ffd778da69c5d9c3482a1a7bbce145c1d5310abaf8a47c096dc557f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 建立 `index.js` 檔案"
      }
    },
    {
      "segment_id": "5f82a1e9",
      "source_content": "First, create an empty `index.js` file in the root of your React Native project.",
      "source_content_hash": "222b302ac1b091af71896a3a39045a87eef629b8f8bcc827cc344dfed4e22814",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "首先，在 React Native 專案的根目錄建立一個空的 `index.js` 檔案。"
      }
    },
    {
      "segment_id": "6fc234cf",
      "source_content": "`index.js` is the starting point for React Native applications, and it is always required. It can be a small file that `import`s other file that are part of your React Native component or application, or it can contain all the code that is needed for it.",
      "source_content_hash": "58b1dddbb303c79fa09c97a576f201435ea18b78fd1e0cb6857945240e10d2a7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`index.js` 是 React Native 應用程式的進入點，且為必要檔案。它可以是一個僅用來 `import` 其他 React Native 元件或應用程式檔案的小檔案，也可以包含所需的所有程式碼。"
      }
    },
    {
      "segment_id": "c364340c",
      "source_content": "Our `index.js` should look as follows (here the [Community template file as reference](https://github.com/react-native-community/template/blob/0.77-stable/template/index.js)):",
      "source_content_hash": "26b1cb4d70f4e4c9fc1e8c977471b2d4d41a9b55a35c209c8392ac0359fb8c0a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們的 `index.js` 應如下所示（此為[社群範本檔案參考](https://github.com/react-native-community/template/blob/0.77-stable/template/index.js)）："
      }
    },
    {
      "segment_id": "b474abd5",
      "source_content": "```js\nimport {AppRegistry} from 'react-native';\nimport App from './App';\n\nAppRegistry.registerComponent('HelloWorld', () => App);\n```",
      "source_content_hash": "362bd98183497c35b7e488dbbde4eb0293f227f4393ac57151a9be90674ea868",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_b474abd5"
      }
    },
    {
      "segment_id": "c6868a9f",
      "source_content": "### Create a `App.tsx` file",
      "source_content_hash": "134fa947d580dad127d2271e70a59ec080f4a2f2314f6600e655f3e6fa7a9aff",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 建立 `App.tsx` 檔案"
      }
    },
    {
      "segment_id": "bb1346b6",
      "source_content": "Let's create an `App.tsx` file. This is a [TypeScript](https://www.typescriptlang.org/) file that can have [JSX](<https://en.wikipedia.org/wiki/JSX_(JavaScript)>) expressions. It contains the root React Native component that we will integrate into our iOS application ([link](https://github.com/react-native-community/template/blob/0.77-stable/template/App.tsx)):",
      "source_content_hash": "55edee867941628920eea7c789d10a9e5e6afe8d921e3d500a9805c47f7418d6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "讓我們建立一個 `App.tsx` 檔案。這是可包含 [JSX](<https://en.wikipedia.org/wiki/JSX_(JavaScript)>) 表達式的 [TypeScript](https://www.typescriptlang.org/) 檔案，內含我們將整合至 iOS 應用程式的根 React Native 元件（[連結](https://github.com/react-native-community/template/blob/0.77-stable/template/App.tsx)）："
      }
    },
    {
      "segment_id": "8a061704",
      "source_content": "```tsx\nimport React from 'react';\nimport {\n  SafeAreaView,\n  ScrollView,\n  StatusBar,\n  StyleSheet,\n  Text,\n  useColorScheme,\n  View,\n} from 'react-native';\n\nimport {\n  Colors,\n  DebugInstructions,\n  Header,\n  ReloadInstructions,\n} from 'react-native/Libraries/NewAppScreen';\n\nfunction App(): React.JSX.Element {\n  const isDarkMode = useColorScheme() === 'dark';\n\n  const backgroundStyle = {\n    backgroundColor: isDarkMode ? Colors.darker : Colors.lighter,\n  };\n\n  return (\n    <SafeAreaView style={backgroundStyle}>\n      <StatusBar\n        barStyle={isDarkMode ? 'light-content' : 'dark-content'}\n        backgroundColor={backgroundStyle.backgroundColor}\n      />\n      <ScrollView\n        contentInsetAdjustmentBehavior=\"automatic\"\n        style={backgroundStyle}>\n        <Header />\n        <View\n          style={{\n            backgroundColor: isDarkMode\n              ? Colors.black\n              : Colors.white,\n            padding: 24,\n          }}>\n          <Text style={styles.title}>Step One</Text>\n          <Text>\n            Edit <Text style={styles.bold}>App.tsx</Text> to\n            change this screen and see your edits.\n          </Text>\n          <Text style={styles.title}>See your changes</Text>\n          <ReloadInstructions />\n          <Text style={styles.title}>Debug</Text>\n          <DebugInstructions />\n        </View>\n      </ScrollView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  title: {\n    fontSize: 24,\n    fontWeight: '600',\n  },\n  bold: {\n    fontWeight: '700',\n  },\n});\n\nexport default App;\n```",
      "source_content_hash": "f4259ac64146a5a817edaa67b2a5bb24733f34034a97ffeaf2a043696f0f1862",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_8a061704"
      }
    },
    {
      "segment_id": "09512450",
      "source_content": "Here the [Community template file as reference](https://github.com/react-native-community/template/blob/0.77-stable/template/App.tsx)",
      "source_content_hash": "d596e14b6170c5ba3f3aad22e5c9ece6f240a52cfd357ad8e7ce2355e5d19ce0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此為[社群範本檔案參考](https://github.com/react-native-community/template/blob/0.77-stable/template/App.tsx)"
      }
    },
    {
      "segment_id": "49007f24",
      "source_content": "## 5. Integrating with your iOS code",
      "source_content_hash": "9d1f7ca43bb15c87986b9ab18abf12090b9efd8466b868a01e5a445074214430",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 5. 與 iOS 程式碼整合"
      }
    },
    {
      "segment_id": "be0f7233",
      "source_content": "We now need to add some native code in order to start the React Native runtime and tell it to render our React components.",
      "source_content_hash": "5865d3f502a2c4517db6258136ebbe5faccbc76c3a9bcba46e609351a96df8f3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在我們需要添加一些原生程式碼，以啟動 React Native 運行環境並告知其渲染我們的 React 元件。"
      }
    },
    {
      "segment_id": "dc825187",
      "source_content": "### Requirements",
      "source_content_hash": "2b0c19102a0fe244435ee339d7e394f2b88ea976889c2566401900d95b5a1bb8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 需求條件"
      }
    },
    {
      "segment_id": "833ce577",
      "source_content": "React Native is supposed to work with the `AppDelegate`. The following part assumes that your `AppDelegate` looks like this:",
      "source_content_hash": "e2d7473a910edf9d2fb26f5b5c6ad4efe7642f742673699a99fa025f0986f1f3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Native 預期與 `AppDelegate` 協同運作。以下部分假設您的 `AppDelegate` 如下所示："
      }
    },
    {
      "segment_id": "70c65cb9",
      "source_content": "<Tabs groupId=\"ios-language\" queryString defaultValue={constants.defaultAppleLanguage} values={constants.appleLanguages}>\n<TabItem value=\"objc\">\n\n```objc title=\"AppDelegate.m\"\n#import \"AppDelegate.h\"\n#import \"ViewController.h\"\n\n@interface AppDelegate ()\n\n@end\n\n@implementation AppDelegate {\n  UIWindow *window;\n}\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  window = [UIWindow new];\n  window.rootViewController = [ViewController new];\n  [window makeKeyAndVisible];\n  return YES;\n}\n\n@end\n```\n\n</TabItem>\n<TabItem value=\"swift\">\n\n```swift title=\"AppDelegate.swift\"\nimport UIKit\n\n@main\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n  var window: UIWindow?\n\n  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    // Override point for customization after application launch.\n    window = UIWindow()\n    window?.rootViewController = ViewController()\n    window?.makeKeyAndVisible()\n    return true\n  }\n}\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "41c16ff480f96f6dfd2188369004155a6f5a2146d48d476554e789aa3a22672f",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_70c65cb9"
      }
    },
    {
      "segment_id": "519c654d",
      "source_content": "### Update the `AppDelegate` class",
      "source_content_hash": "1c187d5e9337435e5dc658a6e6cbbc92a7b21cb00e5a23a8318a70aa7f3430cf",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 更新 `AppDelegate` 類別"
      }
    },
    {
      "segment_id": "2d5a3f2f",
      "source_content": "First, we need to extends the `AppDelegate` to inherit from one of the classes provided by React Native: `RCTAppDelegate`.",
      "source_content_hash": "3690928e0972bcc6404acd26ef5cc5d753c86e80f2b0fa4079b6faff8029d9e0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "首先，我們需要擴展 `AppDelegate` 使其繼承 React Native 提供的其中一個類別：`RCTAppDelegate`。"
      }
    },
    {
      "segment_id": "005d858b",
      "source_content": "<Tabs groupId=\"ios-language\" queryString defaultValue={constants.defaultAppleLanguage} values={constants.appleLanguages}>\n<TabItem value=\"objc\">\n\nTo achieve this, we have to modify the `AppDelegate.h` file and the `AppDelegate.m` files:\n\n1. Open the `AppDelegate.h` files and modify it as it follows (See the official template's [AppDelegate.h](https://github.com/react-native-community/template/blob/0.76-stable/template/ios/HelloWorld/AppDelegate.h) as reference):\n\n```diff title=\"AppDelegate.h changes\"\n#import <UIKit/UIKit.h>\n+#import <React-RCTAppDelegate/RCTAppDelegate.h>\n\n-@interface AppDelegate : UIResponder <UIApplicationDelegate>\n+@interface AppDelegate : RCTAppDelegate\n\n\n@end\n```\n\n2. Open the `AppDelegate.mm` file and modify it as it follows (See the official template's [AppDelegate.mm](https://github.com/react-native-community/template/blob/0.76-stable/template/ios/HelloWorld/AppDelegate.mm) as reference\n\n```diff title=\"AppDelegate.mm\"\n#import \"AppDelegate.h\"\n#import \"ViewController.h\"\n+#import <React/RCTBundleURLProvider.h>\n\n@interface AppDelegate ()\n\n@end\n\n@implementation AppDelegate {\n  UIWindow *window;\n}\n\n - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n+ self.automaticallyLoadReactNativeWindow = NO;\n+ return [super application:application didFinishLaunchingWithOptions:launchOptions];\n   window = [UIWindow new];\n   window.rootViewController = [ViewController new];\n   [window makeKeyAndVisible];\n   return YES;\n\n }\n\n+- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge\n+{\n+  return [self bundleURL];\n+}\n\n+- (NSURL *)bundleURL\n+{\n+#if DEBUG\n+  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\"];\n+#else\n+  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n+#endif\n+}\n @end\n```\n\nLet's have a look at the code above:\n\n1. We are inheriting from the `RCTAppDelegate` and we are calling the `application:didFinishLaunchingWithOptions` of the `RCTAppDelegate`. This delegates all the React Native initialization processes to the base class.\n2. We are customizing the `RCTAppDelegate` by setting the `automaticallyLoadReactNativeWindow` to `NO`. This step instruct React Native that the app is handling the `UIWindow` and React Native should not worry about that.\n3. The methods `sourceURLForBridge:` and `bundleURL` are used by the App to tell to React Native where it can find the JS bundle that needs to be rendered. The `sourceURLForBridge:` is from the Old Architecture and you can see that it is deferring the decision to the `bundleURL` method, required by the New Architecture.\n\n</TabItem>\n<TabItem value=\"swift\">\n\nTo achieve this, we have to modify the `AppDelegate.swift`\n\n1. Open the `AppDelegate.swift` files and modify it as it follows (See the official template's [AppDelegate.swift](https://github.com/react-native-community/template/blob/main/template/ios/HelloWorld/AppDelegate.swift) as reference):\n\n```diff title=\"AppDelegate.swift\"\nimport UIKit\n+import React_RCTAppDelegate\n\n@main\n-class AppDelegate: UIResponder, UIApplicationDelegate {\n+class AppDelegate: RCTAppDelegate {\n\n-  var window: UIWindow?\n\n-  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n+  override func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    // Override point for customization after application launch.\n+    self.automaticallyLoadReactNativeWindow = false\n+    super.application(application, didFinishLaunchingWithOptions: launchOptions)\n    window = UIWindow()\n-    window?.rootViewController = ViewController()\n-    window?.makeKeyAndVisible()\n+    window.rootViewController = ViewController()\n+    window.makeKeyAndVisible()\n    return true\n  }\n\n+  override func sourceURL(for bridge: RCTBridge) -> URL? {\n+    self.bundleURL()\n+  }\n\n+  override func bundleURL() -> URL? {\n+#if DEBUG\n+    RCTBundleURLProvider.sharedSettings().jsBundleURL(forBundleRoot: \"index\")\n+#else\n+    Bundle.main.url(forResource: \"main\", withExtension: \"jsbundle\")\n+#endif\n+  }\n}\n```\n\nLet's have a look at the code above:\n\n1. We are inheriting from the `RCTAppDelegate` and we are calling the `application(_:didFinishLaunchingWithOptions:)` of the `RCTAppDelegate`. This delegates all the React Native initialization processes to the base class.\n2. We are customizing the `RCTAppDelegate` by setting the `automaticallyLoadReactNativeWindow` to `false`. This step instruct React Native that the app is handling the `UIWindow` and React Native should not worry about that.\n3. The methods `sourceURLForBridge(for:)` and `bundleURL()` are used by the App to tell to React Native where it can find the JS bundle that needs to be rendered. The `sourceURLForBridge(for:)` is from the Old Architecture and you can see that it is deferring the decision to the `bundleURL()` method, required by the New Architecture.\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "69f0e7433cc7fbdbe50d69eec4700305fdd701631cce66fafdbfa421e2bb3550",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_005d858b"
      }
    },
    {
      "segment_id": "bbee8ddc",
      "source_content": "#### Presenting a React Native view in a rootViewController",
      "source_content_hash": "85d0d80966d20f1e8f9a448601a575525eaf2fadd4b437ef5f39b525e3c0a34c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### 在 rootViewController 中呈現 React Native 視圖"
      }
    },
    {
      "segment_id": "e3f3475c",
      "source_content": "Finally, we can present our React Native view. To do so, we need a new View Controller that can host a view in which we can load the JS content.",
      "source_content_hash": "3688701567b059bd0e25c656b8781f2d4e0f9c83c75b7133addf98b05e92884b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "最後，我們可以呈現 React Native 視圖。為此，我們需要一個新的 View Controller 來承載可載入 JS 內容的視圖。"
      }
    },
    {
      "segment_id": "c1a1298f",
      "source_content": "1. From Xcode, let's create a new `UIViewController` (Let's call it `ReactViewController`).\n2. Have the Initial `ViewController` present the `ReactViewController`. There are several ways to do so, depending on your app. For this example, we assume that you have a button that presents React Native Modally.",
      "source_content_hash": "31caa0e014de2d87698ab5046167a12c3ec56cc85558a214629ddace21908ded",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "1. 從 Xcode 建立一個新的 `UIViewController`（我們將其命名為 `ReactViewController`）。\n2. 讓初始的 `ViewController` 呈現 `ReactViewController`。根據您的應用程式架構，有數種方式可達成此目的。本範例假設您有一個按鈕會以模態方式呈現 React Native。"
      }
    },
    {
      "segment_id": "06cfe1fb",
      "source_content": "<Tabs groupId=\"ios-language\" queryString defaultValue={constants.defaultAppleLanguage} values={constants.appleLanguages}>\n<TabItem value=\"objc\">\n\n```diff title=\"ViewController.m\"\n#import \"ViewController.h\"\n+#import \"ReactViewController.h\"\n\n@interface ViewController ()\n\n@end\n\n- @implementation ViewController\n+@implementation ViewController {\n+  ReactViewController *reactViewController;\n+}\n\n - (void)viewDidLoad {\n   [super viewDidLoad];\n   // Do any additional setup after loading the view.\n   self.view.backgroundColor = UIColor.systemBackgroundColor;\n+  UIButton *button = [UIButton new];\n+  [button setTitle:@\"Open React Native\" forState:UIControlStateNormal];\n+  [button setTitleColor:UIColor.systemBlueColor forState:UIControlStateNormal];\n+  [button setTitleColor:UIColor.blueColor forState:UIControlStateHighlighted];\n+  [button addTarget:self action:@selector(presentReactNative) forControlEvents:UIControlEventTouchUpInside];\n+  [self.view addSubview:button];\n\n+  button.translatesAutoresizingMaskIntoConstraints = NO;\n+  [NSLayoutConstraint activateConstraints:@[\n+    [button.leadingAnchor constraintEqualToAnchor:self.view.leadingAnchor],\n+    [button.trailingAnchor constraintEqualToAnchor:self.view.trailingAnchor],\n+    [button.centerYAnchor constraintEqualToAnchor:self.view.centerYAnchor],\n+    [button.centerXAnchor constraintEqualToAnchor:self.view.centerXAnchor],\n+  ]];\n }\n\n+- (void)presentReactNative\n+{\n+  if (reactViewController == NULL) {\n+    reactViewController = [ReactViewController new];\n+  }\n+  [self presentViewController:reactViewController animated:YES completion:nil];\n+}\n\n@end\n```\n\n</TabItem>\n<TabItem value=\"swift\">\n\n```diff title=\"ViewController.swift\"\nimport UIKit\n\nclass ViewController: UIViewController {\n\n+  var reactViewController: ReactViewController?\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n    // Do any additional setup after loading the view.\n    self.view.backgroundColor = .systemBackground\n\n+    let button = UIButton()\n+    button.setTitle(\"Open React Native\", for: .normal)\n+    button.setTitleColor(.systemBlue, for: .normal)\n+    button.setTitleColor(.blue, for: .highlighted)\n+    button.addAction(UIAction { [weak self] _ in\n+      guard let self else { return }\n+      if reactViewController == nil {\n+       reactViewController = ReactViewController()\n+      }\n+      present(reactViewController!, animated: true)\n+    }, for: .touchUpInside)\n+    self.view.addSubview(button)\n+\n+    button.translatesAutoresizingMaskIntoConstraints = false\n+    NSLayoutConstraint.activate([\n+      button.leadingAnchor.constraint(equalTo: self.view.leadingAnchor),\n+      button.trailingAnchor.constraint(equalTo: self.view.trailingAnchor),\n+      button.centerXAnchor.constraint(equalTo: self.view.centerXAnchor),\n+      button.centerYAnchor.constraint(equalTo: self.view.centerYAnchor),\n+    ])\n  }\n}\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "a4f054bd8c8baa16ab621e6d354dbf971b1b81a6b1d6e306643e52d14f9df36f",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_06cfe1fb"
      }
    },
    {
      "segment_id": "6d85b533",
      "source_content": "3. Update the `ReactViewController` code as it follows:",
      "source_content_hash": "ea897c3a08dd8b5483a05be0dc4cf8d29d65753f791cac2bc3fbee4e2d1a6cde",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "3. 按照以下方式更新 `ReactViewController` 代碼："
      }
    },
    {
      "segment_id": "5b30f9c4",
      "source_content": "<Tabs groupId=\"ios-language\" queryString defaultValue={constants.defaultAppleLanguage} values={constants.appleLanguages}>\n<TabItem value=\"objc\">\n\n```diff title=\"ReactViewController.m\"\n#import \"ReactViewController.h\"\n+#import <React-RCTAppDelegate/RCTRootViewFactory.h>\n+#import <React-RCTAppDelegate/RCTAppDelegate.h>\n\n@interface ReactViewController ()\n\n@end\n\n@implementation ReactViewController\n\n - (void)viewDidLoad {\n   [super viewDidLoad];\n   // Do any additional setup after loading the view.\n+   RCTRootViewFactory *factory = ((RCTAppDelegate *)RCTSharedApplication().delegate).rootViewFactory;\n+   self.view = [factory viewWithModuleName:@\"HelloWorld\"];\n }\n\n@end\n```\n\n</TabItem>\n<TabItem value=\"swift\">\n\n```diff title=\"ReactViewController.swift\"\nimport UIKit\n+import React_RCTAppDelegate\n\nclass ReactViewController: UIViewController {\n\n  override func viewDidLoad() {\n    super.viewDidLoad()\n\n+    let factory = (RCTSharedApplication()?.delegate as? RCTAppDelegate)?.rootViewFactory\n+    self.view = factory?.view(withModuleName: \"HelloWorld\")\n  }\n}\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "d0864931ab618dc340ddae353a3f72657fbb862cf63fb78b52017d42744e15e7",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_5b30f9c4"
      }
    },
    {
      "segment_id": "c2ed90eb",
      "source_content": "4. Make sure to disable the Sandbox scripting. To achieve this, in Xcode, click on your app, then on build settings. Filter for script and set the `User Script Sandboxing` to `NO`. This step is needed to properly switch between the Debug and Release version of the [Hermes engine](https://github.com/facebook/hermes/blob/main/README.md) that we ship with React Native.",
      "source_content_hash": "caa37873bf505562b726c990f3760cfcda9fdd49047a30ae1031cb62ce032b5c",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "4. 確保停用沙盒腳本功能。在 Xcode 中點擊您的應用程式，進入建置設定，篩選「script」並將 `User Script Sandboxing` 設為 `NO`。此步驟是為了正確切換 React Native 內建的 [Hermes 引擎](https://github.com/facebook/hermes/blob/main/README.md) 的除錯版與發行版。"
      }
    },
    {
      "segment_id": "6f54fd35",
      "source_content": "![Disable Sandboxing](/docs/assets/disable-sandboxing.png);",
      "source_content_hash": "a3addf3c9a512b11c4b83dad625e0612f6bec9f8236cba4c5327abb3380f8029",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![停用沙盒功能](/docs/assets/disable-sandboxing.png);"
      }
    },
    {
      "segment_id": "f3f48a64",
      "source_content": "## 6. Test your integration",
      "source_content_hash": "b699e7bc1e3982762fb545dfdd32ca07e95b182f045dba8bd0e31d37094223f1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 6. 測試整合結果"
      }
    },
    {
      "segment_id": "c97debd2",
      "source_content": "You have completed all the basic steps to integrate React Native with your application. Now we will start the [Metro bundler](https://metrobundler.dev/) to build your TypeScript application code into a bundle. Metro's HTTP server shares the bundle from `localhost` on your developer environment to a simulator or device. This allows for [hot reloading](https://reactnative.dev/blog/2016/03/24/introducing-hot-reloading).",
      "source_content_hash": "a033b3f195ddbd04b9d5eed1a9f160b5c03d55131bd7cc58c2306fcaab105b39",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您已完成整合 React Native 與應用程式的基本步驟。現在我們將啟動 [Metro 打包工具](https://metrobundler.dev/)，將您的 TypeScript 應用程式代碼打包成套件。Metro 的 HTTP 伺服器會將套件從開發環境的 `localhost` 分享至模擬器或裝置，這使得 [熱重載](https://reactnative.dev/blog/2016/03/24/introducing-hot-reloading) 成為可能。"
      }
    },
    {
      "segment_id": "3fce3636",
      "source_content": "First, you need to create a `metro.config.js` file in the root of your project as follows:",
      "source_content_hash": "fadfbfb3ab328b95f722f924af7116220f0544c8c68699c8f80f31cfe1b8a503",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "首先，您需要在專案根目錄建立一個 `metro.config.js` 檔案，內容如下："
      }
    },
    {
      "segment_id": "94fbdbda",
      "source_content": "```js\nconst {getDefaultConfig} = require('@react-native/metro-config');\nmodule.exports = getDefaultConfig(__dirname);\n```",
      "source_content_hash": "36d7242fe55a7b33f2af1093753de5b57f2131baa6157f4a2bd89b367ea715ef",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_94fbdbda"
      }
    },
    {
      "segment_id": "17b95bd5",
      "source_content": "You can checkout the [metro.config.js file](https://github.com/react-native-community/template/blob/0.77-stable/template/metro.config.js) from the Community template file as reference.",
      "source_content_hash": "0c5250d64d8072acdad5a095bcf85484f6864a8ab284714a34a089bf6d7fe23d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您可以參考社群範本中的 [metro.config.js 檔案](https://github.com/react-native-community/template/blob/0.77-stable/template/metro.config.js)。"
      }
    },
    {
      "segment_id": "5fe249dd",
      "source_content": "Once you have the config file in place, you can run the bundler. Run the following command in the root directory of your project:",
      "source_content_hash": "710903a85bed90dbab1675cdc8f69a9fd5381dbbf42f531362948e548498984d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "設定檔就位後，即可執行打包工具。在專案根目錄執行以下指令："
      }
    },
    {
      "segment_id": "eb763cfa",
      "source_content": "<Tabs groupId=\"package-manager\" queryString defaultValue={constants.defaultPackageManager} values={constants.packageManagers}>\n<TabItem value=\"npm\">\n\n```shell\nnpm start\n```\n\n</TabItem>\n<TabItem value=\"yarn\">\n\n```shell\nyarn start\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "c237368f53d424fc0258cdfede32c6cec163bfb5057a3e532e5e4fd9921f4fdf",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_eb763cfa"
      }
    },
    {
      "segment_id": "bface61c",
      "source_content": "Now build and run your iOS app as normal.",
      "source_content_hash": "0737a4466cb0c7ae0ea5e874c9e6af1df0832bd587d2f47f940439379dd76870",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "接著如常建置並執行您的 iOS 應用程式。"
      }
    },
    {
      "segment_id": "d55ba54d",
      "source_content": "Once you reach your React-powered Activity inside the app, it should load the JavaScript code from the development server and display:",
      "source_content_hash": "ffbd58e312e30612af5d9cb2b06ca9673074a90f45f6ffcc3834fca302b17192",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當您進入應用程式中由 React 驅動的畫面時，它應會從開發伺服器載入 JavaScript 代碼並顯示："
      }
    },
    {
      "segment_id": "93583e77",
      "source_content": "<center><img src=\"/docs/assets/EmbeddedAppIOSVideo.gif\" width=\"300\" /></center>",
      "source_content_hash": "7339ce0b4964eb61457b238cf33c1b1db53565f05375c2d1db6eea04e78a8a00",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_93583e77"
      }
    },
    {
      "segment_id": "5e6eca4f",
      "source_content": "### Creating a release build in Xcode",
      "source_content_hash": "cebb8fdbdcdce4d6accc510028ad21f6d7852f9009629a2dc1be3dd216757aae",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 在 Xcode 中建立發行版本"
      }
    },
    {
      "segment_id": "aa8e8b02",
      "source_content": "You can use Xcode to create your release builds too! The only additional step is to add a script that is executed when the app is built to package your JS and images into the iOS application.",
      "source_content_hash": "86e94ffda9e5a44f79f0c8224957f1b5b00f16838cbc5a0642d04d61d5138406",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您也可以使用 Xcode 建立發行版本！唯一的額外步驟是新增一個在建置應用程式時執行的腳本，用於將 JS 和圖片打包進 iOS 應用程式中。"
      }
    },
    {
      "segment_id": "98e2c415",
      "source_content": "1. In Xcode, select your application\n2. Click on `Build Phases`\n3. Click on the `+` in the top left corner and select `New Run Script Phase`\n4. Click on the `Run Script` line and rename the Script to `Bundle React Native code and images`\n5. Paste in the text box the following script",
      "source_content_hash": "66e979432f4ada9dbf905983cb912492d9101c09a8ceca40e31f68653f42b8a4",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "1. 在 Xcode 中選擇您的應用程式\n2. 點擊 `Build Phases`\n3. 點擊左上角的 `+` 並選擇 `New Run Script Phase`\n4. 點擊 `Run Script` 這一行，將腳本重新命名為 `Bundle React Native code and images`\n5. 在文字框中貼上以下腳本"
      }
    },
    {
      "segment_id": "320c2c43",
      "source_content": "```sh title=\"Build React Native code and image\"\nset -e\n\nWITH_ENVIRONMENT=\"$REACT_NATIVE_PATH/scripts/xcode/with-environment.sh\"\nREACT_NATIVE_XCODE=\"$REACT_NATIVE_PATH/scripts/react-native-xcode.sh\"\n\n/bin/sh -c \"$WITH_ENVIRONMENT $REACT_NATIVE_XCODE\"\n```",
      "source_content_hash": "5792e0273cfc6c6aa448f71bb5bb68ca1c5c92af3b93e3c12ae6c385c2c9f2c2",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_320c2c43"
      }
    },
    {
      "segment_id": "43446b0c",
      "source_content": "6. Drag and drop the script before the one called `[CP] Embed Pods Frameworks`.",
      "source_content_hash": "13f1b533e0f741d7a011d8a268ba12b223490c9214e796093dfa2b3648dd54e1",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "6. 將此腳本拖放至名為 `[CP] Embed Pods Frameworks` 的腳本之前。"
      }
    },
    {
      "segment_id": "a10f4259",
      "source_content": "Now, if you build your app for Release, it will work as expected.",
      "source_content_hash": "ec74d97ec49468b35717718278a32844fd6c2489b18e2c52ff48d9d35e36d0f9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在，當您為發行版本建置應用程式時，它將如預期般運作。"
      }
    },
    {
      "segment_id": "9a24614d",
      "source_content": "### Now what?",
      "source_content_hash": "3f41131596e2a049d4d00c4f4c304ff87d8d3cc0474a4c61c485847d9bafeca5",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 接下來呢？"
      }
    },
    {
      "segment_id": "590f826a",
      "source_content": "At this point you can continue developing your app as usual. Refer to our [debugging](debugging) and [deployment](running-on-device) docs to learn more about working with React Native.",
      "source_content_hash": "2a765e765a3af5281841e72ffe76592a8162446ba5f35a892d9224be47053a1e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "至此，您可以如常繼續開發應用程式。請參考我們的 [除錯](debugging) 和 [部署](running-on-device) 文件，以了解更多關於使用 React Native 的資訊。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.77/_integration-with-existing-apps-ios.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.587641+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "3133fe0bd40b430308abb7d757a0f66972c1a738f47218f978b719b09175b08d"
  }
}