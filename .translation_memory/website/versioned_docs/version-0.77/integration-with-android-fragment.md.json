{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.77/integration-with-android-fragment.md",
  "source_file_content_hash": "d98f4d93c84a0a5aa35fc82be44244b0b984fa95bfe1fbca8389fb5fc7d41ef5",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: integration-with-android-fragment\ntitle: Integration with an Android Fragment\n---",
      "source_content_hash": "a55ba392c8b33eb99a4e31bce7abc4884a8525fa738417ddd0611298fc50276f",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4d1292be"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "The guide for [Integration with Existing Apps](https://reactnative.dev/docs/integration-with-existing-apps) details how to integrate a full-screen React Native app into an existing Android app as an **Activity**.",
      "source_content_hash": "a3c88b7af32376c79431db8b4bfd58a53d108f99dbf2a8458a52c11ac67d4f02",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[與現有應用整合](https://reactnative.dev/docs/integration-with-existing-apps)指南詳細說明了如何將全螢幕的React Native應用作為**Activity**整合到現有的Android應用中。"
      }
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "To use React Native components within **Fragments** in an existing app requires some additional setup.",
      "source_content_hash": "123e3c4d94c6922ac5b835140edc68fdfd269cb3a4bea9844a83ffabc76494ce",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若要在現有應用中的**Fragments**內使用React Native元件，則需要進行一些額外的設定。"
      }
    },
    {
      "segment_id": "9fcbdce9",
      "source_content": "### 1. Add React Native to your app",
      "source_content_hash": "17fcfcc4e4e56b773d0c19bd42052b3b56950fd8f3ad9294b7ddaf0774d81305",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 1. 將React Native加入你的應用"
      }
    },
    {
      "segment_id": "ad8fd492",
      "source_content": "Follow the guide for [Integration with Existing Apps](https://reactnative.dev/docs/integration-with-existing-apps) until the end to make sure you can safely run your React Native app in a full screen Activity.",
      "source_content_hash": "700e79f5513793747eab3d28c9618a95142e1fc913a55969e50941c88867c890",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "按照[與現有應用整合](https://reactnative.dev/docs/integration-with-existing-apps)指南操作至最後一步，確保你能安全地在全螢幕Activity中運行你的React Native應用。"
      }
    },
    {
      "segment_id": "cbe57f9d",
      "source_content": "### 2. Add a FrameLayout for the React Native Fragment",
      "source_content_hash": "ec2a3a0ed334050d5e568dfd7f84decdf5cbe667999035c1c3da529c42dcbcdf",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 2. 為React Native Fragment添加FrameLayout"
      }
    },
    {
      "segment_id": "39b3772c",
      "source_content": "In this example, we're going to use a `FrameLayout` to add a React Native Fragment to an Activity. This approach is flexible enough and can be adapted to use React Native in other layouts such as Bottom Sheets or Tab Layouts.",
      "source_content_hash": "f3ad30407b6cf0de6560f87ab0deb24ede4c45fca99a3785bb24d4b1c01b7ef2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在此範例中，我們將使用`FrameLayout`來將React Native Fragment添加到Activity中。這種方法足夠靈活，可以適應在其他佈局中使用React Native，例如Bottom Sheets或Tab Layouts。"
      }
    },
    {
      "segment_id": "1acb9a05",
      "source_content": "First add a `<FrameLayout>` with an id, width and height to your Activity's layout (e.g. `main_activity.xml` in the `res/layouts` folder). This is the layout you will find to render your React Native Fragment.",
      "source_content_hash": "25d5c70f0fcb10b33a3afeaa58291ea62e0322ac42b12c443772d7c730a2b97e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "首先在你的Activity佈局（例如`res/layouts`資料夾中的`main_activity.xml`）中添加一個帶有id、寬度和高度的`<FrameLayout>`。這是用來渲染你的React Native Fragment的佈局。"
      }
    },
    {
      "segment_id": "9eee5787",
      "source_content": "```xml\n<FrameLayout\n    android:id=\"@+id/react_native_fragment\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\" />\n```",
      "source_content_hash": "e4f230e5c672b07a38872706be5764e6eecbec0e38b8cdea4d85237a92e7e13d",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_9eee5787"
      }
    },
    {
      "segment_id": "f2f30ae8",
      "source_content": "### 3. Make your host Activity implement `DefaultHardwareBackBtnHandler`",
      "source_content_hash": "25c81efda61322dcf0db8dc1d7f66afb84f6bb2b07f4a073cc24f8a522fb01c8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 3. 讓你的宿主Activity實現`DefaultHardwareBackBtnHandler`"
      }
    },
    {
      "segment_id": "dfe931a2",
      "source_content": "As your host activity is not a `ReactActivity`, you need to implement the `DefaultHardwareBackBtnHandler` interface to handle the back button press event.\nThis is required by React Native to handle the back button press event.",
      "source_content_hash": "b140426a5d5b6ac1f32ea329b6f962b6b24c9f7e5c8660dbbf38a12f0e087ca5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "由於你的宿主Activity不是`ReactActivity`，你需要實現`DefaultHardwareBackBtnHandler`接口來處理返回按鈕的按下事件。\n這是React Native用來處理返回按鈕按下事件的必要條件。"
      }
    },
    {
      "segment_id": "7499a4e7",
      "source_content": "Go into your host activity and make sure it implements the `DefaultHardwareBackBtnHandler` interface:",
      "source_content_hash": "dfec4d250fe5c9a3a43adef89acea26c4b2edbdfa2a0d2933a1f303437f1479c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "進入你的宿主Activity並確保它實現了`DefaultHardwareBackBtnHandler`接口："
      }
    },
    {
      "segment_id": "e7c54101",
      "source_content": "<Tabs groupId=\"android-language\" queryString defaultValue={constants.defaultAndroidLanguage} values={constants.androidLanguages}>\n<TabItem value=\"kotlin\">\n\n```diff\npackage <your-package-here>\n\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\n+import com.facebook.react.modules.core.DefaultHardwareBackBtnHandler\n\n+class MainActivity : AppCompatActivity() {\n+class MainActivity : AppCompatActivity(), DefaultHardwareBackBtnHandler {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.main_activity)\n\n        findViewById<Button>(R.id.sample_button).setOnClickListener {\n            // Handle button click\n        }\n    }\n\n+   override fun invokeDefaultOnBackPressed() {\n+       super.onBackPressed()\n+   }\n}\n```\n\n</TabItem>\n<TabItem value=\"java\">\n\n```diff\npackage <your-package-here>;\n\nimport android.os.Bundle;\nimport androidx.appcompat.app.AppCompatActivity;\n+import com.facebook.react.modules.core.DefaultHardwareBackBtnHandler;\n\n-class MainActivity extends AppCompatActivity {\n+class MainActivity extends AppCompatActivity implements DefaultHardwareBackBtnHandler {\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main_activity);\n\n        findViewById(R.id.button_appcompose).setOnClickListener(button -> {\n            // Handle button click\n        });\n    }\n\n+   @Override\n+   public void invokeDefaultOnBackPressed() {\n+       super.onBackPressed();\n+   }\n}\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "bffa806710264f87d51e3a57b8a63ca8429972d01f99a5186281acd6cb515882",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_e7c54101"
      }
    },
    {
      "segment_id": "b10963d7",
      "source_content": "### 4. Add a React Native Fragment to the FrameLayout",
      "source_content_hash": "deb1cf4e79e17cad4ca5e4633db57d237485219def6941dc7cec3aae8235ce9d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 4. 將React Native Fragment添加到FrameLayout"
      }
    },
    {
      "segment_id": "2822251a",
      "source_content": "Finally, we can update the Activity to add a React Native Fragment to the FrameLayout.\nIn this specific example, we're going to assume that your Activity has a button with id `sample_button` that when clicked will render a React Native Fragment into the FrameLayout.",
      "source_content_hash": "f8153b69770012b4f1cccb1951af26353c5c66d73976ca99ac67bb7a6d34af2a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "最後，我們可以更新Activity以將React Native Fragment添加到FrameLayout中。\n在此特定範例中，我們假設你的Activity有一個id為`sample_button`的按鈕，點擊後會將React Native Fragment渲染到FrameLayout中。"
      }
    },
    {
      "segment_id": "6ca4479f",
      "source_content": "Update your Activity's `onCreate` method as follows:",
      "source_content_hash": "bab6f69ee8ccfddb4d54690a8101fc46e8e5ae672e84427c14eef3297ce43d4a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "按如下方式更新你的Activity的`onCreate`方法："
      }
    },
    {
      "segment_id": "341c2c0e",
      "source_content": "<Tabs groupId=\"android-language\" queryString defaultValue={constants.defaultAndroidLanguage} values={constants.androidLanguages}>\n<TabItem value=\"kotlin\">\n\n```diff\npackage <your-package-here>\n\nimport android.os.Bundle\nimport androidx.appcompat.app.AppCompatActivity\n+import com.facebook.react.ReactFragment\nimport com.facebook.react.modules.core.DefaultHardwareBackBtnHandler\n\npublic class MainActivity : AppCompatActivity(), DefaultHardwareBackBtnHandler {\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.main_activity)\n\n        findViewById<Button>(R.id.sample_button).setOnClickListener {\n+           val reactNativeFragment = ReactFragment.Builder()\n+               .setComponentName(\"HelloWorld\")\n+               .setLaunchOptions(Bundle().apply { putString(\"message\", \"my value\") })\n+               .build()\n+           supportFragmentManager\n+               .beginTransaction()\n+               .add(R.id.react_native_fragment, reactNativeFragment)\n+               .commit()\n        }\n    }\n\n   override fun invokeDefaultOnBackPressed() {\n       super.onBackPressed()\n   }\n}\n```\n\n</TabItem>\n<TabItem value=\"java\">\n\n```diff\npackage <your-package-here>;\n\nimport android.os.Bundle;\nimport androidx.appcompat.app.AppCompatActivity;\n+import com.facebook.react.ReactFragment;\nimport com.facebook.react.modules.core.DefaultHardwareBackBtnHandler;\n\npublic class MainActivity extends AppCompatActivity implements DefaultHardwareBackBtnHandler {\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main_activity);\n\n        findViewById(R.id.button_appcompose).setOnClickListener(button -> {\n+           Bundle launchOptions = new Bundle();\n+           launchOptions.putString(\"message\", \"my value\");\n+\n+           ReactFragment fragment = new ReactFragment.Builder()\n+                   .setComponentName(\"HelloWorld\")\n+                   .setLaunchOptions(launchOptions)\n+                   .build();\n+           getSupportFragmentManager()\n+                   .beginTransaction()\n+                   .add(R.id.react_native_fragment, fragment)\n+                   .commit();\n        });\n    }\n\n    @Override\n    public void invokeDefaultOnBackPressed() {\n        super.onBackPressed();\n    }\n}\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "885d2ba165e2813b44fdc0d765a783c267f1e2316a3691a60fd2b48fee914eb1",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_341c2c0e"
      }
    },
    {
      "segment_id": "9ef42155",
      "source_content": "Let's look at the code above.",
      "source_content_hash": "1bd3a30c7f9ac1f7fbe103f59265145f5c2641d39f971bcbdfae4dc0d1d45214",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "讓我們來看看上面的代碼。"
      }
    },
    {
      "segment_id": "fe25bd72",
      "source_content": "The `ReactFragment.Builder()` is used to create a new `ReactFragment` and then we use the `supportFragmentManager` to add that Fragment to the `FrameLayout`.",
      "source_content_hash": "5d22a601e034695456c7ac2cb7ad35e0f74aa46b02c00501726cd14eff6340cd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`ReactFragment.Builder()`用於創建一個新的`ReactFragment`，然後我們使用`supportFragmentManager`將該Fragment添加到`FrameLayout`中。"
      }
    },
    {
      "segment_id": "c8a6ab3e",
      "source_content": "Inside the builder you can customize how the fragment is created:",
      "source_content_hash": "7787178400402496f9add72cc8122eacebc479669dd7c111b2fb8754e88da58b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在builder內部，你可以自定義Fragment的創建方式："
      }
    },
    {
      "segment_id": "aa3dd15d",
      "source_content": "- `setComponentName` is the name of the component you want to render. It's the same string specified in your `index.js` inside the `registerComponent` method.\n- `setLaunchOptions` is an optional method to pass initial props to your component. This is optional and you can remove it if you don't use it.",
      "source_content_hash": "f4cd9f62ae6596984cb2edd92c26c1662069a2c4595a2d5ca99ef2a1f4234b40",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `setComponentName`是你想要渲染的元件名稱。它與你在`index.js`中`registerComponent`方法指定的字符串相同。\n- `setLaunchOptions`是一個可選方法，用於傳遞初始props給你的元件。這是可選的，如果你不需要使用可以移除它。"
      }
    },
    {
      "segment_id": "af250a10",
      "source_content": "### 5. Test your integration",
      "source_content_hash": "5e61454d489645f262541d19da12d4576021d27811d8bf9384981e9d852c5ee8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 5. 測試你的整合"
      }
    },
    {
      "segment_id": "295367fa",
      "source_content": "Make sure you run `yarn start` to run the bundler and then run your android app in Android Studio. The app should load the JavaScript/TypeScript code from the development server and display it in your React Native Fragment in the Activity.",
      "source_content_hash": "906c47de6ba093c7822ceaca4d1c7637a75f812e48e6441e701bf9e0e1061f0f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "確保你運行`yarn start`來啟動bundler，然後在Android Studio中運行你的Android應用。應用應該會從開發伺服器加載JavaScript/TypeScript代碼，並在Activity中的React Native Fragment中顯示它。"
      }
    },
    {
      "segment_id": "6fad5db5",
      "source_content": "Your app should look like this one:",
      "source_content_hash": "18805b347f5b454a25cc603d3da953b24a1a2cccbd02a8c35745683897f481ef",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你的應用應該看起來像這樣："
      }
    },
    {
      "segment_id": "c5e0bb3d",
      "source_content": "![Screenshot](/docs/assets/EmbeddedAppAndroidFragmentVideo.gif)",
      "source_content_hash": "8310d27540fa93c25f75b78c2a620fd62bdceff0584693e08ea0e1ada6a85724",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![截圖](/docs/assets/EmbeddedAppAndroidFragmentVideo.gif)"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.77/integration-with-android-fragment.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.669273+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "d98f4d93c84a0a5aa35fc82be44244b0b984fa95bfe1fbca8389fb5fc7d41ef5"
  }
}