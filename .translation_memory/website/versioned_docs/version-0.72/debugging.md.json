{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.72/debugging.md",
  "source_file_content_hash": "9686b85219defaca90e2b2bf20dfb9b4e6002b3a1e75dfeb88f535acbf0d045a",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: debugging\ntitle: Debugging Basics\n---",
      "source_content_hash": "ff8bbf31f8509c7ea8e556d2bb1d20d41dd67a0b3c4e423b18fcdd865cfdabed",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4d1292be"
      }
    },
    {
      "segment_id": "cc3c868d",
      "source_content": "## Accessing the Dev Menu",
      "source_content_hash": "2ce4091b69683e2536a6f864f396d5f37b9956c09c626c2673a710e9ecafd4e5",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 存取開發者選單"
      }
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "React Native provides an in-app developer menu which offers several debugging options. You can access the Dev Menu by shaking your device or via keyboard shortcuts:",
      "source_content_hash": "cd3005d009e8bd4caeebd137d5168f5e8ef7881744a6a93764833167489f39ea",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Native 提供內建的開發者選單，其中包含多種除錯選項。您可以透過搖動裝置或使用鍵盤快捷鍵來存取開發者選單："
      }
    },
    {
      "segment_id": "143e51c1",
      "source_content": "- iOS Simulator: <kbd>Cmd ⌘</kbd> + <kbd>D</kbd> (or Device > Shake)\n- Android emulators: <kbd>Cmd ⌘</kbd> + <kbd>M</kbd> (macOS) or <kbd>Ctrl</kbd> + <kbd>M</kbd> (Windows and Linux)",
      "source_content_hash": "2e55d361632b98d00b2ebf91ff7843c8a646ac61647d77bbc700951029baec18",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- iOS 模擬器：<kbd>Cmd ⌘</kbd> + <kbd>D</kbd>（或裝置 > 搖動）\n- Android 模擬器：<kbd>Cmd ⌘</kbd> + <kbd>M</kbd>（macOS）或 <kbd>Ctrl</kbd> + <kbd>M</kbd>（Windows 和 Linux）"
      }
    },
    {
      "segment_id": "cf898102",
      "source_content": "Alternatively for Android devices and emulators, you can run `adb shell input keyevent 82` in your terminal.",
      "source_content_hash": "a3c8dd19d83b08387002e38e0836a4bfef76aee89c720f398ef39ae36c799650",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "另外，對於 Android 裝置和模擬器，您可以在終端機中執行 `adb shell input keyevent 82`。"
      }
    },
    {
      "segment_id": "42ad8e83",
      "source_content": "![](/docs/assets/DevMenu.png)",
      "source_content_hash": "06241b9c93275b7b2274423a5b4dab79321c82589630e27b5db9e2e8500179ad",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![](/docs/assets/DevMenu.png)"
      }
    },
    {
      "segment_id": "f55b9485",
      "source_content": ":::note\nThe Dev Menu is disabled in release (production) builds.\n:::",
      "source_content_hash": "2acaa8759b09df9c57d380a7a7a927f79b2a22d403888a4ab9b0fbad7afaddf6",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::note\n開發者選單在正式（生產）版本中會被停用。\n:::"
      }
    },
    {
      "segment_id": "40f9552a",
      "source_content": "## LogBox",
      "source_content_hash": "7acc997fbbe39eb75d08a7456fd6efaaa51decdadc53e00c6948142842fd1acd",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## LogBox"
      }
    },
    {
      "segment_id": "f2c2bdd0",
      "source_content": "Errors and warnings in development builds are displayed in LogBox inside your app.",
      "source_content_hash": "c9ca2947a2194c0a478c264b42824dd065c99edb3f2fe44c47ea53f1dc1a5b4f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在開發版本中，錯誤和警告會顯示在應用程式內的 LogBox 中。"
      }
    },
    {
      "segment_id": "6b3596a2",
      "source_content": ":::note\nLogBox is disabled in release (production) builds.\n:::",
      "source_content_hash": "cd02b3e078b9b9c5156db835bd42bbfffb4eea82de64da795089a9520df13912",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::note\nLogBox 在正式（生產）版本中會被停用。\n:::"
      }
    },
    {
      "segment_id": "48847fd4",
      "source_content": "### Console Errors and Warnings",
      "source_content_hash": "3f0b8a170e840b1e0a1929a7be35b9f93f74eec497cabd323e3ed41669d7d8f3",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 主控台錯誤與警告"
      }
    },
    {
      "segment_id": "4daf5cdd",
      "source_content": "Console errors and warnings are displayed as on-screen notifications with a red or yellow badge, and the number of errors or warning in the console respectively. To view a console error or warnings, tap the notification to view the full screen information about the log and to paginate through all of the logs in the console.",
      "source_content_hash": "cc81c424709d3221b4a81abd8581fc4e5f6c06cd5fc710bd3e76191feabf9341",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "主控台錯誤和警告會以螢幕通知的形式顯示，分別帶有紅色或黃色標記，以及主控台中錯誤或警告的數量。若要查看主控台錯誤或警告，請點擊通知以查看完整的日誌資訊，並可翻頁瀏覽主控台中的所有日誌。"
      }
    },
    {
      "segment_id": "bdc231b1",
      "source_content": "These notifications can be hidden using `LogBox.ignoreAllLogs()`. This is useful when giving product demos, for example. Additionally, notifications can be hidden on a per-log basis via `LogBox.ignoreLogs()`. This is useful when there's a noisy warning that cannot be fixed, like those in a third-party dependency.",
      "source_content_hash": "4c3c627bab96e7227d1184d4d2c392c08088cfff0d65378e4ff7c4102b71d2cc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這些通知可以透過 `LogBox.ignoreAllLogs()` 來隱藏。這在進行產品演示等場合非常有用。此外，也可以透過 `LogBox.ignoreLogs()` 來逐一日誌隱藏通知。這對於無法修復的第三方依賴項中的嘈雜警告特別有用。"
      }
    },
    {
      "segment_id": "26794fc5",
      "source_content": ":::info\nIgnore logs as a last resort and create a task to fix any logs that are ignored.\n:::",
      "source_content_hash": "7893c96ec458f5f6cd75825ed464a9fb41f2c14740ef2805cf97b72edb16a262",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::info\n忽略日誌應作為最後手段，並應建立任務來修復所有被忽略的日誌。\n:::"
      }
    },
    {
      "segment_id": "bca33820",
      "source_content": "```tsx\nimport {LogBox} from 'react-native';\n\n// Ignore log notification by message:\nLogBox.ignoreLogs(['Warning: ...']);\n\n// Ignore all log notifications:\nLogBox.ignoreAllLogs();\n```",
      "source_content_hash": "6092f938adb5b02acc3546af5cca7568e26af0bc74e8686631ce04359683f724",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_bca33820"
      }
    },
    {
      "segment_id": "11c76fcc",
      "source_content": "### Unhandled Errors",
      "source_content_hash": "62a83984c94d210099a4157ccae541a1d467ec4f7bb9996200e3ef099d8d29c2",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 未處理的錯誤"
      }
    },
    {
      "segment_id": "98d26038",
      "source_content": "Unhandled JavaScript errors such as `undefined is not a function` will automatically open a full screen LogBox error with the source of the error. These errors are dismissable and minimizable so that you can see the state of your app when these errors occur, but should always be addressed.",
      "source_content_hash": "cdc63742f5245c19f6c1b2671b1239abddd4043640e8d7f18c72018e169e4715",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "未處理的 JavaScript 錯誤（例如 `undefined is not a function`）會自動開啟全螢幕的 LogBox 錯誤畫面，顯示錯誤來源。這些錯誤可以關閉或最小化，以便您查看錯誤發生時的應用程式狀態，但應始終予以解決。"
      }
    },
    {
      "segment_id": "af52d59d",
      "source_content": "### Syntax Errors",
      "source_content_hash": "4c446605c271e174bea81061a0d20855dbd113f09f0e28f94f8989d4abee6d08",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 語法錯誤"
      }
    },
    {
      "segment_id": "4d52a261",
      "source_content": "When syntax error occurs the full screen LogBox error will automatically open with the stack trace and location of the syntax error. This error is not dismissable because it represents invalid JavaScript execution that must be fixed before continuing with your app. To dismiss these errors, fix the syntax error and either save to automatically dismiss (with Fast Refresh enabled) or <kbd>Cmd ⌘</kbd>/<kbd>Ctrl</kbd> + <kbd>R</kbd> to reload (with Fast Refresh disabled).",
      "source_content_hash": "21ff05abd871786d79ac94e9767f68086e83b390389daac461a9a7e78bb007c3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當發生語法錯誤時，全螢幕的 LogBox 錯誤畫面會自動開啟，顯示堆疊追蹤和語法錯誤的位置。此錯誤無法關閉，因為它代表無效的 JavaScript 執行，必須在繼續應用程式之前修復。若要關閉這些錯誤，請修復語法錯誤並儲存以自動關閉（啟用快速重新整理時）或按 <kbd>Cmd ⌘</kbd>/<kbd>Ctrl</kbd> + <kbd>R</kbd> 重新載入（停用快速重新整理時）。"
      }
    },
    {
      "segment_id": "7283cdac",
      "source_content": "## Chrome Developer Tools",
      "source_content_hash": "4641e138c2dfdd3d44225753dff4bfae4041b7d5cbc94dba912fb99e18109e39",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## Chrome 開發者工具"
      }
    },
    {
      "segment_id": "1131ef75",
      "source_content": "To debug JavaScript code in Chrome, select \"Open Debugger\" from the Dev Menu. This will open a new tab at [http://localhost:8081/debugger-ui](http://localhost:8081/debugger-ui).",
      "source_content_hash": "e3d24db918334a85c929d71178c893236bded164ec15c2297c52b4a6b597d8d8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若要在 Chrome 中除錯 JavaScript 程式碼，請從開發者選單中選擇「開啟除錯器」。這將在 [http://localhost:8081/debugger-ui](http://localhost:8081/debugger-ui) 開啟一個新分頁。"
      }
    },
    {
      "segment_id": "8b2a52b1",
      "source_content": "From here, select `More Tools → Developer Tools` from the Chrome menu to open [Chrome DevTools](https://developer.chrome.com/devtools). Alternatively, you can use the shortcut <kbd>⌥ Option</kbd> + <kbd>Cmd ⌘</kbd> + <kbd>I</kbd> (macOS) / <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>I</kbd> (Windows and Linux).",
      "source_content_hash": "a361bc623d277a0bbe78f0abb2a2a44638b09a52f9a1a2bfc318657ee36b927d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在此處，從 Chrome 選單中選擇 `更多工具 → 開發者工具` 以開啟 [Chrome DevTools](https://developer.chrome.com/devtools)。或者，您可以使用快捷鍵 <kbd>⌥ Option</kbd> + <kbd>Cmd ⌘</kbd> + <kbd>I</kbd>（macOS）/ <kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>I</kbd>（Windows 和 Linux）。"
      }
    },
    {
      "segment_id": "35f6931b",
      "source_content": "- If you're new to Chrome DevTools, we recommend learning about the [Console](https://developer.chrome.com/docs/devtools/#console) and [Sources](https://developer.chrome.com/docs/devtools/#sources) tabs in the docs.\n- You may want to enable [Pause on Caught Exceptions](https://developer.chrome.com/docs/devtools/javascript/breakpoints/#exceptions) for a better debugging experience.",
      "source_content_hash": "f355a7a162ec5c2eb86aa19b81ce800a81998e548e375809f0094c2d39e54ceb",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 如果您是 Chrome DevTools 的新手，我們建議您閱讀文件中的[主控台](https://developer.chrome.com/docs/devtools/#console)和[來源](https://developer.chrome.com/docs/devtools/#sources)分頁。\n- 您可能想啟用[在捕捉例外時暫停](https://developer.chrome.com/docs/devtools/javascript/breakpoints/#exceptions)以獲得更好的除錯體驗。"
      }
    },
    {
      "segment_id": "fc8cba88",
      "source_content": ":::info\nThe React Developer Tools Chrome extension does not work with React Native, but you can use its standalone version instead. Read [this section](react-devtools) to learn how.\n:::",
      "source_content_hash": "1847baa5b62823cd74ce08d7883b55014afc2f5c56703b9ee50452fed0d00594",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::info\nReact Developer Tools Chrome 擴充功能不適用於 React Native，但你可以改用其獨立版本。閱讀[此章節](react-devtools)了解操作方法。\n:::"
      }
    },
    {
      "segment_id": "c1d6a7ca",
      "source_content": ":::note\nOn Android, if the times between the debugger and device have drifted, things such as animations and event behavior might not work properly. This can be fixed by running ``adb shell \"date `date +%m%d%H%M%Y.%S%3N`\"``. Root access is required if using a physical device.\n:::",
      "source_content_hash": "17cf300c2b63a2813cb12df6e0efa1de726d63e4cde7696b420cbb5f28b12eeb",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::note\n在 Android 上，若偵錯工具與裝置的時間出現偏差，可能會導致動畫和事件行為異常。可執行 ``adb shell \"date `date +%m%d%H%M%Y.%S%3N`\"`` 指令修正此問題（使用實體裝置時需 root 權限）。\n:::"
      }
    },
    {
      "segment_id": "b051b70c",
      "source_content": "### Debugging on a physical device",
      "source_content_hash": "a92d8a1590a0b4cb943b6f8d43d6c50d420b0684a54e60677dca9a0f8dd13ba2",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 實體裝置偵錯"
      }
    },
    {
      "segment_id": "0286b5a7",
      "source_content": ":::info\nIf you're using Expo CLI, this is configured for you already.\n:::",
      "source_content_hash": "88055ae607eb641393a03d1afa9b0fbc944a15edd47a1cee8c7648d589043add",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::info\n若使用 Expo CLI，此設定已自動完成。\n:::"
      }
    },
    {
      "segment_id": "41b1e179",
      "source_content": "<Tabs groupId=\"platform\" defaultValue={constants.defaultPlatform} values={constants.platforms} className=\"pill-tabs\">\n<TabItem value=\"ios\">\n\nOn iOS devices, open the file [`RCTWebSocketExecutor.mm`](https://github.com/facebook/react-native/blob/master/packages/react-native/React/CoreModules/RCTWebSocketExecutor.mm) and change \"localhost\" to the IP address of your computer, then select \"Debug JS Remotely\" from the Dev Menu.\n\n</TabItem>\n<TabItem value=\"android\">\n\nOn Android 5.0+ devices connected via USB, you can use the [`adb` command line tool](http://developer.android.com/tools/help/adb.html) to set up port forwarding from the device to your computer:\n\n```sh\nadb reverse tcp:8081 tcp:8081\n```\n\nAlternatively, select \"Settings\" from the Dev Menu, then update the \"Debug server host for device\" setting to match the IP address of your computer.\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "215c5a8cdb8bc1a011ce3ace0b9f0617d1d87d12228bdd94e8a05a17c868c23d",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_41b1e179"
      }
    },
    {
      "segment_id": "13f26ba5",
      "source_content": ":::note\nIf you run into any issues, it may be possible that one of your Chrome extensions is interacting in unexpected ways with the debugger. Try disabling all of your extensions and re-enabling them one-by-one until you find the problematic extension.\n:::",
      "source_content_hash": "749f3b23a61746e8165f3308ba70db80894149aed6bf51a5189ba50a6cc7b69e",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::note\n若遇到問題，可能是某個 Chrome 擴充功能與偵錯工具發生衝突。建議停用所有擴充功能後逐一重新啟用，以找出問題來源。\n:::"
      }
    },
    {
      "segment_id": "440823bd",
      "source_content": "<details>\n<summary>Advanced: Debugging using a custom JavaScript debugger</summary>\n\nTo use a custom JavaScript debugger in place of Chrome Developer Tools, set the `REACT_DEBUGGER` environment variable to a command that will start your custom debugger. You can then select \"Open Debugger\" from the Dev Menu to start debugging.\n\nThe debugger will receive a list of all project roots, separated by a space. For example, if you set `REACT_DEBUGGER=\"node /path/to/launchDebugger.js --port 2345 --type ReactNative\"`, then the command `node /path/to/launchDebugger.js --port 2345 --type ReactNative /path/to/reactNative/app` will be used to start your debugger.\n\n:::note\nCustom debugger commands executed this way should be short-lived processes, and they shouldn't produce more than 200 kilobytes of output.\n:::\n\n</details>",
      "source_content_hash": "6a2daa63e7018ff0017ab90669c60ac3be478c482df0ab60b909324efc14233f",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_440823bd"
      }
    },
    {
      "segment_id": "f8614e13",
      "source_content": "## Safari Developer Tools",
      "source_content_hash": "1149abb278afdc1f6de075d7e97f36b8fe20cb50d8aaf4aa8cc90a0b139bb4a6",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## Safari 開發者工具"
      }
    },
    {
      "segment_id": "396efb28",
      "source_content": "You can use Safari to debug the iOS version of your app without having to enable \"Debug JS Remotely\".",
      "source_content_hash": "99bca3b79c4f575e440cef82332a9e06fcea0aa3d8a0898acfead21da39da0c4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "無需啟用「遠端偵錯 JavaScript」即可使用 Safari 偵錯 iOS 版應用程式。"
      }
    },
    {
      "segment_id": "10e4f9ca",
      "source_content": "- On a physical device go to: `Settings → Safari → Advanced → Make sure \"Web Inspector\" is turned on` (This step is not needed on the Simulator)\n- On your Mac enable Develop menu in Safari: `Settings... (or Preferences...) → Advanced → Select \"Show Develop menu in menu bar\"`\n- Select your app's JSContext: `Develop → Simulator (or other device) → JSContext`\n- Safari's Web Inspector should open which has a Console and a Debugger",
      "source_content_hash": "805c14ac4caf15a341f436506b77baa730231d9a44f189a3d80f5246957d52bb",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 實體裝置設定路徑：`設定 → Safari → 進階 → 確保「網頁檢查器」已啟用`（模擬器無需此步驟）\n- Mac 端 Safari 啟用開發選單：`偏好設定... → 進階 → 勾選「在選單列顯示開發選單」`\n- 選擇應用程式的 JSContext：`開發 → 模擬器（或其他裝置）→ JSContext`\n- Safari 的網頁檢查器將開啟，內含控制台與偵錯工具"
      }
    },
    {
      "segment_id": "b9331170",
      "source_content": "While sourcemaps may not be enabled by default, you can follow [this guide](http://blog.nparashuram.com/2019/10/debugging-react-native-ios-apps-with.html) or [video](https://www.youtube.com/watch?v=GrGqIIz51k4) to enable them and set break points at the right places in the source code.",
      "source_content_hash": "80959a643d99a6aa1eada7bd43dc3b2b95c379d92ab4330c4c7111a8b5cdce19",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "預設可能未啟用原始碼對應，可參閱[此指南](http://blog.nparashuram.com/2019/10/debugging-react-native-ios-apps-with.html)或[影片](https://www.youtube.com/watch?v=GrGqIIz51k4)啟用功能，並在原始碼正確位置設定中斷點。"
      }
    },
    {
      "segment_id": "8fcdd6d4",
      "source_content": "However, every time the app is reloaded (using live reload, or by manually reloading), a new JSContext is created. Choosing \"Automatically Show Web Inspectors for JSContexts\" saves you from having to select the latest JSContext manually.",
      "source_content_hash": "4a3d9817a34c0ae86af2242bae8d5a91d7176e558ed7e1a3a468af8d3c6ff848",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "需注意每次重新載入應用程式（透過即時重新載入或手動操作）時，都會建立新的 JSContext。勾選「自動顯示 JSContext 的網頁檢查器」可避免手動選擇最新 JSContext。"
      }
    },
    {
      "segment_id": "c35e5786",
      "source_content": "## Performance Monitor",
      "source_content_hash": "cf243bb2c6c0d9fd0fad28d295cabb7499b02d988f249ee2af1fcaaf81ebe113",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 效能監控"
      }
    },
    {
      "segment_id": "9c9e2b64",
      "source_content": "You can enable a performance overlay to help you debug performance problems by selecting \"Perf Monitor\" in the Dev Menu.",
      "source_content_hash": "ec4981cd700c80ef74090ff5747752df8a237dd62e6710e807268bfdd2dcd08d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "透過開發選單選擇「效能監控」，可啟用效能疊加層協助診斷效能問題。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.72/debugging.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.336847+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "9686b85219defaca90e2b2bf20dfb9b4e6002b3a1e75dfeb88f535acbf0d045a"
  }
}