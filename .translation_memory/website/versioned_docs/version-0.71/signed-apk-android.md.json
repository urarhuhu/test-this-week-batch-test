{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.71/signed-apk-android.md",
  "source_file_content_hash": "c40cc10ca74ce803f250d148f7beb5c0ccf1d60f8d84e51eba7d140881a1fc41",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: signed-apk-android\ntitle: Publishing to Google Play Store\n---",
      "source_content_hash": "e9961357cee4fecf541a783f41f0bf29b18c113b47297b47427a8ed50e6e8e0c",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "Android requires that all apps be digitally signed with a certificate before they can be installed. In order to distribute your Android application via [Google Play store](https://play.google.com/store) it needs to be signed with a release key that then needs to be used for all future updates. Since 2017 it is possible for Google Play to manage signing releases automatically thanks to [App Signing by Google Play](https://developer.android.com/studio/publish/app-signing#app-signing-google-play) functionality. However, before your application binary is uploaded to Google Play it needs to be signed with an upload key. The [Signing Your Applications](https://developer.android.com/tools/publishing/app-signing.html) page on Android Developers documentation describes the topic in detail. This guide covers the process in brief, as well as lists the steps required to package the JavaScript bundle.",
      "source_content_hash": "88299823d7df7c02ad1358b62c6567d5e177a43063f6a04d71a9855f94a8ac0f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Android要求所有應用在安裝前必須經過數位憑證簽署。若需透過[Google Play商店](https://play.google.com/store)發佈應用，必須使用發布金鑰簽署，且後續更新皆需使用同一金鑰。自2017年起，Google Play可透過[App Signing by Google Play](https://developer.android.com/studio/publish/app-signing#app-signing-google-play)功能自動管理簽署流程。但上傳至Google Play前，應用程式仍需使用上傳金鑰簽署。Android開發者文件中的[應用程式簽署](https://developer.android.com/tools/publishing/app-signing.html)頁面有詳細說明。本指南將簡要介紹流程，並列出封裝JavaScript套件所需的步驟。"
      }
    },
    {
      "segment_id": "a239c14b",
      "source_content": ":::info\nIf you are using Expo, read the Expo guide for [Deploying to App Stores](https://docs.expo.dev/distribution/app-stores/) to build and submit your app for the Google Play Store. This guide works with any React Native app to automate the deployment process.\n:::",
      "source_content_hash": "8c57ff4edaf388ef8028cdef99669891653a66b0b45f0ad3da79a1882a7732d9",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::info\n若使用Expo，請參閱Expo的[發佈至應用商店](https://docs.expo.dev/distribution/app-stores/)指南，以建置並提交應用至Google Play商店。本指南適用於任何React Native應用，可自動化部署流程。\n:::"
      }
    },
    {
      "segment_id": "9fcbdce9",
      "source_content": "## Generating an upload key",
      "source_content_hash": "23ded6278b10c2b7be2901269128260a41b8b0f067a1d2ac511a35adf4b94d81",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 產生上傳金鑰"
      }
    },
    {
      "segment_id": "ad8fd492",
      "source_content": "You can generate a private signing key using `keytool`.",
      "source_content_hash": "f042b8dbdd66d8bedf2198f6c6850b01419950a6f55c5e166ddea623ff46d497",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您可使用`keytool`產生私密簽署金鑰。"
      }
    },
    {
      "segment_id": "cbe57f9d",
      "source_content": "### Windows",
      "source_content_hash": "d058ae1f65b4dea63e068ea196d6658a15c9065b85332663fe24e97805dbe179",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### Windows"
      }
    },
    {
      "segment_id": "39b3772c",
      "source_content": "On Windows `keytool` must be run from `C:\\Program Files\\Java\\jdkx.x.x_x\\bin`, as administrator.",
      "source_content_hash": "987906f43e636430d0a198179817cc737ded8227406086023abca65957ab2b19",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在Windows上，需以管理員身分從`C:\\Program Files\\Java\\jdkx.x.x_x\\bin`執行`keytool`。"
      }
    },
    {
      "segment_id": "1acb9a05",
      "source_content": "keytool -genkeypair -v -storetype PKCS12 -keystore my-upload-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000",
      "source_content_hash": "bb7253624183dbe5b7bacb5809fbba0dea699042fd249ed0c5b11bb30539b657",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "keytool -genkeypair -v -storetype PKCS12 -keystore my-upload-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000"
      }
    },
    {
      "segment_id": "2df4f75f",
      "source_content": "This command prompts you for passwords for the keystore and key and for the Distinguished Name fields for your key. It then generates the keystore as a file called `my-upload-key.keystore`.",
      "source_content_hash": "d6ece9fbb247b96836f5537ed4e515d5355202a30d6a4b06296f6af20b14f4a9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此命令會提示您輸入金鑰庫密碼、金鑰密碼及金鑰的辨別名稱欄位。接著會產生名為`my-upload-key.keystore`的金鑰庫檔案。"
      }
    },
    {
      "segment_id": "98cfbd53",
      "source_content": "The keystore contains a single key, valid for 10000 days. The alias is a name that you will use later when signing your app, so remember to take note of the alias.",
      "source_content_hash": "fac64949044e651c106dbe3f7a9700bdd9b091bfeaf00a9b5a6c0c9fb5dbf76d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "該金鑰庫包含單一金鑰，有效期為10000天。別名是後續簽署應用時使用的名稱，請務必記下。"
      }
    },
    {
      "segment_id": "79b2d0b9",
      "source_content": "### macOS",
      "source_content_hash": "20ecfa0f6df2c4a55a6438bad9c65a8a8c14548b804b59e65bfd94c5a9ec714f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### macOS"
      }
    },
    {
      "segment_id": "d9172fa4",
      "source_content": "On macOS, if you're not sure where your JDK bin folder is, then perform the following command to find it:",
      "source_content_hash": "d006dcda8ca57252e9613e9bcf26eff9193041e1a524bb39c535902a0913e5a1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在macOS上，若不確定JDK bin目錄位置，可執行以下命令查詢："
      }
    },
    {
      "segment_id": "26524352",
      "source_content": "/usr/libexec/java_home",
      "source_content_hash": "9bd266eca34c6e0681ab4191014225c792e7b353be62117b11f93eb2974fe6b3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "/usr/libexec/java_home"
      }
    },
    {
      "segment_id": "73ab96a3",
      "source_content": "It will output the directory of the JDK, which will look something like this:",
      "source_content_hash": "5cee194a01b2791f437b0078893d57e45b387720e3f05b4f161918d4dddf8c28",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "該命令會輸出JDK目錄，路徑類似："
      }
    },
    {
      "segment_id": "7499a4e7",
      "source_content": "/Library/Java/JavaVirtualMachines/jdkX.X.X_XXX.jdk/Contents/Home",
      "source_content_hash": "a40c79adf110d4008b64b1d7c903e0176448360c708941c4d5dd02fac50b5041",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "/Library/Java/JavaVirtualMachines/jdkX.X.X_XXX.jdk/Contents/Home"
      }
    },
    {
      "segment_id": "517051a7",
      "source_content": "Navigate to that directory by using the command `cd /your/jdk/path` and use the keytool command with sudo permission as shown below.",
      "source_content_hash": "ff27ab7e6e5b1396b62a797aefd18d27a4db60eff92a2aa8245a124fbc236fc5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "使用`cd /your/jdk/path`命令切換至該目錄，並以sudo權限執行如下keytool命令。"
      }
    },
    {
      "segment_id": "135468ee",
      "source_content": "sudo keytool -genkey -v -keystore my-upload-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000",
      "source_content_hash": "fb59c45b69025b8ba8c94cbe21feaad44fba2113ed45007e723388656a11b710",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "sudo keytool -genkey -v -keystore my-upload-key.keystore -alias my-key-alias -keyalg RSA -keysize 2048 -validity 10000"
      }
    },
    {
      "segment_id": "33a4805e",
      "source_content": ":::caution\nRemember to keep the keystore file private. In case you've lost upload key or it's been compromised you should [follow these instructions](https://support.google.com/googleplay/android-developer/answer/7384423#reset).\n:::",
      "source_content_hash": "55529bc8fe33729b2cfacf43fa40e621bd5cd807f39afafe17010ecf689f0428",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::caution\n請妥善保管金鑰庫檔案。若遺失上傳金鑰或遭洩露，應[遵循此指引](https://support.google.com/googleplay/android-developer/answer/7384423#reset)處理。\n:::"
      }
    },
    {
      "segment_id": "54268405",
      "source_content": "## Setting up Gradle variables",
      "source_content_hash": "f614b1424eaf5b6eeb650e95b1b6a86eb22d5d15549e8adaebc1c45d7df009bd",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 設定Gradle變數"
      }
    },
    {
      "segment_id": "824626b3",
      "source_content": "1. Place the `my-upload-key.keystore` file under the `android/app` directory in your project folder.\n2. Edit the file `~/.gradle/gradle.properties` or `android/gradle.properties`, and add the following (replace `*****` with the correct keystore password, alias and key password),",
      "source_content_hash": "35acf1f6bd3f8c99cca1f76b7eca185d4aa48f76960ffa308ba4fbb720c81f24",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "1. 將`my-upload-key.keystore`檔案置於專案目錄的`android/app`下。\n2. 編輯`~/.gradle/gradle.properties`或`android/gradle.properties`檔案，加入以下內容（請將`*****`替換為正確的金鑰庫密碼、別名及金鑰密碼）："
      }
    },
    {
      "segment_id": "229d6705",
      "source_content": "```\nMYAPP_UPLOAD_STORE_FILE=my-upload-key.keystore\nMYAPP_UPLOAD_KEY_ALIAS=my-key-alias\nMYAPP_UPLOAD_STORE_PASSWORD=*****\nMYAPP_UPLOAD_KEY_PASSWORD=*****\n```",
      "source_content_hash": "68c0d1e11b094d0837838e1e20b2a4f5ce0119f864e1908bfa0b79f7d0f71ddb",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_229d6705"
      }
    },
    {
      "segment_id": "b9aaa519",
      "source_content": "These are going to be global Gradle variables, which we can later use in our Gradle config to sign our app.",
      "source_content_hash": "0768bd2d85234161dc7ecb7231c83e07d29ad1039a21122103a0caeeb3ec0b20",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這些將作為全域Gradle變數，後續可用於Gradle配置中以簽署應用。"
      }
    },
    {
      "segment_id": "7cde057a",
      "source_content": ":::note[Note about using git]\nSaving the above Gradle variables in `~/.gradle/gradle.properties` instead of `android/gradle.properties` prevents them from being checked in to git. You may have to create the `~/.gradle/gradle.properties` file in your user's home directory before you can add the variables.\n:::",
      "source_content_hash": "cbfcdf21a03b0809d5e104a2cafe3272a1f707ef0cb4c41cff59217d2edf437a",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::note[關於git使用的注意事項]\n將上述Gradle變數儲存在`~/.gradle/gradle.properties`而非`android/gradle.properties`中，可避免其被提交至git。您可能需先在用戶家目錄建立`~/.gradle/gradle.properties`檔案才能新增變數。\n:::"
      }
    },
    {
      "segment_id": "974ac4b5",
      "source_content": ":::note[Note about security]\nIf you are not keen on storing your passwords in plaintext, and you are running macOS, you can also [store your credentials in the Keychain Access app](https://pilloxa.gitlab.io/posts/safer-passwords-in-gradle/). Then you can skip the two last rows in `~/.gradle/gradle.properties`.\n:::",
      "source_content_hash": "a60604fd53861f851f494d7e12a35f08ac581c2e7b3a77fadfd02f844d0531b6",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::note[安全性注意事項]\n若您不傾向以明文儲存密碼，且使用 macOS 系統，可改為[將憑證儲存在 Keychain Access 應用程式](https://pilloxa.gitlab.io/posts/safer-passwords-in-gradle/)。如此便能省略 `~/.gradle/gradle.properties` 檔案中的最後兩行設定。\n:::"
      }
    },
    {
      "segment_id": "8c6d7ee7",
      "source_content": "## Adding signing config to your app's Gradle config",
      "source_content_hash": "1409274384d9cac4c25635f7e5f63012a7257ef21c18188480fd9fc5f163a80b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 為應用程式的 Gradle 設定添加簽署配置"
      }
    },
    {
      "segment_id": "06e24cc0",
      "source_content": "The last configuration step that needs to be done is to setup release builds to be signed using upload key. Edit the file `android/app/build.gradle` in your project folder, and add the signing config,",
      "source_content_hash": "b39d08f05d940a0177bc6cea7de9c14fc7109abc07fe960d8c50831f5a6fa9f5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "最後需完成的配置步驟是設定正式版建構使用上傳金鑰進行簽署。編輯專案目錄中的 `android/app/build.gradle` 檔案，並添加簽署配置："
      }
    },
    {
      "segment_id": "7d13cf22",
      "source_content": "```groovy\n...\nandroid {\n    ...\n    defaultConfig { ... }\n    signingConfigs {\n        release {\n            if (project.hasProperty('MYAPP_UPLOAD_STORE_FILE')) {\n                storeFile file(MYAPP_UPLOAD_STORE_FILE)\n                storePassword MYAPP_UPLOAD_STORE_PASSWORD\n                keyAlias MYAPP_UPLOAD_KEY_ALIAS\n                keyPassword MYAPP_UPLOAD_KEY_PASSWORD\n            }\n        }\n    }\n    buildTypes {\n        release {\n            ...\n            signingConfig signingConfigs.release\n        }\n    }\n}\n...\n```",
      "source_content_hash": "c8259a433dae8c8260bb02b7621edf3f59bf5dcbe1998ebf5f24e48c99acea4f",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_7d13cf22"
      }
    },
    {
      "segment_id": "e33a2404",
      "source_content": "## Generating the release AAB",
      "source_content_hash": "1cf35a0ecb0f882b6691b91ec301addb68b8d0a2fc761e8c099823e1e7505b66",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 產生正式版 AAB"
      }
    },
    {
      "segment_id": "82e90254",
      "source_content": "Run the following in a terminal:",
      "source_content_hash": "ca98692325042356b4ce485740c9489717f7fa08fabd785ef63c49117a586c93",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在終端機執行以下指令："
      }
    },
    {
      "segment_id": "890e01bc",
      "source_content": "```shell\ncd android\n./gradlew bundleRelease\n```",
      "source_content_hash": "1ae3f0fedce830ddb285cb732718e0c75dbaf128a9a55d153877a5bd6c3af5fd",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_890e01bc"
      }
    },
    {
      "segment_id": "a2c0166e",
      "source_content": "Gradle's `bundleRelease` will bundle all the JavaScript needed to run your app into the AAB ([Android App Bundle](https://developer.android.com/guide/app-bundle)). If you need to change the way the JavaScript bundle and/or drawable resources are bundled (e.g. if you changed the default file/folder names or the general structure of the project), have a look at `android/app/build.gradle` to see how you can update it to reflect these changes.",
      "source_content_hash": "cc0046927473f09e64aad723f98cd334153c6126e113c26199ea898d5e8131b1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Gradle 的 `bundleRelease` 會將應用程式運作所需的所有 JavaScript 程式碼打包至 AAB ([Android App Bundle](https://developer.android.com/guide/app-bundle))。若需調整 JavaScript 套件或繪圖資源的打包方式（例如變更預設檔案/目錄名稱或專案結構），請參閱 `android/app/build.gradle` 檔案以更新對應設定。"
      }
    },
    {
      "segment_id": "5e3be8cb",
      "source_content": ":::note\nMake sure `gradle.properties` does not include `org.gradle.configureondemand=true` as that will make the release build skip bundling JS and assets into the app binary.\n:::",
      "source_content_hash": "1cc76e7a893e71161896adb2b2522fc2322ac6f7c9086375fe4096d51d2a4269",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::note\n請確認 `gradle.properties` 未包含 `org.gradle.configureondemand=true` 設定，否則正式版建構會略過將 JS 與資源打包至應用程式二進位檔的步驟。\n:::"
      }
    },
    {
      "segment_id": "a81544fd",
      "source_content": "The generated AAB can be found under `android/app/build/outputs/bundle/release/app-release.aab`, and is ready to be uploaded to Google Play.",
      "source_content_hash": "c5846eb933731f11d1d70c1d2100f812c07d7d03c91eb9ec53b402c9ddccc741",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "產生的 AAB 檔案位於 `android/app/build/outputs/bundle/release/app-release.aab`，可直接上傳至 Google Play。"
      }
    },
    {
      "segment_id": "0801d969",
      "source_content": "In order for Google Play to accept AAB format the App Signing by Google Play needs to be configured for your application on the Google Play Console. If you are updating an existing app that doesn't use App Signing by Google Play, please check our [migration section](#migrating-old-android-react-native-apps-to-use-app-signing-by-google-play) to learn how to perform that configuration change.",
      "source_content_hash": "4223a0e2f8003988b462a8fd05477a4256d78f751e848e9e1cced165fbe06694",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Google Play 需為您的應用程式設定「Google Play 應用程式簽署」功能才能接受 AAB 格式。若您要更新尚未採用此功能的既有應用程式，請參閱我們的[遷移章節](#migrating-old-android-react-native-apps-to-use-app-signing-by-google-play)了解如何進行配置變更。"
      }
    },
    {
      "segment_id": "ab39e8a7",
      "source_content": "## Testing the release build of your app",
      "source_content_hash": "5cd231ad1216201e9abaccab7c3e0f0405a8eb0d31bddf8e42c5681719ad908f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 測試應用程式的正式版建構"
      }
    },
    {
      "segment_id": "d21af28f",
      "source_content": "Before uploading the release build to the Play Store, make sure you test it thoroughly. First uninstall any previous version of the app you already have installed. Install it on the device using the following command in the project root:",
      "source_content_hash": "7f787aca2e1a1ea1d591cf8d7c1c810e95fa3b60b975639595aebc9412849091",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "將正式版上傳至 Play 商店前，請務必徹底測試。先解除安裝裝置上所有舊版應用程式，再於專案根目錄執行以下指令進行安裝："
      }
    },
    {
      "segment_id": "5347a9b5",
      "source_content": "```shell\nnpx react-native run-android --mode=release\n```",
      "source_content_hash": "224b353be34334bccbd719b1cccc19aadbc05aa97754fdffb71df2f8e5261532",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_5347a9b5"
      }
    },
    {
      "segment_id": "558df877",
      "source_content": "Note that `--mode release` is only available if you've set up signing as described above.",
      "source_content_hash": "0532a4bc0fb1e121cb24db229a2874d6fdbf8571e1b0d7211efbdd78eea4f2b9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "注意：僅有當您完成前述簽署設定後，才能使用 `--mode release` 參數。"
      }
    },
    {
      "segment_id": "f38d1cb0",
      "source_content": "You can terminate any running bundler instances, since all your framework and JavaScript code is bundled in the APK's assets.",
      "source_content_hash": "4932124db6bbb09dbfb779bdc64bcb0e34d999391f2e37fb7db904410d4dc6dc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您可以終止所有正在執行的打包程序，因為所有框架與 JavaScript 程式碼都已打包至 APK 的資源中。"
      }
    },
    {
      "segment_id": "47516512",
      "source_content": "## Publishing to other stores",
      "source_content_hash": "7206178a09ebcd3b11b0e57cf6ff2db903fb8b33e6a7a47f2aad9e1e282755fc",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 發布至其他商店"
      }
    },
    {
      "segment_id": "6fc234cf",
      "source_content": "By default, the generated APK has the native code for both x86 and ARMv7a CPU architectures. This makes it easier to share APKs that run on almost all Android devices. However, this has the downside that there will be some unused native code on any device, leading to unnecessarily bigger APKs.",
      "source_content_hash": "00fb9d476846a28b2e1887736e17626a07e8b21e536f56c4eedb56c3c1510f6c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "預設產生的 APK 會包含 x86 與 ARMv7a 兩種 CPU 架構的原生程式碼，這能讓 APK 相容於絕大多數 Android 裝置，但代價是裝置上會存在未使用的原生程式碼，導致 APK 檔案大小不必要地增加。"
      }
    },
    {
      "segment_id": "c364340c",
      "source_content": "You can create an APK for each CPU by changing the following line in android/app/build.gradle:",
      "source_content_hash": "93ade0afab3ac65f7e48214ae8f64aad7c63619878144eeefa9ec06d469ecbb6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您可以透過修改 android/app/build.gradle 中的以下設定，為每種 CPU 架構分別產生 APK："
      }
    },
    {
      "segment_id": "b474abd5",
      "source_content": "```diff\n- ndk {\n-   abiFilters \"armeabi-v7a\", \"x86\"\n- }\n- def enableSeparateBuildPerCPUArchitecture = false\n+ def enableSeparateBuildPerCPUArchitecture = true\n```",
      "source_content_hash": "1a5f02decaba32999cb744cc900d53953fa16c8617c95881ceef6817b3bb175d",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_b474abd5"
      }
    },
    {
      "segment_id": "e478ec2c",
      "source_content": "Upload both these files to markets which support device targeting, such as [Google Play](https://developer.android.com/google/play/publishing/multiple-apks.html) and [Amazon AppStore](https://developer.amazon.com/docs/app-submission/device-filtering-and-compatibility.html), and the users will automatically get the appropriate APK. If you want to upload to other markets, such as [APKFiles](https://www.apkfiles.com/), which do not support multiple APKs for a single app, change the following line as well to create the default universal APK with binaries for both CPUs.",
      "source_content_hash": "271c5dddd017ad43088e9260e2aaa322c4da1513fc82f9b33adf1c0debb3332b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "將這兩個檔案上傳至支援裝置定向的市集（如 [Google Play](https://developer.android.com/google/play/publishing/multiple-apks.html) 和 [Amazon AppStore](https://developer.amazon.com/docs/app-submission/device-filtering-and-compatibility.html)），使用者便會自動取得對應的 APK。若要上傳至其他市集（如 [APKFiles](https://www.apkfiles.com/)）這類不支援單一應用程式多 APK 的平台，請同時修改以下設定以產生包含雙 CPU 架構的通用 APK。"
      }
    },
    {
      "segment_id": "e908327f",
      "source_content": "```diff\n- universalApk false  // If true, also generate a universal APK\n+ universalApk true  // If true, also generate a universal APK\n```",
      "source_content_hash": "027d0abe800dbab93d3eb5671d57d8819dc0ae2c3a2cac9b594c662a4e9a34c2",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_e908327f"
      }
    },
    {
      "segment_id": "a0d0e29e",
      "source_content": "## Enabling Proguard to reduce the size of the APK (optional)",
      "source_content_hash": "3951a87ff921e33a02773ebbdad28bdbcaaf032a4b103e17d79ce4879346c35d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 啟用 Proguard 縮減 APK 大小（選用）"
      }
    },
    {
      "segment_id": "be17ccc3",
      "source_content": "Proguard is a tool that can slightly reduce the size of the APK. It does this by stripping parts of the React Native Java bytecode (and its dependencies) that your app is not using.",
      "source_content_hash": "10596fc8eaf72e3e19761af7cfbe3607ddb331a1ba411e79981117ae5a2c6bda",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Proguard 工具能透過移除應用程式未使用的 React Native Java 位元碼（及其依賴項），略微縮減 APK 檔案大小。"
      }
    },
    {
      "segment_id": "2a6fcac9",
      "source_content": ":::caution[Important]\nMake sure to thoroughly test your app if you've enabled Proguard. Proguard often requires configuration specific to each native library you're using. See `app/proguard-rules.pro`.\n:::",
      "source_content_hash": "d9288d9777cf69defbba2fde62119a402e6d5d09c4d546707d4d0a377db4c992",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::caution[重要]\n若您已啟用 Proguard，請務必徹底測試您的應用程式。Proguard 通常需要針對您使用的每個原生函式庫進行特定配置。請參閱 `app/proguard-rules.pro`。\n:::"
      }
    },
    {
      "segment_id": "4c787c52",
      "source_content": "To enable Proguard, edit `android/app/build.gradle`:",
      "source_content_hash": "57c3bac17f4143d6d3b194e4a921238d20bafb744ddc01ed739f36810d11ac38",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "要啟用 Proguard，請編輯 `android/app/build.gradle`："
      }
    },
    {
      "segment_id": "520cfa65",
      "source_content": "```groovy\n/**\n * Run Proguard to shrink the Java bytecode in release builds.\n */\ndef enableProguardInReleaseBuilds = true\n```",
      "source_content_hash": "44369015ce88fbb4606e1bd566232fac1744adb141743b5568ffdfb76e7d3d22",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_520cfa65"
      }
    },
    {
      "segment_id": "d4eab4a6",
      "source_content": "## Migrating old Android React Native apps to use App Signing by Google Play",
      "source_content_hash": "cd4f1bde6e60936d4f6354b0fd6eb5b52c5014c3f87065b82f282f6d90135142",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 將舊版 Android React Native 應用程式遷移至使用 Google Play 應用程式簽署"
      }
    },
    {
      "segment_id": "0ddaa835",
      "source_content": "If you are migrating from previous version of React Native chances are your app does not use App Signing by Google Play feature. We recommend you enable that in order to take advantage from things like automatic app splitting. In order to migrate from the old way of signing you need to start by [generating new upload key](#generating-an-upload-key) and then replacing release signing config in `android/app/build.gradle` to use the upload key instead of the release one (see section about [adding signing config to gradle](#adding-signing-config-to-your-apps-gradle-config)). Once that's done you should follow the [instructions from Google Play Help website](https://support.google.com/googleplay/android-developer/answer/7384423) in order to send your original release key to Google Play.",
      "source_content_hash": "3f46be9486e3c6ed3d4461291f81429041aea292a9ec9241f9121b49cc39fb90",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若您正從舊版 React Native 遷移，您的應用程式可能尚未使用 Google Play 應用程式簽署功能。我們建議您啟用此功能以充分利用自動應用程式拆分等優勢。要從舊版簽署方式遷移，您需先[產生新的上傳金鑰](#generating-an-upload-key)，接著在 `android/app/build.gradle` 中將發佈簽署配置替換為使用上傳金鑰（請參閱[將簽署配置加入 Gradle](#adding-signing-config-to-your-apps-gradle-config) 章節）。完成後，請依照 [Google Play 說明網站](https://support.google.com/googleplay/android-developer/answer/7384423)的指示，將原始發佈金鑰傳送給 Google Play。"
      }
    },
    {
      "segment_id": "08f73f73",
      "source_content": "## Default Permissions",
      "source_content_hash": "404a1ba22463a740933768d2513cf6a8b2547a504d9f1bd1d5fec84c5cd5ee81",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 預設權限"
      }
    },
    {
      "segment_id": "b08ad0b4",
      "source_content": "By default, `INTERNET` permission is added to your Android app as pretty much all apps use it. `SYSTEM_ALERT_WINDOW` permission is added to your Android APK in debug mode but it will be removed in production.",
      "source_content_hash": "64fbfe70ae148a6e88467a509f8e14d95fa6aad05a8836a14526df69f7a68f4f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "預設情況下，您的 Android 應用程式會加入 `INTERNET` 權限，因絕大多數應用程式皆需使用。`SYSTEM_ALERT_WINDOW` 權限會在偵錯模式中加入至您的 Android APK，但在正式環境中會被移除。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.71/signed-apk-android.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.294054+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "c40cc10ca74ce803f250d148f7beb5c0ccf1d60f8d84e51eba7d140881a1fc41"
  }
}