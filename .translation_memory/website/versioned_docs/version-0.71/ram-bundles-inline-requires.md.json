{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.71/ram-bundles-inline-requires.md",
  "source_file_content_hash": "97c18344c35dcd75de68fdd758621fcd979226625ca380cbd906420b897de8bd",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: ram-bundles-inline-requires\ntitle: RAM Bundles and Inline Requires\n---",
      "source_content_hash": "b2d56af5a74de1d5afa3b3be18d1d14cc585ea0bb14ecf39e7250cb2c5d8fc64",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "If you have a large app you may want to consider the Random Access Modules (RAM) bundle format, and using inline requires. This is useful for apps that have a large number of screens which may not ever be opened during a typical usage of the app. Generally it is useful to apps that have large amounts of code that are not needed for a while after startup. For instance the app includes complicated profile screens or lesser used features, but most sessions only involve visiting the main screen of the app for updates. We can optimize the loading of the bundle by using the RAM format and requiring those features and screens inline (when they are actually used).",
      "source_content_hash": "0874516411a650d60795ac989bf901996b3cb58311937b62c597bbf648a079db",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若您開發的是大型應用程式，可考慮採用隨機存取模組(RAM)套件格式並搭配行內(inline)引入(requires)。這對於包含大量畫面、但典型使用情境中多數畫面不會被開啟的應用程式特別有用。通常適用於啟動後短時間內不需載入大量程式碼的場景，例如應用程式內含複雜的個人檔案頁面或較少使用的功能，但多數使用者會話僅涉及主畫面更新。透過RAM格式與行內引入機制，我們能優化套件載入效率——僅在實際使用時才載入這些功能與畫面。"
      }
    },
    {
      "segment_id": "cc3c868d",
      "source_content": "## Loading JavaScript",
      "source_content_hash": "a84d7c8869151dcb7547b33681dbbc16c0f18d2658cd5fa3a93f53fc4edc83ac",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## JavaScript載入機制"
      }
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "Before react-native can execute JS code, that code must be loaded into memory and parsed. With a standard bundle if you load a 50mb bundle, all 50mb must be loaded and parsed before any of it can be executed. The optimization behind RAM bundles is that you can load only the portion of the 50mb that you actually need at startup, and progressively load more of the bundle as those sections are needed.",
      "source_content_hash": "4aad4260866cace9c945d0343b89c83fcfe5db7b9cda7601494564361762d9a6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在react-native執行JS程式碼前，這些程式碼必須先載入記憶體並完成解析。傳統套件若載入50MB的套件，必須完整載入並解析全部50MB後才能開始執行。RAM套件的優化原理在於：啟動時僅載入您實際需要的部分內容，後續再按需漸進式載入套件的其他區段。"
      }
    },
    {
      "segment_id": "9fcbdce9",
      "source_content": "## Inline Requires",
      "source_content_hash": "0f6a45f8308c7e4f7e05c657430e006b3d714cc8cfc23c6d4ab3d17e3ade0d38",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 行內引入(Inline Requires)"
      }
    },
    {
      "segment_id": "ad8fd492",
      "source_content": "Inline requires delay the requiring of a module or file until that file is actually needed. A basic example would look like this:",
      "source_content_hash": "8b72704f8ae738cbb45609938f78b0bcd151810253b31ca4486aa784d915bb5d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "行內引入會延遲模組或檔案的引入時機，直到該檔案被實際使用時才載入。基礎範例如下："
      }
    },
    {
      "segment_id": "41ad46a6",
      "source_content": "```tsx title=\"VeryExpensive.tsx\"\nimport React, {Component} from 'react';\nimport {Text} from 'react-native';\n// ... import some very expensive modules\n\nexport default function VeryExpensive() {\n  // ... lots and lots of rendering logic\n  return <Text>Very Expensive Component</Text>;\n}\n```",
      "source_content_hash": "8e2a3c3c3a67dec734135cd703eea1474a0b3d14c9af7a78de3443a2fc44c542",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_41ad46a6"
      }
    },
    {
      "segment_id": "08021a08",
      "source_content": "```tsx title=\"Optimized.tsx\"\nimport {useCallback, useState} from 'react';\nimport {TouchableOpacity, View, Text} from 'react-native';\n// Usually we would write a static import:\n// import VeryExpensive from './VeryExpensive';\nlet VeryExpensive = null;\nexport default function Optimize() {\n  const [needsExpensive, setNeedsExpensive] = useState(false);\n  const didPress = useCallback(() => {\n    if (VeryExpensive == null) {\n      VeryExpensive = require('./VeryExpensive').default;\n    }\n    setNeedsExpensive(true);\n  }, []);\n\n  return (\n    <View style={{marginTop: 20}}>\n      <TouchableOpacity onPress={didPress}>\n        <Text>Load</Text>\n      </TouchableOpacity>\n      {needsExpensive ? <VeryExpensive /> : null}\n    </View>\n  );\n}\n```",
      "source_content_hash": "932ccdc9eef44dfc09a27c2fd2263a8cba1a6df7525df760b9634a036cdb1111",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_08021a08"
      }
    },
    {
      "segment_id": "98d26038",
      "source_content": "Even without the RAM format, inline requires can lead to startup time improvements, because the code within VeryExpensive.js will only execute once it is required for the first time.",
      "source_content_hash": "49cf54ed1f3fbbe3511f6378962f9d046e56a87e1c18155394031527635a230f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "即使未採用RAM格式，行內引入仍能改善啟動時間，因為VeryExpensive.js內的程式碼僅會在首次被引入時執行。"
      }
    },
    {
      "segment_id": "af52d59d",
      "source_content": "## Enable the RAM format",
      "source_content_hash": "986a11ee208c7ce865e77754324016e23ea35abb77e1b049ab36f4af7f6e18cd",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 啟用RAM格式"
      }
    },
    {
      "segment_id": "4d52a261",
      "source_content": "On iOS using the RAM format will create a single indexed file that react native will load one module at a time. On Android, by default it will create a set of files for each module. You can force Android to create a single file, like iOS, but using multiple files can be more performant and requires less memory.",
      "source_content_hash": "deaeab82924ca75b3fed21a190abd1f53d97b5344f14676b17db941e2c4bbbb6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在iOS平台，RAM格式會建立單一索引檔案，react native將逐個模組載入。Android平台預設會為每個模組建立獨立檔案，您可強制Android像iOS一樣建立單一檔案，但使用多個獨立檔案通常更具效能優勢且記憶體消耗更低。"
      }
    },
    {
      "segment_id": "23dfb152",
      "source_content": "Enable the RAM format in Xcode by editing the build phase \"Bundle React Native code and images\". Before `../node_modules/react-native/scripts/react-native-xcode.sh` add `export BUNDLE_COMMAND=\"ram-bundle\"`:",
      "source_content_hash": "dd9c4dd9aea4b9740e70a016d0371045429fb8670a0093dc3a878a360168b1be",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在Xcode中編輯「Bundle React Native code and images」建置階段以啟用RAM格式。於`../node_modules/react-native/scripts/react-native-xcode.sh`前添加`export BUNDLE_COMMAND=\"ram-bundle\"`："
      }
    },
    {
      "segment_id": "c05ad55e",
      "source_content": "```\nexport BUNDLE_COMMAND=\"ram-bundle\"\nexport NODE_BINARY=node\n../node_modules/react-native/scripts/react-native-xcode.sh\n```",
      "source_content_hash": "dacf045af2655bab811b5e13150f864770c7ac0ee0eefa9f500ac9a3229fc216",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_c05ad55e"
      }
    },
    {
      "segment_id": "0bb95128",
      "source_content": "On Android enable the RAM format by editing your `android/app/build.gradle` file. Before the line `apply from: \"../../node_modules/react-native/react.gradle\"` add or amend the `project.ext.react` block:",
      "source_content_hash": "1d7891429c88cb3d99d0abcce5cb7abdac2f3cf3c1f11a02e6ddb0a52b49320e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在Android平台，編輯`android/app/build.gradle`檔案啟用RAM格式。於`apply from: \"../../node_modules/react-native/react.gradle\"`前添加或修改`project.ext.react`區塊："
      }
    },
    {
      "segment_id": "29ad5b0e",
      "source_content": "```\nproject.ext.react = [\n  bundleCommand: \"ram-bundle\",\n]\n```",
      "source_content_hash": "37e281ee5965bf54d5ada9987ee66969dd2a59aa0317bc3e1cd220e9b034ff47",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_29ad5b0e"
      }
    },
    {
      "segment_id": "f01228d3",
      "source_content": "Use the following lines on Android if you want to use a single indexed file:",
      "source_content_hash": "f8d8585da2342b8f3d5d7b26e7e884665eebb0dec6dd6887cf96f219ca725cac",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若要在Android平台使用單一索引檔案，請添加以下設定："
      }
    },
    {
      "segment_id": "c808e01e",
      "source_content": "```\nproject.ext.react = [\n  bundleCommand: \"ram-bundle\",\n  extraPackagerArgs: [\"--indexed-ram-bundle\"]\n]\n```",
      "source_content_hash": "1e3a19356f03209f3d142d045fc1ec6d757c64c2ebd69ac1ec4be730c583e8e4",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_c808e01e"
      }
    },
    {
      "segment_id": "a9404d4e",
      "source_content": ":::info\nIf you are using [Hermes JS Engine](https://github.com/facebook/hermes), you **should not** have RAM bundles feature enabled. In Hermes, when loading the bytecode, `mmap` ensures that the entire file is not loaded. Using Hermes with RAM bundles might lead to issues, because those mechanisms are not compatible with each other.\n:::",
      "source_content_hash": "110ad4ca1ba8792cb5338d1e87885ccb50df7b8bafdca61088958cb7a9a91904",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::info\n若您使用[Hermes JS引擎](https://github.com/facebook/hermes)，則**不應**啟用RAM套件功能。Hermes載入位元組碼時，`mmap`機制會確保不會載入整個檔案。Hermes與RAM套件併用可能導致問題，因兩者的運作機制互不相容。\n:::"
      }
    },
    {
      "segment_id": "2e771fd0",
      "source_content": "## Configure Preloading and Inline Requires",
      "source_content_hash": "d34d1a464fcd1cba3e537ceac31dfbaf7b1183d9a0655b559a766268e3fc84aa",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 預載與行內引入配置"
      }
    },
    {
      "segment_id": "0750bfa1",
      "source_content": "Now that we have a RAM bundle, there is overhead for calling `require`. `require` now needs to send a message over the bridge when it encounters a module it has not loaded yet. This will impact startup the most, because that is where the largest number of require calls are likely to take place while the app loads the initial module. Luckily we can configure a portion of the modules to be preloaded. In order to do this, you will need to implement some form of inline require.",
      "source_content_hash": "66b87ee0873aa235d146d7becc53a5e27c97ccbdd0c637b330359405b02cece5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "採用RAM套件後，呼叫`require`會產生額外開銷。當遇到尚未載入的模組時，`require`需透過橋接層(bridge)發送訊息。這對啟動階段影響最大，因初始模組載入期間會集中大量require呼叫。所幸我們可配置部分模組進行預載，為此您需實作某種形式的行內引入機制。"
      }
    },
    {
      "segment_id": "bd30d33e",
      "source_content": "## Investigating the Loaded Modules",
      "source_content_hash": "8879dfefa729f8643dfd7a9af400a6e7121f744f5b551f13103a42e45cee7782",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 分析已載入模組"
      }
    },
    {
      "segment_id": "6b77b644",
      "source_content": "In your root file (index.(ios|android).js) you can add the following after the initial imports:",
      "source_content_hash": "91de13fb6eb82b52a3c5c61b18689dccff19b8132ad99adb079a9921c79b3e8f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在您的根檔案(index.(ios|android).js)中，可於初始引入(imports)後添加以下程式碼："
      }
    },
    {
      "segment_id": "19913a56",
      "source_content": "```js\nconst modules = require.getModules();\nconst moduleIds = Object.keys(modules);\nconst loadedModuleNames = moduleIds\n  .filter(moduleId => modules[moduleId].isInitialized)\n  .map(moduleId => modules[moduleId].verboseName);\nconst waitingModuleNames = moduleIds\n  .filter(moduleId => !modules[moduleId].isInitialized)\n  .map(moduleId => modules[moduleId].verboseName);\n\n// make sure that the modules you expect to be waiting are actually waiting\nconsole.log(\n  'loaded:',\n  loadedModuleNames.length,\n  'waiting:',\n  waitingModuleNames.length,\n);\n\n// grab this text blob, and put it in a file named packager/modulePaths.js\nconsole.log(\n  `module.exports = ${JSON.stringify(\n    loadedModuleNames.sort(),\n    null,\n    2,\n  )};`,\n);\n```",
      "source_content_hash": "d10d055cf0e48b76cac9e281905a2807d5db948406601e463c7249622837c4b8",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_19913a56"
      }
    },
    {
      "segment_id": "f38d1cb0",
      "source_content": "When you run your app, you can look in the console and see how many modules have been loaded, and how many are waiting. You may want to read the moduleNames and see if there are any surprises. Note that inline requires are invoked the first time the imports are referenced. You may need to investigate and refactor to ensure only the modules you want are loaded on startup. Note that you can change the Systrace object on require to help debug problematic requires.",
      "source_content_hash": "2ecd57bfae9d2f07ba1e481f10acc1dd745f72de141231bbd7de8008fb227c4d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "執行應用程式時，可透過控制台觀察已載入與待載入模組數量。建議檢視moduleNames確認是否有意外載入的模組。請注意行內引入會在首次參照到導入內容時觸發，您可能需要重構程式碼以確保啟動時僅載入必要模組。您可透過修改require上的Systrace物件來協助除錯有問題的引入。"
      }
    },
    {
      "segment_id": "e2c67c87",
      "source_content": "```js\nrequire.Systrace.beginEvent = message => {\n  if (message.includes(problematicModule)) {\n    throw new Error();\n  }\n};\n```",
      "source_content_hash": "aa7e9705e5a741a87d5d3414b67739c63bb17eb156e912d4b120e7ceed7d8ca0",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_e2c67c87"
      }
    },
    {
      "segment_id": "692c6053",
      "source_content": "Every app is different, but it may make sense to only load the modules you need for the very first screen. When you are satisfied, put the output of the loadedModuleNames into a file named `packager/modulePaths.js`.",
      "source_content_hash": "4a0e62bce12d8ca70efbd5714a32fe9d18f3738bad73881bee23bb150a6f1e91",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "每個應用程式的情況不同，但合理的做法是僅載入首屏所需的模組。當您確認模組清單後，請將 loadedModuleNames 的輸出內容儲存為 `packager/modulePaths.js` 檔案。"
      }
    },
    {
      "segment_id": "c83259bb",
      "source_content": "## Updating the metro.config.js",
      "source_content_hash": "4cb700af9e2a2c44fab3966f1f27ddc71184e9d4340609da7b04fa61cd3151c1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 更新 metro.config.js 設定"
      }
    },
    {
      "segment_id": "14bc6b75",
      "source_content": "We now need to update `metro.config.js` in the root of the project to use our newly generated `modulePaths.js` file:",
      "source_content_hash": "3b20b427b12d7eb58caf7d130419d0ca013835effa12c52d83ea8442d206cab9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在我們需要更新專案根目錄下的 `metro.config.js` 檔案，以使用新生成的 `modulePaths.js` 檔案："
      }
    },
    {
      "segment_id": "9ed0f908",
      "source_content": "```js\nconst modulePaths = require('./packager/modulePaths');\nconst resolve = require('path').resolve;\nconst fs = require('fs');\n\n// Update the following line if the root folder of your app is somewhere else.\nconst ROOT_FOLDER = resolve(__dirname, '..');\n\nconst config = {\n  transformer: {\n    getTransformOptions: () => {\n      const moduleMap = {};\n      modulePaths.forEach(path => {\n        if (fs.existsSync(path)) {\n          moduleMap[resolve(path)] = true;\n        }\n      });\n      return {\n        preloadedModules: moduleMap,\n        transform: {inlineRequires: {blockList: moduleMap}},\n      };\n    },\n  },\n  projectRoot: ROOT_FOLDER,\n};\n\nmodule.exports = config;\n```",
      "source_content_hash": "3cfb2f834e78bcb6df9060969a999f80fd1c099fb720eb75f3a62ae897cbc376",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_9ed0f908"
      }
    },
    {
      "segment_id": "39f476dc",
      "source_content": "The `preloadedModules` entry in the config indicates which modules should be marked as preloaded when building a RAM bundle. When the bundle is loaded, those modules are immediately loaded, before any requires have even executed. The `blockList` entry indicates that those modules should not be required inline. Because they are preloaded, there is no performance benefit from using an inline require. In fact the generated JavaScript spends extra time resolving the inline require every time the imports are referenced.",
      "source_content_hash": "e44769b06e08fb5c2c58c3ec79c8df5b4f21e59ba55699e281159822469119e5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "設定中的 `preloadedModules` 參數用於指定建構 RAM bundle 時應標記為預載的模組。當 bundle 載入時，這些模組會在所有 require 執行前立即載入。而 `blockList` 參數則表示這些模組不應使用 inline require。由於它們已被預載，使用 inline require 不會帶來效能優勢。實際上，生成的 JavaScript 程式碼每次解析這些引入時，反而會耗費額外時間處理 inline require。"
      }
    },
    {
      "segment_id": "16ae54ea",
      "source_content": "## Test and Measure Improvements",
      "source_content_hash": "7f998450a3148bf798982e5f6f6cdc358f8acb143564ddaf7f0076be1350dab5",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 測試與效能改善評估"
      }
    },
    {
      "segment_id": "62d066b0",
      "source_content": "You should now be ready to build your app using the RAM format and inline requires. Make sure you measure the before and after startup times.",
      "source_content_hash": "2fdb59ed76108b037f859bd8963422bc765f61da762158fce26f0c7010dc5c2c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在您應該已準備好使用 RAM 格式與 inline requires 來建置應用程式。請務必測量並比較啟用前後的啟動時間差異。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.71/ram-bundles-inline-requires.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.294852+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "97c18344c35dcd75de68fdd758621fcd979226625ca380cbd906420b897de8bd"
  }
}