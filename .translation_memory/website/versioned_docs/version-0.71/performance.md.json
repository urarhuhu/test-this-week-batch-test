{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.71/performance.md",
  "source_file_content_hash": "34c2b6505a4fa2ab8118a341966e2d613f7f9c4388fce32a6bb9617954595ece",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: performance\ntitle: Performance Overview\n---",
      "source_content_hash": "9200ee00fa8c09da75dacf98907e5ff667ae23ff541bb8721a9fb962d7c67c5a",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "A compelling reason for using React Native instead of WebView-based tools is to achieve 60 frames per second and a native look and feel to your apps. Where possible, we would like for React Native to do the right thing and help you to focus on your app instead of performance optimization, but there are areas where we're not quite there yet, and others where React Native (similar to writing native code directly) cannot possibly determine the best way to optimize for you and so manual intervention will be necessary. We try our best to deliver buttery-smooth UI performance by default, but sometimes that isn't possible.",
      "source_content_hash": "1f1b3a4c2479b4eb01dc4bb60cdc1be92321b377c1c8c8e8d8a1e93639535fea",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "相較於基於WebView的工具，選擇React Native的一個重要原因是為了實現每秒60幀的流暢度以及應用程式的原生外觀與操作體驗。在可能的情況下，我們希望React Native能自動處理好這些細節，讓開發者能專注於應用邏輯而非效能優化。然而在某些領域，我們尚未完全實現這個目標；還有一些情況（如同直接編寫原生代碼時）React Native無法自動為您做出最佳優化決策，此時就需要手動介入。我們盡力預設提供如絲般順滑的UI效能，但有時這並不可行。"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "This guide is intended to teach you some basics to help you to [troubleshoot performance issues](profiling.md), as well as discuss [common sources of problems and their suggested solutions](performance.md#common-sources-of-performance-problems).",
      "source_content_hash": "88c4138b7de79fa513420eeae74946b4140efae9e71dd36822970217a732f41d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "本指南旨在傳授一些基礎知識，幫助您[排查效能問題](profiling.md)，同時討論[常見問題來源及其解決方案](performance.md#common-sources-of-performance-problems)。"
      }
    },
    {
      "segment_id": "1cc03ec8",
      "source_content": "## What you need to know about frames",
      "source_content_hash": "86bfed416e450cfde668ace0cc41891e1c4e557ef256f152b01527164c237015",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 關於幀的必備知識"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "Your grandparents' generation called movies [\"moving pictures\"](https://www.youtube.com/watch?v=F1i40rnpOsA) for a reason: realistic motion in video is an illusion created by quickly changing static images at a consistent speed. We refer to each of these images as frames. The number of frames that is displayed each second has a direct impact on how smooth and ultimately life-like a video (or user interface) seems to be. iOS devices display 60 frames per second, which gives you and the UI system about 16.67ms to do all of the work needed to generate the static image (frame) that the user will see on the screen for that interval. If you are unable to do the work necessary to generate that frame within the allotted 16.67ms, then you will \"drop a frame\" and the UI will appear unresponsive.",
      "source_content_hash": "c9ea2dc435b697d958902c131eee1ffbc9b87d3816c6ab177855e5647a90f937",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "老一輩人將電影稱為「活動影像」有其道理：影片中流暢的動態效果其實是通過以固定速度快速切換靜態畫面營造的錯覺。我們稱這些靜態畫面為「幀」。每秒顯示的幀數直接影響影片（或使用者介面）的流暢度與真實感。iOS設備以每秒60幀運作，這意味著您與UI系統只有約16.67毫秒來完成生成單一靜態畫面（幀）所需的所有工作。若無法在規定時間內完成幀生成，就會發生「掉幀」，導致UI出現卡頓。"
      }
    },
    {
      "segment_id": "ad8fd492",
      "source_content": "Now to confuse the matter a little bit, open up the developer menu in your app and toggle `Show Perf Monitor`. You will notice that there are two different frame rates.",
      "source_content_hash": "3fd179055d10d0038cb164b154445ac2d3be38fd6999a16d80523b6746a43d53",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "需要特別說明的是，當您在應用中開啟開發者選單並啟用「顯示效能監測器」時，會注意到系統顯示兩種不同的幀率。"
      }
    },
    {
      "segment_id": "86b54d44",
      "source_content": "![](/docs/assets/PerfUtil.png)",
      "source_content_hash": "b4354d6ca8fbbb1023f977515c51b4983d02ea5ad2493c0ff496cd29a1900342",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![](/docs/assets/PerfUtil.png)"
      }
    },
    {
      "segment_id": "d350c018",
      "source_content": "### JS frame rate (JavaScript thread)",
      "source_content_hash": "06c64f18ca130c2da372155ba3b2881033f9b2f388721d1917d5344b1b2a822c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### JS幀率（JavaScript執行緒）"
      }
    },
    {
      "segment_id": "1acb9a05",
      "source_content": "For most React Native applications, your business logic will run on the JavaScript thread. This is where your React application lives, API calls are made, touch events are processed, etc... Updates to native-backed views are batched and sent over to the native side at the end of each iteration of the event loop, before the frame deadline (if all goes well). If the JavaScript thread is unresponsive for a frame, it will be considered a dropped frame. For example, if you were to call `this.setState` on the root component of a complex application and it resulted in re-rendering computationally expensive component subtrees, it's conceivable that this might take 200ms and result in 12 frames being dropped. Any animations controlled by JavaScript would appear to freeze during that time. If anything takes longer than 100ms, the user will feel it.",
      "source_content_hash": "8f8feba3808c9f68281a686c858dad2d3256a6962ea7755a8798de98c243c069",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "大多數React Native應用的業務邏輯都運行在JavaScript執行緒上。這裡是React應用運作的核心區域：API呼叫、觸控事件處理等都在此進行。對原生視圖的更新會被批量處理，並在事件循環的每次迭代結束時（理想情況下在幀截止時間前）發送到原生端。若JavaScript執行緒在某一幀期間無響應，就會被視為掉幀。例如，當您在複雜應用的根組件上調用`this.setState`，導致需要重新渲染計算密集的子組件樹時，這個過程可能耗時200毫秒，造成12幀丟失。此時所有由JavaScript控制的動畫都會出現凍結現象。任何超過100毫秒的延遲都會被使用者明顯感知。"
      }
    },
    {
      "segment_id": "2df4f75f",
      "source_content": "This often happens during `Navigator` transitions: when you push a new route, the JavaScript thread needs to render all of the components necessary for the scene in order to send over the proper commands to the native side to create the backing views. It's common for the work being done here to take a few frames and cause [jank](http://jankfree.org/) because the transition is controlled by the JavaScript thread. Sometimes components will do additional work on `componentDidMount`, which might result in a second stutter in the transition.",
      "source_content_hash": "223e26e653b1e65c190ce8d7d926610fd85514a60c24296d928570c112978915",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這種情況常見於`Navigator`轉場時：當推送新路由時，JavaScript執行緒需要渲染場景所需的所有組件，才能向原生端發送正確指令來創建底層視圖。這個過程通常會耗費數幀時間，由於轉場由JavaScript執行緒控制，會導致[卡頓](http://jankfree.org/)。有時組件在`componentDidMount`中執行額外工作，可能造成轉場過程中的二次卡頓。"
      }
    },
    {
      "segment_id": "98cfbd53",
      "source_content": "Another example is responding to touches: if you are doing work across multiple frames on the JavaScript thread, you might notice a delay in responding to `TouchableOpacity`, for example. This is because the JavaScript thread is busy and cannot process the raw touch events sent over from the main thread. As a result, `TouchableOpacity` cannot react to the touch events and command the native view to adjust its opacity.",
      "source_content_hash": "0a9fa7e73ec44d08e4adecb2551e6acd1b64aaffc146c7c9ca2da592a5bda971",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "另一個典型例子是觸控響應：若JavaScript執行緒持續多幀時間處理任務，您可能會注意到`TouchableOpacity`等組件的響應延遲。這是因為JavaScript執行緒繁忙，無法處理從主線程傳來的原始觸控事件，導致`TouchableOpacity`無法即時響應觸控並通知原生視圖調整透明度。"
      }
    },
    {
      "segment_id": "79b2d0b9",
      "source_content": "### UI frame rate (main thread)",
      "source_content_hash": "db30195649214120a00293951897ee834fa6a00827580824b632d984ca0ebf40",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### UI幀率（主執行緒）"
      }
    },
    {
      "segment_id": "d9172fa4",
      "source_content": "Many people have noticed that performance of `NavigatorIOS` is better out of the box than `Navigator`. The reason for this is that the animations for the transitions are done entirely on the main thread, and so they are not interrupted by frame drops on the JavaScript thread.",
      "source_content_hash": "703bb6ff4a6f1da22d6700c547dff6f0347230101de3048ad55588b2e28de88e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "許多開發者注意到`NavigatorIOS`的預設效能優於`Navigator」，其關鍵原因在於轉場動畫完全在主執行緒執行，因此不會受JavaScript執行緒掉幀的影響。"
      }
    },
    {
      "segment_id": "26524352",
      "source_content": "Similarly, you can happily scroll up and down through a `ScrollView` when the JavaScript thread is locked up because the `ScrollView` lives on the main thread. The scroll events are dispatched to the JS thread, but their receipt is not necessary for the scroll to occur.",
      "source_content_hash": "f6d3f49fbbb8a867c4dba917ec0838e73932250dd87b7e60038aae33ab1bf778",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "同樣地，當 JavaScript 執行緒被鎖定時，您仍可以順暢地在 `ScrollView` 中上下滾動，因為 `ScrollView` 是運行在主執行緒上的。滾動事件會被派發到 JS 執行緒，但滾動行為的發生並不依賴於這些事件的接收。"
      }
    },
    {
      "segment_id": "b25f21be",
      "source_content": "## Common sources of performance problems",
      "source_content_hash": "3ab79a2a4626da3c575a41dab23887cf2abcd94b8a005730b028aee62297e2c4",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 常見的效能問題來源"
      }
    },
    {
      "segment_id": "a1b3d8cb",
      "source_content": "### Running in development mode (`dev=true`)",
      "source_content_hash": "2793470032aa56027a30e01c72814a1beea7c98397cead64ea7fc0bcf816fb6c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 在開發模式下運行 (`dev=true`)"
      }
    },
    {
      "segment_id": "517051a7",
      "source_content": "JavaScript thread performance suffers greatly when running in dev mode. This is unavoidable: a lot more work needs to be done at runtime to provide you with good warnings and error messages, such as validating propTypes and various other assertions. Always make sure to test performance in [release builds](running-on-device.md#building-your-app-for-production).",
      "source_content_hash": "b32ed0cc9d298bfe47a7a1ef4cf67a65f6d2dc9c06079cfebb877f9262eb24af",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在開發模式下運行時，JavaScript 執行緒的效能會大幅下降。這是不可避免的：為了提供良好的警告和錯誤訊息（例如驗證 propTypes 和其他各種斷言），運行時需要執行更多工作。請務必在[發佈版本](running-on-device.md#building-your-app-for-production)中測試效能。"
      }
    },
    {
      "segment_id": "80d9e13c",
      "source_content": "### Using `console.log` statements",
      "source_content_hash": "6213444127b95584fb1aeab868a825da1c2e5915aab7c95f5c385fef0504ebac",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 使用 `console.log` 語句"
      }
    },
    {
      "segment_id": "33331f27",
      "source_content": "When running a bundled app, these statements can cause a big bottleneck in the JavaScript thread. This includes calls from debugging libraries such as [redux-logger](https://github.com/evgenyrodionov/redux-logger), so make sure to remove them before bundling. You can also use this [babel plugin](https://babeljs.io/docs/plugins/transform-remove-console/) that removes all the `console.*` calls. You need to install it first with `npm i babel-plugin-transform-remove-console --save-dev`, and then edit the `.babelrc` file under your project directory like this:",
      "source_content_hash": "1d5eb521dbec89e5f1566da9847fdbb517fdd0845b3d7205898bc80a10ba525e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在運行打包後的應用程式時，這些語句可能會導致 JavaScript 執行緒出現嚴重的瓶頸。這包括來自除錯函式庫（如 [redux-logger](https://github.com/evgenyrodionov/redux-logger)）的呼叫，因此請確保在打包前移除它們。您也可以使用這個 [babel 插件](https://babeljs.io/docs/plugins/transform-remove-console/)來移除所有 `console.*` 呼叫。首先需要安裝它：`npm i babel-plugin-transform-remove-console --save-dev`，然後編輯專案目錄下的 `.babelrc` 文件如下："
      }
    },
    {
      "segment_id": "026f2f3e",
      "source_content": "```json\n{\n  \"env\": {\n    \"production\": {\n      \"plugins\": [\"transform-remove-console\"]\n    }\n  }\n}\n```",
      "source_content_hash": "404c6b02795f3b8bb68bc9ce60ce5e92457f76e737619510b6de25b46719e7a8",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_026f2f3e"
      }
    },
    {
      "segment_id": "f7ef78f9",
      "source_content": "This will automatically remove all `console.*` calls in the release (production) versions of your project.",
      "source_content_hash": "e23415699812a418caac7a9ea461477d5efa5b9f996496e136c76ce0f5890c01",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這將自動移除專案發佈（生產）版本中的所有 `console.*` 呼叫。"
      }
    },
    {
      "segment_id": "b36c6338",
      "source_content": "It is recommended to use the plugin even if no `console.*` calls are made in your project. A third party library could also call them.",
      "source_content_hash": "571490cc84f21ab4a0b94eba1ef6126e8dcb8d543e395b1dcfc002c58e9cd1e9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "即使專案中沒有使用 `console.*` 呼叫，也建議使用此插件。第三方函式庫也可能會呼叫它們。"
      }
    },
    {
      "segment_id": "2c1b51df",
      "source_content": "### `ListView` initial rendering is too slow or scroll performance is bad for large lists",
      "source_content_hash": "c8f712a8d4b0033bb09f82355476b75a077726264aedfe659763398e8cb5198b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `ListView` 初始渲染過慢或大型列表的滾動效能不佳"
      }
    },
    {
      "segment_id": "e536ea0d",
      "source_content": "Use the new [`FlatList`](flatlist.md) or [`SectionList`](sectionlist.md) component instead. Besides simplifying the API, the new list components also have significant performance enhancements, the main one being nearly constant memory usage for any number of rows.",
      "source_content_hash": "b0c1665c4d8c84fb02557ca553a2105d367202daa7fcd2bd13d1f19ca1ffcb80",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "請改用新的 [`FlatList`](flatlist.md) 或 [`SectionList`](sectionlist.md) 元件。除了簡化 API 外，新的列表元件還具有顯著的效能提升，主要特點是無論行數多少，記憶體使用量幾乎保持不變。"
      }
    },
    {
      "segment_id": "40158b4b",
      "source_content": "If your [`FlatList`](flatlist.md) is rendering slow, be sure that you've implemented [`getItemLayout`](flatlist.md#getitemlayout) to optimize rendering speed by skipping measurement of the rendered items.",
      "source_content_hash": "43fb714cb0909a67a37d90019ec6d3e2fcccb596b4b67fa5e9d5473601f6af5f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果您的 [`FlatList`](flatlist.md) 渲染速度較慢，請確保已實作 [`getItemLayout`](flatlist.md#getitemlayout)，通過跳過渲染項目的測量來優化渲染速度。"
      }
    },
    {
      "segment_id": "c431704b",
      "source_content": "### JS FPS plunges when re-rendering a view that hardly changes",
      "source_content_hash": "9b4e1bc1089f12b1ddb47a4d7323e0308c4cbf5fbbe6bf5af1f4d1dfe58dc194",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 重新渲染幾乎不變的視圖時，JS FPS 驟降"
      }
    },
    {
      "segment_id": "79ad944d",
      "source_content": "If you are using a ListView, you must provide a `rowHasChanged` function that can reduce a lot of work by quickly determining whether or not a row needs to be re-rendered. If you are using immutable data structures, this would only need to be a reference equality check.",
      "source_content_hash": "5c26b10a2be3250ecf4421b32b657da2ff61c0c9e240704e00fd393d6f423b38",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果您使用 ListView，必須提供一個 `rowHasChanged` 函式，該函式可以通過快速判斷行是否需要重新渲染來減少大量工作。如果使用不可變數據結構，這只需要進行引用相等性檢查。"
      }
    },
    {
      "segment_id": "531437ca",
      "source_content": "Similarly, you can implement `shouldComponentUpdate` and indicate the exact conditions under which you would like the component to re-render. If you write pure components (where the return value of the render function is entirely dependent on props and state), you can leverage PureComponent to do this for you. Once again, immutable data structures are useful to keep this fast -- if you have to do a deep comparison of a large list of objects, it may be that re-rendering your entire component would be quicker, and it would certainly require less code.",
      "source_content_hash": "3bd44bba111d2e8509a940621e55c4066c8327ede6ad2580f259db131001b042",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "同樣地，您可以實作 `shouldComponentUpdate` 並指定您希望元件重新渲染的具體條件。如果您編寫純元件（渲染函式的返回值完全依賴於 props 和 state），可以利用 PureComponent 來為您完成這項工作。再次強調，不可變數據結構有助於保持高效——如果必須對大型物件列表進行深度比較，重新渲染整個元件可能會更快，且無疑需要更少的程式碼。"
      }
    },
    {
      "segment_id": "bd92edfc",
      "source_content": "### Dropping JS thread FPS because of doing a lot of work on the JavaScript thread at the same time",
      "source_content_hash": "cb95ab14fadbca4ec8e90cf3f58b76a97022d9c379b635078d4d65e6a3adc64c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 由於在 JavaScript 執行緒上同時執行大量工作導致 JS 執行緒 FPS 下降"
      }
    },
    {
      "segment_id": "7f71ff2a",
      "source_content": "\"Slow Navigator transitions\" is the most common manifestation of this, but there are other times this can happen. Using InteractionManager can be a good approach, but if the user experience cost is too high to delay work during an animation, then you might want to consider LayoutAnimation.",
      "source_content_hash": "f0f90dd65d8ac9955f66a6515e739d01b523d8bf1f1e2219aad211bdd76e3b84",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "「導航器過渡緩慢」是這種情況最常見的表現，但也有其他時候會發生這種情況。使用 InteractionManager 可能是一個好方法，但如果延遲動畫期間的工作對使用者體驗的代價太高，則可以考慮使用 LayoutAnimation。"
      }
    },
    {
      "segment_id": "147e8550",
      "source_content": "The Animated API currently calculates each keyframe on-demand on the JavaScript thread unless you [set `useNativeDriver: true`](/blog/2017/02/14/using-native-driver-for-animated#how-do-i-use-this-in-my-app), while LayoutAnimation leverages Core Animation and is unaffected by JS thread and main thread frame drops.",
      "source_content_hash": "773d0c0354d17296056037667501fadc125e1ca74b25728ef32b1a4ff9ed80fe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "除非您[設置 `useNativeDriver: true`](/blog/2017/02/14/using-native-driver-for-animated#how-do-i-use-this-in-my-app)，否則 Animated API 目前會在 JavaScript 執行緒上按需計算每個關鍵影格，而 LayoutAnimation 則利用 Core Animation，不受 JS 執行緒和主執行緒影格丟失的影響。"
      }
    },
    {
      "segment_id": "883231d4",
      "source_content": "One case where I have used this is for animating in a modal (sliding down from top and fading in a translucent overlay) while initializing and perhaps receiving responses for several network requests, rendering the contents of the modal, and updating the view where the modal was opened from. See the Animations guide for more information about how to use LayoutAnimation.",
      "source_content_hash": "9b64575c5b2942e660abfe8103789986687a28be48048a3a855170f2d08653ca",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我曾使用這種方法的一個案例是：在初始化並可能接收多個網路請求的回應、渲染模態框的內容以及更新模態框打開的視圖時，動畫顯示模態框（從頂部滑下並淡入半透明覆蓋層）。有關如何使用 LayoutAnimation 的更多資訊，請參閱動畫指南。"
      }
    },
    {
      "segment_id": "6cc549f2",
      "source_content": "Caveats:",
      "source_content_hash": "f9cce053f957e09218867a6dbf4ebed6e281ab13783521abd23a886fca81a5e3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "注意事項："
      }
    },
    {
      "segment_id": "6384b3d4",
      "source_content": "- LayoutAnimation only works for fire-and-forget animations (\"static\" animations) -- if it must be interruptible, you will need to use `Animated`.",
      "source_content_hash": "730d983f670274e1085599c5472e13e6bd6c9117c63d21363b60f82b941bc55d",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- LayoutAnimation 僅適用於「一發不可收拾」的動畫（「靜態」動畫）——如果需要中斷動畫，則必須使用 `Animated`。"
      }
    },
    {
      "segment_id": "2fd0be2a",
      "source_content": "### Moving a view on the screen (scrolling, translating, rotating) drops UI thread FPS",
      "source_content_hash": "e92fba46c8f3c5a6cbb25b20d8ce063c0800c2c24e5dbe72cf0ca5665bdc9fa5",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 在螢幕上移動視圖（滾動、平移、旋轉）導致 UI 執行緒 FPS 下降"
      }
    },
    {
      "segment_id": "6270d577",
      "source_content": "This is especially true when you have text with a transparent background positioned on top of an image, or any other situation where alpha compositing would be required to re-draw the view on each frame. You will find that enabling `shouldRasterizeIOS` or `renderToHardwareTextureAndroid` can help with this significantly.",
      "source_content_hash": "91f362fa7b35db71488810221507836877843d23c9838c502d558d9b62da3a8f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這種情況尤其發生在文字帶有透明背景並疊加在圖片上，或任何需要在每一幀重新繪製視圖的 alpha 合成場景。啟用 `shouldRasterizeIOS` 或 `renderToHardwareTextureAndroid` 可以顯著改善此問題。"
      }
    },
    {
      "segment_id": "a1fa5396",
      "source_content": "Be careful not to overuse this or your memory usage could go through the roof. Profile your performance and memory usage when using these props. If you don't plan to move a view anymore, turn this property off.",
      "source_content_hash": "2c185a6c362eeca4fd11a08a848748e14b781068b58bc05d0935ae1ec2530a27",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "注意不要過度使用這些屬性，否則記憶體使用量可能會暴增。在使用這些屬性時，請務必分析效能和記憶體使用情況。如果不再移動視圖，請關閉此屬性。"
      }
    },
    {
      "segment_id": "1c598ecd",
      "source_content": "### Animating the size of an image drops UI thread FPS",
      "source_content_hash": "a76e5d0dc319ce79d17d428efdb388e3ef93d95552187229fe0281d4598fe068",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 動畫調整圖片大小導致 UI 執行緒 FPS 下降"
      }
    },
    {
      "segment_id": "2547a6bb",
      "source_content": "On iOS, each time you adjust the width or height of an Image component it is re-cropped and scaled from the original image. This can be very expensive, especially for large images. Instead, use the `transform: [{scale}]` style property to animate the size. An example of when you might do this is when you tap an image and zoom it in to full screen.",
      "source_content_hash": "4a2a220654144f8b6d363c6f5002a8b2935f0024a549492e7a8bcc99e5de343e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在 iOS 上，每次調整 Image 元件的寬度或高度時，都會從原始圖片重新裁剪和縮放。這對於大圖來說非常耗資源。建議改用 `transform: [{scale}]` 樣式屬性來實現尺寸動畫。例如，點擊圖片後將其放大至全螢幕時可以使用此方法。"
      }
    },
    {
      "segment_id": "90d35b51",
      "source_content": "### My TouchableX view isn't very responsive",
      "source_content_hash": "ee29a8f748e94b6db503fdfd023b731753d970714015f7ffa7021adba7936a29",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 我的 TouchableX 視圖反應遲鈍"
      }
    },
    {
      "segment_id": "86348f98",
      "source_content": "Sometimes, if we do an action in the same frame that we are adjusting the opacity or highlight of a component that is responding to a touch, we won't see that effect until after the `onPress` function has returned. If `onPress` does a `setState` that results in a lot of work and a few frames dropped, this may occur. A solution to this is to wrap any action inside of your `onPress` handler in `requestAnimationFrame`:",
      "source_content_hash": "d7c82f591daa7fdd39e72060a2a7d37ec2104e23e8974819261ded97ee94707a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "有時，如果我們在調整觸控回應元件的透明度或高亮效果的同一幀中執行動作，這些效果可能要到 `onPress` 函數返回後才會顯示。如果 `onPress` 中的 `setState` 導致大量工作並丟失幾幀，就可能發生這種情況。解決方法是將 `onPress` 處理程序中的任何動作包裹在 `requestAnimationFrame` 中："
      }
    },
    {
      "segment_id": "daa16011",
      "source_content": "```tsx\nhandleOnPress() {\n  requestAnimationFrame(() => {\n    this.doExpensiveAction();\n  });\n}\n```",
      "source_content_hash": "08d5650002e2d9b6cb702be76fb076418d0cb64b4579fa3262f7e2a366e8383c",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_daa16011"
      }
    },
    {
      "segment_id": "a138e327",
      "source_content": "### Slow navigator transitions",
      "source_content_hash": "22f4360013dd091febda63837591b3485a9716c4e87fd5436f6dae9ff6dafa26",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 導航器過渡動畫緩慢"
      }
    },
    {
      "segment_id": "a2c0166e",
      "source_content": "As mentioned above, `Navigator` animations are controlled by the JavaScript thread. Imagine the \"push from right\" scene transition: each frame, the new scene is moved from the right to left, starting offscreen (let's say at an x-offset of 320) and ultimately settling when the scene sits at an x-offset of 0. Each frame during this transition, the JavaScript thread needs to send a new x-offset to the main thread. If the JavaScript thread is locked up, it cannot do this and so no update occurs on that frame and the animation stutters.",
      "source_content_hash": "ebbb6847aeeea2a190a7442c86dbedfe2fa2c6b4d1b3528df459376cf2a5cf7d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如前所述，`Navigator` 動畫由 JavaScript 執行緒控制。以「從右側推入」的場景過渡為例：每一幀中，新場景從右側（假設初始 x 偏移為 320）移動到左側，最終停在 x 偏移為 0 的位置。在此過渡期間，JavaScript 執行緒需要將新的 x 偏移發送到主執行緒。如果 JavaScript 執行緒被鎖定，則無法完成此操作，導致該幀沒有更新，動畫就會卡頓。"
      }
    },
    {
      "segment_id": "c1eaf30b",
      "source_content": "One solution to this is to allow for JavaScript-based animations to be offloaded to the main thread. If we were to do the same thing as in the above example with this approach, we might calculate a list of all x-offsets for the new scene when we are starting the transition and send them to the main thread to execute in an optimized way. Now that the JavaScript thread is freed of this responsibility, it's not a big deal if it drops a few frames while rendering the scene -- you probably won't even notice because you will be too distracted by the pretty transition.",
      "source_content_hash": "dda31734c29e0c33a573b63d1726c9eab09f4543a560f3afeb4be82637d6cc73",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "解決方法之一是將基於 JavaScript 的動畫卸載到主執行緒。如果採用這種方法，我們可以在開始過渡時計算新場景的所有 x 偏移值，並將其發送到主執行緒以優化方式執行。這樣 JavaScript 執行緒就無需承擔此責任，即使在渲染場景時丟失幾幀也無關緊要——你可能根本不會注意到，因為漂亮的過渡效果會吸引你的注意力。"
      }
    },
    {
      "segment_id": "f0984c2a",
      "source_content": "Solving this is one of the main goals behind the new [React Navigation](navigation.md) library. The views in React Navigation use native components and the [`Animated`](animated.md) library to deliver 60 FPS animations that are run on the native thread.",
      "source_content_hash": "b2525e61ed830dc374f8e1aa6fee3e4bb479a503391bf2f8726ec88dace6b040",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "解決此問題是新版 [React Navigation](navigation.md) 庫的主要目標之一。React Navigation 中的視圖使用原生元件和 [`Animated`](animated.md) 庫，以在主執行緒上實現 60 FPS 的流暢動畫。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.71/performance.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.276146+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "34c2b6505a4fa2ab8118a341966e2d613f7f9c4388fce32a6bb9617954595ece"
  }
}