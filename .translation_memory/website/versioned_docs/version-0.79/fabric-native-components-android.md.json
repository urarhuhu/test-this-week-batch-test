{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.79/fabric-native-components-android.md",
  "source_file_content_hash": "b869f4bdcbd853d687522fb7269664023fe7cdd7178276dca262763810c3acd8",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: fabric-native-components-android\ntitle: 'Fabric Native Modules: Android'\n---",
      "source_content_hash": "ed24b902b4b1853de0c117bd85da7bfbc440b7eb26fac1072b96df0b6d63f3de",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4d1292be"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "Now it's time to write some Android platform code to be able to render the web view. The steps you need to follow are:",
      "source_content_hash": "242aa929ce158b1774a4ed05d68cc0b4aa4d363243eac660b014f9de60784dd1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在是時候編寫一些 Android 平台代碼來渲染網頁視圖了。您需要遵循的步驟如下："
      }
    },
    {
      "segment_id": "4a5b6a68",
      "source_content": "- Running Codegen\n- Write the code for the `ReactWebView`\n- Write the code for the `ReactWebViewManager`\n- Write the code for the `ReactWebViewPackage`\n- Register the `ReactWebViewPackage` in the application",
      "source_content_hash": "54adc1d92d447a042ed19ccbe7c0498db786245d133fd6099b24c714eb723ed8",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 執行 Codegen\n- 編寫 `ReactWebView` 的代碼\n- 編寫 `ReactWebViewManager` 的代碼\n- 編寫 `ReactWebViewPackage` 的代碼\n- 在應用程式中註冊 `ReactWebViewPackage`"
      }
    },
    {
      "segment_id": "cbe57f9d",
      "source_content": "### 1. Run Codegen through Gradle",
      "source_content_hash": "c127f6ddc8b5f00f0c8c405501855d03adc5d1e985b89d91e2c92299bfbb1f32",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 1. 透過 Gradle 執行 Codegen"
      }
    },
    {
      "segment_id": "39b3772c",
      "source_content": "Run this once to generate boilerplate that your IDE of choice can use.",
      "source_content_hash": "711235262d23800e6002c3bfba90a1c32c343670fae34565de8876c6b92c0cdf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "執行一次以生成您的 IDE 可以使用的樣板代碼。"
      }
    },
    {
      "segment_id": "166426c2",
      "source_content": "```bash title=\"Demo/\"\ncd android\n./gradlew generateCodegenArtifactsFromSchema\n```",
      "source_content_hash": "6406a1649ebb2622cec90c4c3590db4dba45df3dc9b853d4b43f99597e6aa767",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_166426c2"
      }
    },
    {
      "segment_id": "f2c2bdd0",
      "source_content": "Codegen will generate the `ViewManager` interface you need to implement and the `ViewManager` delegate for the web view.",
      "source_content_hash": "a1f14b477fc726ebd4cbae2892f807ac4ae6f980a64b3c92dd2de953d729ec92",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Codegen 將生成您需要實現的 `ViewManager` 介面以及網頁視圖的 `ViewManager` 委派。"
      }
    },
    {
      "segment_id": "fa430ad4",
      "source_content": "### 2. Write the `ReactWebView`",
      "source_content_hash": "107e97e78ecd519d2e607e4df6a13e099831001aaa82e6ddc0a76b8fade1825d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 2. 編寫 `ReactWebView`"
      }
    },
    {
      "segment_id": "4b1d2d7d",
      "source_content": "The `ReactWebView` is the component that wraps the Android native view that React Native will render when using our custom Component.",
      "source_content_hash": "a0625d9ec0407a7541367d4ee323f230ae3ec7945edb744191a45d1a6807f6d5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`ReactWebView` 是封裝 Android 原生視圖的組件，當使用我們的自定義組件時，React Native 將渲染該視圖。"
      }
    },
    {
      "segment_id": "dfe931a2",
      "source_content": "Create a `ReactWebView.java` or a `ReactWebView.kt` file in the `android/src/main/java/com/webview` folder with this code:",
      "source_content_hash": "c19e73fc07128cb4283246e4104fcd8e1463c342673e931d56b3e771eb7f7e72",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在 `android/src/main/java/com/webview` 資料夾中創建一個 `ReactWebView.java` 或 `ReactWebView.kt` 文件，並填入以下代碼："
      }
    },
    {
      "segment_id": "2a70bec8",
      "source_content": "<Tabs groupId=\"android-language\" queryString defaultValue={constants.defaultAndroidLanguage} values={constants.androidLanguages}>\n<TabItem value=\"java\">\n\n```java title=\"Demo/android/src/main/java/com/webview/ReactWebView.java\"\npackage com.webview;\n\nimport android.content.Context;\nimport android.util.AttributeSet;\nimport android.webkit.WebView;\nimport android.webkit.WebViewClient;\n\nimport com.facebook.react.bridge.Arguments;\nimport com.facebook.react.bridge.WritableMap;\nimport com.facebook.react.bridge.ReactContext;\nimport com.facebook.react.uimanager.UIManagerHelper;\nimport com.facebook.react.uimanager.events.Event;\n\npublic class ReactWebView extends WebView {\n  public ReactWebView(Context context) {\n    super(context);\n    configureComponent();\n  }\n\n  public ReactWebView(Context context, AttributeSet attrs) {\n    super(context, attrs);\n    configureComponent();\n  }\n\n  public ReactWebView(Context context, AttributeSet attrs, int defStyleAttr) {\n    super(context, attrs, defStyleAttr);\n    configureComponent();\n  }\n\n  private void configureComponent() {\n    this.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT));\n    this.setWebViewClient(new WebViewClient() {\n      @Override\n      public void onPageFinished(WebView view, String url) {\n        emitOnScriptLoaded(OnScriptLoadedEventResult.success);\n      }\n    });\n  }\n\n  public void emitOnScriptLoaded(OnScriptLoadedEventResult result) {\n    ReactContext reactContext = (ReactContext) context;\n    int surfaceId = UIManagerHelper.getSurfaceId(reactContext);\n    EventDispatcher eventDispatcher = UIManagerHelper.getEventDispatcherForReactTag(reactContext, getId());\n    WritableMap payload = Arguments.createMap();\n    payload.putString(\"result\", result.name());\n\n    OnScriptLoadedEvent event = new OnScriptLoadedEvent(surfaceId, getId(), payload);\n    if (eventDispatcher != null) {\n      eventDispatcher.dispatchEvent(event);\n    }\n  }\n\n  public enum OnScriptLoadedEventResult {\n    success,\n    error\n  }\n\n  private class OnScriptLoadedEvent extends Event<OnScriptLoadedEvent> {\n    private final WritableMap payload;\n\n    OnScriptLoadedEvent(int surfaceId, int viewId, WritableMap payload) {\n      super(surfaceId, viewId);\n      this.payload = payload;\n    }\n\n    @Override\n    public String getEventName() {\n      return \"onScriptLoaded\";\n    }\n\n    @Override\n    public WritableMap getEventData() {\n      return payload;\n    }\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"kotlin\">\n\n```kotlin title=\"Demo/android/src/main/java/com/webview/ReactWebView.kt\"\npackage com.webview\n\nimport android.content.Context\nimport android.util.AttributeSet\nimport android.webkit.WebView\nimport android.webkit.WebViewClient\nimport com.facebook.react.bridge.Arguments\nimport com.facebook.react.bridge.WritableMap\nimport com.facebook.react.bridge.ReactContext\nimport com.facebook.react.uimanager.UIManagerHelper\nimport com.facebook.react.uimanager.events.Event\n\nclass ReactWebView: WebView {\n  constructor(context: Context) : super(context) {\n    configureComponent()\n  }\n\n  constructor(context: Context, attrs: AttributeSet?) : super(context, attrs) {\n    configureComponent()\n  }\n\n  constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {\n    configureComponent()\n  }\n\n  private fun configureComponent() {\n    this.layoutParams = LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT)\n    this.webViewClient = object : WebViewClient() {\n      override fun onPageFinished(view: WebView, url: String) {\n        emitOnScriptLoaded(OnScriptLoadedEventResult.success)\n      }\n    }\n  }\n\n  fun emitOnScriptLoaded(result: OnScriptLoadedEventResult) {\n    val reactContext = context as ReactContext\n    val surfaceId = UIManagerHelper.getSurfaceId(reactContext)\n    val eventDispatcher = UIManagerHelper.getEventDispatcherForReactTag(reactContext, id)\n    val payload =\n        Arguments.createMap().apply {\n          putString(\"result\", result.name)\n        }\n    val event = OnScriptLoadedEvent(surfaceId, id, payload)\n\n    eventDispatcher?.dispatchEvent(event)\n  }\n\n  enum class OnScriptLoadedEventResult {\n    success,\n    error;\n  }\n\n  inner class OnScriptLoadedEvent(\n      surfaceId: Int,\n      viewId: Int,\n      private val payload: WritableMap\n  ) : Event<OnScriptLoadedEvent>(surfaceId, viewId) {\n    override fun getEventName() = \"onScriptLoaded\"\n\n    override fun getEventData() = payload\n  }\n}\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "99a3366bf5a83943bec58478971e802df5342825ce925206fff1ccc87fd1d471",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_2a70bec8"
      }
    },
    {
      "segment_id": "c8a6ab3e",
      "source_content": "The `ReactWebView` extends the Android `WebView` so you can reuse all the properties already defined by the platform with ease.",
      "source_content_hash": "245e909929626850a90ce48e4ad7ae3939fce38b73f63860e706baf6ea0cce61",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`ReactWebView` 繼承了 Android 的 `WebView`，因此您可以輕鬆重用平台已定義的所有屬性。"
      }
    },
    {
      "segment_id": "5cf1bce4",
      "source_content": "The class defines the three Android constructors but defers their actual implementation to the private `configureComponent` function. This function takes care of initializing all the components specific properties: in this case you are setting the layout of the `WebView` and you are defining the `WebClient` that you use to customize the behavior of the `WebView`. In this code, the `ReactWebView` emits an event when the page finishes loading, by implementing the `WebClient`'s `onPageFinished` method.",
      "source_content_hash": "791e193bf9deddae027346464233fddc4468e20c464e5a3c64399fb1398e5685",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "該類定義了三個 Android 構造函數，但其實際實現委託給了私有的 `configureComponent` 函數。此函數負責初始化所有特定於組件的屬性：在此代碼中，您設置了 `WebView` 的佈局，並定義了用於自定義 `WebView` 行為的 `WebClient`。在此代碼中，`ReactWebView` 通過實現 `WebClient` 的 `onPageFinished` 方法，在頁面加載完成時發出事件。"
      }
    },
    {
      "segment_id": "0427bb2b",
      "source_content": "The code then defines a helper function to actually emit an event. To emit an event, you have to:",
      "source_content_hash": "c89822c764a5c9882e605ae9c297b775f9945fa9c25a0b15af9c7da4c5f31bf1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "代碼隨後定義了一個輔助函數來實際發出事件。要發出事件，您需要："
      }
    },
    {
      "segment_id": "cfb24a7b",
      "source_content": "- grab a reference to the `ReactContext`;\n- retrieve the `surfaceId` of the view that you are presenting;\n- grab a reference to the `eventDispatcher` associated with the view;\n- build the payload for the event using a `WritableMap` object;\n- create the event object that you need to send to JavaScript;\n- call the `eventDispatcher.dispatchEvent` to send the event.",
      "source_content_hash": "0d24387fb639f7a3af24a656f15e8d83bb920059ec55bec498fe57a725cc90eb",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 獲取 `ReactContext` 的引用；\n- 檢索您正在呈現的視圖的 `surfaceId`；\n- 獲取與視圖關聯的 `eventDispatcher` 的引用；\n- 使用 `WritableMap` 對象構建事件的負載；\n- 創建需要發送到 JavaScript 的事件對象；\n- 調用 `eventDispatcher.dispatchEvent` 來發送事件。"
      }
    },
    {
      "segment_id": "f2c67ca5",
      "source_content": "The last part of the file contains the definition of the data types you need to send the event:",
      "source_content_hash": "c626b01e066cff2fecfa5181e684bb65ec47ded5717af6b3eb7460051c8475a4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "文件的最後部分包含發送事件所需的數據類型定義："
      }
    },
    {
      "segment_id": "3c3cd438",
      "source_content": "- The `OnScriptLoadedEventResult`, with the possible outcomes of the `OnScriptLoaded` event.\n- The actual `OnScriptLoadedEvent` that needs to extend the React Native's `Event` class.",
      "source_content_hash": "f66e807a2dfd2659b602e8060e37784446719ec7e3947920eaa85d5a6b9d1015",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `OnScriptLoadedEventResult`，包含 `OnScriptLoaded` 事件的可能結果。\n- 實際的 `OnScriptLoadedEvent`，需要繼承 React Native 的 `Event` 類。"
      }
    },
    {
      "segment_id": "e29294bd",
      "source_content": "### 3. Write the `WebViewManager`",
      "source_content_hash": "02d0b24e3a4037bf23e9b24f48942ed1f9f5c86e6e5ccf0b1488e84da72dc8aa",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 3. 編寫 `WebViewManager`"
      }
    },
    {
      "segment_id": "ebfad7e4",
      "source_content": "The `WebViewManager` is the class that connects the React Native runtime with the native view.",
      "source_content_hash": "8b49aadc53a1782e3cada0b9b523e5e25cd0097b525acb579b292fbaca86ddf1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`WebViewManager` 是連接 React Native 運行時與原生視圖的類。"
      }
    },
    {
      "segment_id": "7e563909",
      "source_content": "When React receives the instruction from the app to render a specific component, React uses the registered view manager to create the view and to pass all the required properties.",
      "source_content_hash": "318cc9001e088f25fc2de635111fea470a204c3ed6108f4ddb6271cfd1d17d50",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當 React 從應用程式接收到渲染特定組件的指令時，React 使用已註冊的視圖管理器來創建視圖並傳遞所有必需的屬性。"
      }
    },
    {
      "segment_id": "90c4b96b",
      "source_content": "This is the code of the `ReactWebViewManager`.",
      "source_content_hash": "ae73fb86bccf41279424a8e8f1a7947336a893481c972c2a188d02786f9307c9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "以下是 `ReactWebViewManager` 的代碼。"
      }
    },
    {
      "segment_id": "daa03ba9",
      "source_content": "<Tabs groupId=\"android-language\" queryString defaultValue={constants.defaultAndroidLanguage} values={constants.androidLanguages}>\n<TabItem value=\"java\">\n\n```java title=\"Demo/android/src/main/java/com/webview/ReactWebViewManager.java\"\npackage com.webview;\n\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.SimpleViewManager;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.ViewManagerDelegate;\nimport com.facebook.react.uimanager.annotations.ReactProp;\nimport com.facebook.react.viewmanagers.CustomWebViewManagerInterface;\nimport com.facebook.react.viewmanagers.CustomWebViewManagerDelegate;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@ReactModule(name = ReactWebViewManager.REACT_CLASS)\nclass ReactWebViewManager extends SimpleViewManager<ReactWebView> implements CustomWebViewManagerInterface<ReactWebView> {\n  private final CustomWebViewManagerDelegate<ReactWebView, ReactWebViewManager> delegate =\n          new CustomWebViewManagerDelegate<>(this);\n\n  @Override\n  public ViewManagerDelegate<ReactWebView> getDelegate() {\n    return delegate;\n  }\n\n  @Override\n  public String getName() {\n    return REACT_CLASS;\n  }\n\n  @Override\n  public ReactWebView createViewInstance(ThemedReactContext context) {\n    return new ReactWebView(context);\n  }\n\n  @ReactProp(name = \"sourceUrl\")\n  @Override\n  public void setSourceURL(ReactWebView view, String sourceURL) {\n    if (sourceURL == null) {\n      view.emitOnScriptLoaded(ReactWebView.OnScriptLoadedEventResult.error);\n      return;\n    }\n    view.loadUrl(sourceURL, new HashMap<>());\n  }\n\n  public static final String REACT_CLASS = \"CustomWebView\";\n\n  @Override\n  public Map<String, Object> getExportedCustomBubblingEventTypeConstants() {\n    Map<String, Object> map = new HashMap<>();\n    Map<String, Object> bubblingMap = new HashMap<>();\n    bubblingMap.put(\"phasedRegistrationNames\", new HashMap<String, String>() {{\n      put(\"bubbled\", \"onScriptLoaded\");\n      put(\"captured\", \"onScriptLoadedCapture\");\n    }});\n    map.put(\"onScriptLoaded\", bubblingMap);\n    return map;\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"kotlin\">\n\n```kotlin title=\"Demo/android/src/main/java/com/webview/ReactWebViewManager.kt\"\npackage com.webview\n\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.module.annotations.ReactModule;\nimport com.facebook.react.uimanager.SimpleViewManager;\nimport com.facebook.react.uimanager.ThemedReactContext;\nimport com.facebook.react.uimanager.ViewManagerDelegate;\nimport com.facebook.react.uimanager.annotations.ReactProp;\nimport com.facebook.react.viewmanagers.CustomWebViewManagerInterface;\nimport com.facebook.react.viewmanagers.CustomWebViewManagerDelegate;\n\n@ReactModule(name = ReactWebViewManager.REACT_CLASS)\nclass ReactWebViewManager(context: ReactApplicationContext) : SimpleViewManager<ReactWebView>(), CustomWebViewManagerInterface<ReactWebView> {\n  private val delegate: CustomWebViewManagerDelegate<ReactWebView, ReactWebViewManager> =\n    CustomWebViewManagerDelegate(this)\n\n  override fun getDelegate(): ViewManagerDelegate<ReactWebView> = delegate\n\n  override fun getName(): String = REACT_CLASS\n\n  override fun createViewInstance(context: ThemedReactContext): ReactWebView = ReactWebView(context)\n\n  @ReactProp(name = \"sourceUrl\")\n  override fun setSourceURL(view: ReactWebView, sourceURL: String?) {\n    if (sourceURL == null) {\n      view.emitOnScriptLoaded(ReactWebView.OnScriptLoadedEventResult.error)\n      return;\n    }\n    view.loadUrl(sourceURL, emptyMap())\n  }\n\n  companion object {\n    const val REACT_CLASS = \"CustomWebView\"\n  }\n\n  override fun getExportedCustomBubblingEventTypeConstants(): Map<String, Any> =\n      mapOf(\n          \"onScriptLoaded\" to\n              mapOf(\n                  \"phasedRegistrationNames\" to\n                      mapOf(\n                          \"bubbled\" to \"onScriptLoaded\",\n                          \"captured\" to \"onScriptLoadedCapture\"\n                      )))\n}\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "1320db7938bbf97a41e3e167755b7913f99316b0e8c9cbb62c315e1fe5d56fdc",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_daa03ba9"
      }
    },
    {
      "segment_id": "0974dfbb",
      "source_content": "The `ReactWebViewManager` extends the `SimpleViewManager` class from React and implements the `CustomWebViewManagerInterface`, generated by Codegen.",
      "source_content_hash": "3f521c70edff7fd46c89d420601915bd593f439bc9d36a54382c37f787c4a20f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`ReactWebViewManager` 繼承了 React 的 `SimpleViewManager` 類，並實現了由 Codegen 生成的 `CustomWebViewManagerInterface`。"
      }
    },
    {
      "segment_id": "a6c4ab41",
      "source_content": "It holds a reference of the `CustomWebViewManagerDelegate`, another element generated by Codegen.",
      "source_content_hash": "1639609a15118fca7638dbb9e3d5a47c1e44578c2529602aa2eb606dd253e410",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "它持有由 Codegen 生成的另一個元素 `CustomWebViewManagerDelegate` 的引用。"
      }
    },
    {
      "segment_id": "d6c9e4cd",
      "source_content": "It then overrides the `getName` function, which must return the same name used in the spec's `codegenNativeComponent` function call.",
      "source_content_hash": "01fb01ab58be2f53eb6c660a697cdca7f5076381a84b614eb3ef26d5a464a102",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "然後它覆寫了 `getName` 函數，該函數必須返回與 spec 中 `codegenNativeComponent` 函數調用所使用的相同名稱。"
      }
    },
    {
      "segment_id": "4443801b",
      "source_content": "The `createViewInstance` function is responsible to instantiate a new `ReactWebView`.",
      "source_content_hash": "bea8c3afa56907bcb73f3ff973e92bd2f726b7085a1737bf46fb69a11967b83f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`createViewInstance` 函數負責實例化一個新的 `ReactWebView`。"
      }
    },
    {
      "segment_id": "7441a9ec",
      "source_content": "Then, the ViewManager needs to define how all the React's components props will update the native view. In the example, you need to decide how to handle the `sourceURL` property that React will set on the `WebView`.",
      "source_content_hash": "ed4d67b5d0f4267e1d5228c39dcc35708f6d07aa7da97ca22ca88815a4eff251",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "接著，視圖管理器需要定義所有 React 組件屬性如何更新原生視圖。在示例中，您需要決定如何處理 React 將在 `WebView` 上設置的 `sourceURL` 屬性。"
      }
    },
    {
      "segment_id": "a30b7214",
      "source_content": "Finally, if the component can emit an event, you need to map the event name by overriding the `getExportedCustomBubblingEventTypeConstants` for bubbling events, or the `getExportedCustomDirectEventTypeConstants` for direct events.",
      "source_content_hash": "7ff7f743e83c53e26f72ef1c4e7bd9bffb26a26c5db2e388221de90a9d3a7925",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "最後，如果元件能夠觸發事件，您需要透過覆寫 `getExportedCustomBubblingEventTypeConstants`（針對冒泡事件）或 `getExportedCustomDirectEventTypeConstants`（針對直接事件）來映射事件名稱。"
      }
    },
    {
      "segment_id": "95ba516f",
      "source_content": "### 4. Write the `ReactWebViewPackage`",
      "source_content_hash": "c08bb2731355b65b6b37082780c88f14dede9a2e3c1e0bf37c9cb2e9b4c38146",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 4. 撰寫 `ReactWebViewPackage`"
      }
    },
    {
      "segment_id": "6c135b48",
      "source_content": "As you do with Native Modules, Native Components also need to implement the `ReactPackage` class. This is an object that you can use to register the component in the React Native runtime.",
      "source_content_hash": "13ee5d328ff78fcda3884c2af38f5edf0d8e6a43278298006a1461663df13106",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如同處理原生模組一樣，原生元件也需要實作 `ReactPackage` 類別。這個物件可用於在 React Native 運行時註冊元件。"
      }
    },
    {
      "segment_id": "f10c482a",
      "source_content": "This is the code for the `ReactWebViewPackage`:",
      "source_content_hash": "3a66784fc945b5cccb54ac50d2361da86fca50202263dd04e4e9103f4b0058bd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "以下是 `ReactWebViewPackage` 的程式碼："
      }
    },
    {
      "segment_id": "0b9170d8",
      "source_content": "<Tabs groupId=\"android-language\" queryString defaultValue={constants.defaultAndroidLanguage} values={constants.androidLanguages}>\n<TabItem value=\"java\">\n\n```java title=\"Demo/android/src/main/java/com/webview/ReactWebViewPackage.java\"\npackage com.webview;\n\nimport com.facebook.react.BaseReactPackage;\nimport com.facebook.react.bridge.NativeModule;\nimport com.facebook.react.bridge.ReactApplicationContext;\nimport com.facebook.react.module.model.ReactModuleInfo;\nimport com.facebook.react.module.model.ReactModuleInfoProvider;\nimport com.facebook.react.uimanager.ViewManager;\n\nimport java.util.Collections;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class ReactWebViewPackage extends BaseReactPackage {\n  @Override\n  public List<ViewManager<?, ?>> createViewManagers(ReactApplicationContext reactContext) {\n    return Collections.singletonList(new ReactWebViewManager(reactContext));\n  }\n\n  @Override\n  public NativeModule getModule(String s, ReactApplicationContext reactApplicationContext) {\n    if (ReactWebViewManager.REACT_CLASS.equals(s)) {\n      return new ReactWebViewManager(reactApplicationContext);\n    }\n    return null;\n  }\n\n  @Override\n  public ReactModuleInfoProvider getReactModuleInfoProvider() {\n    return new ReactModuleInfoProvider() {\n      @Override\n      public Map<String, ReactModuleInfo> getReactModuleInfos() {\n        Map<String, ReactModuleInfo> map = new HashMap<>();\n        map.put(ReactWebViewManager.REACT_CLASS, new ReactModuleInfo(\n                ReactWebViewManager.REACT_CLASS, // name\n                ReactWebViewManager.REACT_CLASS, // className\n                false,                           // canOverrideExistingModule\n                false,                           // needsEagerInit\n                false,                           // isCxxModule\n                true                             // isTurboModule\n        ));\n        return map;\n      }\n    };\n  }\n}\n```\n\n</TabItem>\n<TabItem value=\"kotlin\">\n\n```kotlin title=\"Demo/android/src/main/java/com/webview/ReactWebViewPackage.kt\"\npackage com.webview\n\nimport com.facebook.react.BaseReactPackage\nimport com.facebook.react.bridge.NativeModule\nimport com.facebook.react.bridge.ReactApplicationContext\nimport com.facebook.react.module.model.ReactModuleInfo\nimport com.facebook.react.module.model.ReactModuleInfoProvider\nimport com.facebook.react.uimanager.ViewManager\n\nclass ReactWebViewPackage : BaseReactPackage() {\n  override fun createViewManagers(reactContext: ReactApplicationContext): List<ViewManager<*, *>> {\n    return listOf(ReactWebViewManager(reactContext))\n  }\n\n  override fun getModule(s: String, reactApplicationContext: ReactApplicationContext): NativeModule? {\n    when (s) {\n      ReactWebViewManager.REACT_CLASS -> ReactWebViewManager(reactApplicationContext)\n    }\n    return null\n  }\n\n  override fun getReactModuleInfoProvider(): ReactModuleInfoProvider = ReactModuleInfoProvider {\n    mapOf(ReactWebViewManager.REACT_CLASS to ReactModuleInfo(\n      _name = ReactWebViewManager.REACT_CLASS,\n      _className = ReactWebViewManager.REACT_CLASS,\n      _canOverrideExistingModule = false,\n      _needsEagerInit = false,\n      isCxxModule = false,\n      isTurboModule = true,\n    )\n    )\n  }\n}\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "1f1aab81f1d5b20fd4a2599c9861223975bb8e027d6d20507712a48004db38ac",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_0b9170d8"
      }
    },
    {
      "segment_id": "e99b1eb5",
      "source_content": "The `ReactWebViewPackage` extends the `BaseReactPackage` and implements all the methods required to properly register our component.",
      "source_content_hash": "cc3073818f507fbd6941e010360ddb6c01a3f3420a09955da6315f302cea9700",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`ReactWebViewPackage` 繼承自 `BaseReactPackage` 並實作所有必要方法以正確註冊我們的元件。"
      }
    },
    {
      "segment_id": "2bb13531",
      "source_content": "- the `createViewManagers` method is the factory method that creates the `ViewManager` that manage the custom views.\n- the `getModule` method returns the proper ViewManager depending on the View that React Native needs to render.\n- the `getReactModuleInfoProvider` provides all the information required when registering the module in the runtime,",
      "source_content_hash": "0f0dffb699ad3b33cd689f817c23c948b216a074f831214d64e5f6812ef13012",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `createViewManagers` 方法是工廠方法，用於建立管理自訂視圖的 `ViewManager`。\n- `getModule` 方法會根據 React Native 需要渲染的視圖返回對應的 ViewManager。\n- `getReactModuleInfoProvider` 提供在運行時註冊模組所需的所有資訊。"
      }
    },
    {
      "segment_id": "c300008c",
      "source_content": "### 5. Register the `ReactWebViewPackage` in the application",
      "source_content_hash": "5f6c3c6f738d602108224fa66d23aa8e52907330fcadad7c3689ba9cc4509e68",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 5. 在應用程式中註冊 `ReactWebViewPackage`"
      }
    },
    {
      "segment_id": "fea3f437",
      "source_content": "Finally, you need to register the `ReactWebViewPackage` in the application. We do that by modifying the `MainApplication` file by adding the `ReactWebViewPackage` to the list of packages returned by the `getPackages` function.",
      "source_content_hash": "26872fbe35a61d6be90409d3a79748da816895023c33f68e65ea0fbb66ed8971",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "最後，您需要在應用程式中註冊 `ReactWebViewPackage`。我們透過修改 `MainApplication` 檔案來實現，將 `ReactWebViewPackage` 加入 `getPackages` 函數返回的套件清單中。"
      }
    },
    {
      "segment_id": "c9b3691d",
      "source_content": "```kotlin title=\"Demo/app/src/main/java/com/demo/MainApplication.kt\"\npackage com.demo\n\nimport android.app.Application\nimport com.facebook.react.PackageList\nimport com.facebook.react.ReactApplication\nimport com.facebook.react.ReactHost\nimport com.facebook.react.ReactNativeHost\nimport com.facebook.react.ReactPackage\nimport com.facebook.react.defaults.DefaultNewArchitectureEntryPoint.load\nimport com.facebook.react.defaults.DefaultReactHost.getDefaultReactHost\nimport com.facebook.react.defaults.DefaultReactNativeHost\nimport com.facebook.react.soloader.OpenSourceMergedSoMapping\nimport com.facebook.soloader.SoLoader\n// highlight-next-line\nimport com.webview.ReactWebViewPackage\n\nclass MainApplication : Application(), ReactApplication {\n\n  override val reactNativeHost: ReactNativeHost =\n      object : DefaultReactNativeHost(this) {\n        override fun getPackages(): List<ReactPackage> =\n            PackageList(this).packages.apply {\n              // highlight-next-line\n              add(ReactWebViewPackage())\n            }\n\n        override fun getJSMainModuleName(): String = \"index\"\n\n        override fun getUseDeveloperSupport(): Boolean = BuildConfig.DEBUG\n\n        override val isNewArchEnabled: Boolean = BuildConfig.IS_NEW_ARCHITECTURE_ENABLED\n        override val isHermesEnabled: Boolean = BuildConfig.IS_HERMES_ENABLED\n      }\n\n  override val reactHost: ReactHost\n    get() = getDefaultReactHost(applicationContext, reactNativeHost)\n\n  override fun onCreate() {\n    super.onCreate()\n    SoLoader.init(this, OpenSourceMergedSoMapping)\n    if (BuildConfig.IS_NEW_ARCHITECTURE_ENABLED) {\n      load()\n    }\n  }\n}\n\n```",
      "source_content_hash": "b2a456f0ae4ad0bc1b6090bd5899cd6a4dc8b6b32fae8dde5ff5b4b64de8d992",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_c9b3691d"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.79/fabric-native-components-android.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.787307+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "b869f4bdcbd853d687522fb7269664023fe7cdd7178276dca262763810c3acd8"
  }
}