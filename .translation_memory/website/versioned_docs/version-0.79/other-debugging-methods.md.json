{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.79/other-debugging-methods.md",
  "source_file_content_hash": "c1c1e91e9c90b150e997275f376eaeaf212872641bfdf8c0775f455e6e0c2589",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: other-debugging-methods\ntitle: Other Debugging Methods\n---",
      "source_content_hash": "a20d31d008f5e4b4a56ce9a3dbeff26747cd2399c3c4e8bd5df1d76d1157c46e",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4d1292be"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "This page covers how to use legacy JavaScript debugging methods. If you are getting started with a new React Native or Expo app, we recommend using [React Native DevTools](./react-native-devtools).",
      "source_content_hash": "02b97db60094bc805228e4c8535841b1fd1431157c673b764e93fa66c1517d89",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "本頁面涵蓋如何使用舊版 JavaScript 除錯方法。若您正在開始一個新的 React Native 或 Expo 應用程式，我們建議使用 [React Native DevTools](./react-native-devtools)。"
      }
    },
    {
      "segment_id": "1cc03ec8",
      "source_content": "## Safari Developer Tools (direct JSC debugging)",
      "source_content_hash": "f0a34babea72a16df7da9554cbfd7af5a1f4905eafed660c19d98f06475e9b9f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## Safari 開發者工具（直接 JSC 除錯）"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "You can use Safari to debug the iOS version of your app when using [JavaScriptCore](https://trac.webkit.org/wiki/JavaScriptCore) (JSC) as your app's runtime.",
      "source_content_hash": "97cb289664eace29676511bc27343136583ebbe997b79bbfb8a8265486e0b074",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當您的應用程式使用 [JavaScriptCore](https://trac.webkit.org/wiki/JavaScriptCore)（JSC）作為執行環境時，您可以使用 Safari 來除錯 iOS 版本的應用程式。"
      }
    },
    {
      "segment_id": "9e760345",
      "source_content": "1. **Physical devices only**: Open the Settings app, and navigate to Safari > Advanced, and make sure \"Web Inspector\" is turned on.\n2. On your Mac, open Safari and enable the Develop menu. This can be found under Safari > Settings..., then the Advanced tab, then selecting \"Show features for web developers\".\n3. Find your device under the Develop menu, and select the \"JSContext\" item from the submenu. This will open Safari's Web Inspector, which includes Console and Sources panels similar to Chrome DevTools.",
      "source_content_hash": "90fe67afe2c2f8484ed0f002269a27cab90557164553191520579769f9bf27bb",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "1. **僅限實體裝置**：開啟「設定」應用程式，導航至 Safari > 進階，並確保「網頁檢查器」已啟用。\n2. 在您的 Mac 上，開啟 Safari 並啟用「開發」選單。這可以在 Safari > 設定... 的「進階」標籤頁中找到，然後勾選「顯示網頁開發者功能」。\n3. 在「開發」選單中找到您的裝置，並從子選單中選擇「JSContext」項目。這將開啟 Safari 的網頁檢查器，其中包含與 Chrome DevTools 類似的「主控台」和「來源」面板。"
      }
    },
    {
      "segment_id": "39b3772c",
      "source_content": "![Opening Safari Web Inspector](/docs/assets/debugging-safari-developer-tools.jpg)",
      "source_content_hash": "a02ca99622dc977adae4042269406ea28185941ab816f311f8313372d02904f0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![開啟 Safari 網頁檢查器](/docs/assets/debugging-safari-developer-tools.jpg)"
      }
    },
    {
      "segment_id": "80e6256a",
      "source_content": ":::tip\nWhile source maps may not be enabled by default, you can follow [this guide](https://blog.nparashuram.com/2019/10/debugging-react-native-ios-apps-with.html) or [video](https://www.youtube.com/watch?v=GrGqIIz51k4) to enable them and set break points at the right places in the source code.\n:::",
      "source_content_hash": "bf9e2652be0c0ac58f721d16e0f66924f641a3b7f2203384d70fde5e9ff7f337",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::tip\n雖然原始碼對應（source maps）可能預設未啟用，但您可以參考[此指南](https://blog.nparashuram.com/2019/10/debugging-react-native-ios-apps-with.html)或[影片](https://www.youtube.com/watch?v=GrGqIIz51k4)來啟用它們，並在原始碼的正確位置設定中斷點。\n:::"
      }
    },
    {
      "segment_id": "6604338b",
      "source_content": ":::tip\nEvery time the app is reloaded, a new JSContext is created. Choosing \"Automatically Show Web Inspectors for JSContexts\" saves you from having to select the latest JSContext manually.\n:::",
      "source_content_hash": "b492a6557c091d2514bdbdd7800794812e06e93c01afcc07287a6c932b8794ee",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::tip\n每次應用程式重新載入時，都會建立一個新的 JSContext。選擇「自動顯示 JSContext 的網頁檢查器」可以避免手動選擇最新的 JSContext。\n:::"
      }
    },
    {
      "segment_id": "3c36424c",
      "source_content": "## Remote JavaScript Debugging (removed)",
      "source_content_hash": "f8a19f7dbcc632cd332a65ff1ca96c442a8bcfbbf9d2872b18e8765ce0604c41",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 遠端 JavaScript 除錯（已移除）"
      }
    },
    {
      "segment_id": "f79f5ed0",
      "source_content": ":::warning[Important]\nRemote JavaScript Debugging has been removed as of React Native 0.79. See the original [deprecation announcement](https://github.com/react-native-community/discussions-and-proposals/discussions/734).\n\nIf you are on an older version of React Native, please go to the docs [for your version](/versions).\n:::",
      "source_content_hash": "aede3977601bd0d912e796fe80b717426eb0591d22064b0eea7ef2118e89af9a",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::warning[重要]\n遠端 JavaScript 除錯功能已於 React Native 0.79 版本移除。請參閱原始的[棄用公告](https://github.com/react-native-community/discussions-and-proposals/discussions/734)。\n\n若您使用的是舊版 React Native，請前往[對應版本的文件](/versions)。\n:::"
      }
    },
    {
      "segment_id": "517051a7",
      "source_content": "![The remote debugger window in Chrome](/docs/assets/debugging-chrome-remote-debugger.jpg)",
      "source_content_hash": "bc03acf9676e80afb6f0b05a484a15b7884156e92a8e12847e6e6eba83be71b5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![Chrome 中的遠端除錯器視窗](/docs/assets/debugging-chrome-remote-debugger.jpg)"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.79/other-debugging-methods.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.864409+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "c1c1e91e9c90b150e997275f376eaeaf212872641bfdf8c0775f455e6e0c2589"
  }
}