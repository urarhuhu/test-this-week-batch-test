{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.79/build-speed.md",
  "source_file_content_hash": "e0a5067182cdd4c2382045ac138f73240ef42efd48d6a13a24dafd966318197c",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: build-speed\ntitle: Speeding up your Build phase\n---",
      "source_content_hash": "dc5c6f51270d4ac3762b7aea50405316394ac220442b05f5eeee2052c6ce0f07",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "Building your React Native app could be **expensive** and take several minutes of developers time.\nThis can be problematic as your project grows and generally in bigger organizations with multiple React Native developers.",
      "source_content_hash": "085542a71122c099fabd23e5f42b7efeb68526cdad512b2b9faf3de0c7d308b2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "建構 React Native 應用程式可能**相當耗時**，會佔用開發者數分鐘的時間。隨著專案規模擴大，特別是在擁有多位 React Native 開發者的大型組織中，這個問題會更加明顯。"
      }
    },
    {
      "segment_id": "53eaf0e1",
      "source_content": "To mitigate this performance hit, this page shares some suggestions on how to **improve your build time**.",
      "source_content_hash": "d409df97c191d1f24c3310eb511daa4549e6ece16e8ed30e35379cf55134b524",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "為緩解效能衝擊，本頁面提供數項**加速建構時間**的進階建議。"
      }
    },
    {
      "segment_id": "bb849aa9",
      "source_content": ":::info\n\nPlease note that those suggestions are advanced feature that requires some amount of understanding of how the native build tools work.\n\n:::",
      "source_content_hash": "8ebe69746a8d50f23fa786f456a401dc0a663bfaf575b24cc1596ccef6130ff3",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::info\n\n請注意，這些建議屬於進階功能，需要對原生建構工具運作方式有一定程度的理解。\n\n:::"
      }
    },
    {
      "segment_id": "3daf1b88",
      "source_content": "## Build only one ABI during development (Android-only)",
      "source_content_hash": "f2cf18cbdc1be154b7c7a7b8b1226de0f35aaf7dc11cff16e4d44ae36093b24b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 開發期間僅建構單一 ABI（僅限 Android）"
      }
    },
    {
      "segment_id": "f6168993",
      "source_content": "When building your android app locally, by default you build all the 4 [Application Binary Interfaces (ABIs)](https://developer.android.com/ndk/guides/abis) : `armeabi-v7a`, `arm64-v8a`, `x86` & `x86_64`.",
      "source_content_hash": "e38047a6f89d8202aae9c5fba101a6053938432e10f9e7a1d504091813a8b58c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "本地建構 Android 應用時，預設會建構所有 4 種[應用程式二進位介面 (ABI)](https://developer.android.com/ndk/guides/abis)：`armeabi-v7a`、`arm64-v8a`、`x86` 和 `x86_64`。"
      }
    },
    {
      "segment_id": "f5f6d2ce",
      "source_content": "However, you probably don't need to build all of them if you're building locally and testing your emulator or on a physical device.",
      "source_content_hash": "8824f226392a2c387fb5a8c194efc170b5d07960a38ae2b7e15313759509d985",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "但若僅在本地建構並於模擬器或實體裝置測試，通常無需建構全部 ABI。"
      }
    },
    {
      "segment_id": "2fdadb08",
      "source_content": "This should reduce your **native build time** by a ~75% factor.",
      "source_content_hash": "a87e4c19ccca0116c86cf1cf27005aa035d641d7bb46045e6ac62b751a513537",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此舉可將**原生建構時間**縮短約 75%。"
      }
    },
    {
      "segment_id": "f2c2bdd0",
      "source_content": "If you're using the React Native CLI, you can add the `--active-arch-only` flag to the `run-android` command. This flag will make sure the correct ABI is picked up from either the running emulator or the plugged in phone. To confirm that this approach is working fine, you'll see a message like `info Detected architectures arm64-v8a` on console.",
      "source_content_hash": "c9ef589218a98e990170439d107e66095d7ad92127b60afa84fadced16566e44",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若使用 React Native CLI，可在 `run-android` 指令加入 `--active-arch-only` 旗標。此旗標會自動從運行中的模擬器或連接的手機取得正確 ABI。確認此機制運作正常時，控制台會顯示如 `info Detected architectures arm64-v8a` 的訊息。"
      }
    },
    {
      "segment_id": "08021a08",
      "source_content": "```\n$ yarn react-native run-android --active-arch-only\n\n[ ... ]\ninfo Running jetifier to migrate libraries to AndroidX. You can disable it using \"--no-jetifier\" flag.\nJetifier found 1037 file(s) to forward-jetify. Using 32 workers...\ninfo JS server already running.\ninfo Detected architectures arm64-v8a\ninfo Installing the app...\n```",
      "source_content_hash": "89aa9e583027faa6f091b3d2426edf5777f4911f9459423b3a4421ceea35f358",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_08021a08"
      }
    },
    {
      "segment_id": "135468ee",
      "source_content": "This mechanism relies on the `reactNativeArchitectures` Gradle property.",
      "source_content_hash": "1bfe1f21a9eed015bf9ac0f81de1c2c7e56d329d2bc733b7a631d30038eff331",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此機制依賴 `reactNativeArchitectures` Gradle 屬性。"
      }
    },
    {
      "segment_id": "33331f27",
      "source_content": "Therefore, if you're building directly with Gradle from the command line and without the CLI, you can specify the ABI you want to build as follows:",
      "source_content_hash": "850fadae7cd69709a08ea0a6f4e73170ed8cd362e12b2fc562358149a7cd836a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "因此若直接透過命令列使用 Gradle 建構（不使用 CLI），可透過以下方式指定要建構的 ABI："
      }
    },
    {
      "segment_id": "026f2f3e",
      "source_content": "```\n$ ./gradlew :app:assembleDebug -PreactNativeArchitectures=x86,x86_64\n```",
      "source_content_hash": "1bee901d66b4d89a7115531786b4e7303bfd15db75312a87cfe8a4e826be3531",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_026f2f3e"
      }
    },
    {
      "segment_id": "8af76f3d",
      "source_content": "This can be useful if you wish to build your Android App on a CI and use a matrix to parallelize the build of the different architectures.",
      "source_content_hash": "8c457877fcdab66293e1581c30eea9ce7693e5ec9cab56e4d94539cacdfc9510",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此方式適用於在 CI 上建構 Android 應用時，透過矩陣平行化不同架構的建構程序。"
      }
    },
    {
      "segment_id": "a9d49f92",
      "source_content": "If you wish, you can also override this value locally, using the `gradle.properties` file you have in the [top-level folder](https://github.com/facebook/react-native/blob/19cf70266eb8ca151aa0cc46ac4c09cb987b2ceb/template/android/gradle.properties#L30-L33) of your project:",
      "source_content_hash": "2be180c7667d50dacab59fd3306b03b129f503a3313aac5c9958b174b0343184",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "亦可選擇在本機透過專案[頂層目錄](https://github.com/facebook/react-native/blob/19cf70266eb8ca151aa0cc46ac4c09cb987b2ceb/template/android/gradle.properties#L30-L33)的 `gradle.properties` 檔案覆寫此值："
      }
    },
    {
      "segment_id": "95318d95",
      "source_content": "```\n# Use this property to specify which architecture you want to build.\n# You can also override it from the CLI using\n# ./gradlew <task> -PreactNativeArchitectures=x86_64\nreactNativeArchitectures=armeabi-v7a,arm64-v8a,x86,x86_64\n```",
      "source_content_hash": "ba3105c374a641a2580a2d7474fc6d127de0aef9504498ec6c53b3de6f8fb6f3",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_95318d95"
      }
    },
    {
      "segment_id": "4d52a261",
      "source_content": "Once you build a **release version** of your app, don't forget to remove those flags as you want to build an apk/app bundle that works for all the ABIs and not only for the one you're using in your daily development workflow.",
      "source_content_hash": "d427ca1dcb10d49496f38f5272b542432dddf8ef910c5ec4330a72472cf3cfed",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "建構**正式版**應用時，請務必移除這些旗標，以確保產出的 apk/app bundle 支援所有 ABI，而非僅限日常開發使用的單一架構。"
      }
    },
    {
      "segment_id": "7283cdac",
      "source_content": "## Enable Configuration Caching (Android-only)",
      "source_content_hash": "5ccc61d9f43308a0bfe6e0ebef0f8e70652f73c2e6716998b3064d1e234d408e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 啟用組態快取（僅限 Android）"
      }
    },
    {
      "segment_id": "1131ef75",
      "source_content": "Since React Native 0.79, you can also enable Gradle Configuration Caching.",
      "source_content_hash": "b07f6e018d216a31bfe3cdc6bb5b1cf5e59fa3daa6f3aef431a6173a54e7ab33",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "自 React Native 0.79 起，可啟用 Gradle 組態快取功能。"
      }
    },
    {
      "segment_id": "8b2a52b1",
      "source_content": "When you’re running an Android build with `yarn android`, you will be executing a Gradle build that is composed by two steps ([source](https://docs.gradle.org/current/userguide/build_lifecycle.html)):",
      "source_content_hash": "7b3aa39cf995e2682371d55dcac1802baa28d5615fd2bb409f8713e6030e9303",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "執行 `yarn android` 進行 Android 建構時，Gradle 建構流程包含兩個階段（[來源](https://docs.gradle.org/current/userguide/build_lifecycle.html)）："
      }
    },
    {
      "segment_id": "35f6931b",
      "source_content": "- Configuration phase, when all the `.gradle` files are evaluated.\n- Execution phase, when the tasks are actually executed so the Java/Kotlin code is compiled and so on.",
      "source_content_hash": "f40ae0850fd7582c39acda1a9e43fa7ad3041a0aa3562a68b458b976c69bf765",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 組態階段：評估所有 `.gradle` 檔案\n- 執行階段：實際執行任務（如編譯 Java/Kotlin 程式碼等）"
      }
    },
    {
      "segment_id": "06e24cc0",
      "source_content": "You will now be able to enable Configuration Caching, which will allow you to skip the Configuration phase on subsequent builds.",
      "source_content_hash": "00c194dcd3d8ec03abac182ec0ffbd14344e9705d7fa17edf351f5942c14e026",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "啟用組態快取後，後續建構將跳過組態階段。"
      }
    },
    {
      "segment_id": "7f71ff2a",
      "source_content": "This is beneficial when making frequent changes to the native code as it improves build times.",
      "source_content_hash": "b53d223ce3cf7b307872e715176e06da30e55219a115e5b628f82ed9504443b6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此功能對於頻繁修改原生程式碼的情境特別有益，可顯著提升建構速度。"
      }
    },
    {
      "segment_id": "147e8550",
      "source_content": "For example here you can see how rebuilding faster it is to rebuild RN-Tester after a change in the native code:",
      "source_content_hash": "eacf66efafe9fdabe44db5d8b3e3c598b4fb39d32c13f8e30a8b28592b388227",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "例如下圖展示啟用後，修改 RN-Tester 原生程式碼後的重建速度差異："
      }
    },
    {
      "segment_id": "883231d4",
      "source_content": "![gradle config caching](/docs/assets/gradle-config-caching.gif)",
      "source_content_hash": "a17a5918a5f92e489558bb22da48cc31c11132e701b117218e2c8ffc185019ae",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![gradle 組態快取](/docs/assets/gradle-config-caching.gif)"
      }
    },
    {
      "segment_id": "6cc549f2",
      "source_content": "You can enable Gradle Configuration Caching by adding the following line in your `android/gradle.properties` file:",
      "source_content_hash": "4fd22aec2cedd2b44a351b16642196584adb26143b05a989bb234cafd17a6065",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在 `android/gradle.properties` 檔案加入以下內容即可啟用 Gradle 組態快取："
      }
    },
    {
      "segment_id": "8a9e710a",
      "source_content": "```\norg.gradle.configuration-cache=true\n```",
      "source_content_hash": "83dfb68202963a38a8a662d99f69b060ecd37077cd318b52a8e8549e11216732",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_8a9e710a"
      }
    },
    {
      "segment_id": "6270d577",
      "source_content": "Please refer to the [official Gradle documentation](https://docs.gradle.org/current/userguide/configuration_cache.html) for more resources on Configuration Caching.",
      "source_content_hash": "f2206636cea4b30653fb1212f9f99c5a0ddf3e21c9e4d164718c68fccfb0118f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "詳細說明請參閱 [Gradle 官方文件](https://docs.gradle.org/current/userguide/configuration_cache.html)。"
      }
    },
    {
      "segment_id": "a4bf4268",
      "source_content": "## Use a compiler cache",
      "source_content_hash": "9516c344edb6b800c2dd55e2974eb63ea157aa5f6b1ee9ed182fe8df17a1c6f3",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 使用編譯器快取"
      }
    },
    {
      "segment_id": "ec619944",
      "source_content": "If you're running frequent native builds (either C++ or Objective-C), you might benefit from using a **compiler cache**.",
      "source_content_hash": "c4aa7443008470a9075a7086fd626b8484d771e48556465118d21f0aff7b4a2b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果您頻繁執行原生建置（無論是 C++ 或 Objective-C），使用**編譯器快取**可能會帶來效益。"
      }
    },
    {
      "segment_id": "2547a6bb",
      "source_content": "Specifically you can use two type of caches: local compiler caches and distributed compiler caches.",
      "source_content_hash": "da9089319cd250309d2e36391cd838d7a91f4fa9fce54ac244d6d330c52ec46f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "具體而言，您可以使用兩種類型的快取：本地編譯器快取和分散式編譯器快取。"
      }
    },
    {
      "segment_id": "90d35b51",
      "source_content": "### Local caches",
      "source_content_hash": "75a67473c36537ccc703ecce66c36e04849cf8fb09555a0553082f4fc73ac829",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 本地快取"
      }
    },
    {
      "segment_id": "e5f21fd3",
      "source_content": ":::info\nThe following instructions will work for **both Android & iOS**.\nIf you're building only Android apps, you should be good to go.\nIf you're building also iOS apps, please follow the instructions in the [XCode Specific Setup](#xcode-specific-setup) section below.\n:::",
      "source_content_hash": "f85a329ed6d3a5955ec894bab65db6f97430aefa187d880690a4bb7009da608d",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::info\n以下說明適用於**Android 和 iOS**。\n若您僅建置 Android 應用程式，可直接遵循這些步驟。\n若同時建置 iOS 應用程式，請參閱下方的 [XCode 特定設定](#xcode-specific-setup)章節。\n:::"
      }
    },
    {
      "segment_id": "eb51d107",
      "source_content": "We suggest to use [**ccache**](https://ccache.dev/) to cache the compilation of your native builds.\nCcache works by wrapping the C++ compilers, storing the compilation results, and skipping the compilation\nif an intermediate compilation result was originally stored.",
      "source_content_hash": "97494a16a6ce8f42f9c0dd1ada04879ddd9b2e4913fb66a22ff7ab8c60ef4a9a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們建議使用 [**ccache**](https://ccache.dev/) 來快取原生建置的編譯結果。\nCcache 的工作原理是封裝 C++ 編譯器，儲存編譯結果，並在檢測到先前儲存的中間編譯結果時跳過重新編譯。"
      }
    },
    {
      "segment_id": "6ca4479f",
      "source_content": "Ccache is available in the package manager for most operating systems. On macOS, we can install ccache with `brew install ccache`.\nOr you can follow the [official installation instructions](https://github.com/ccache/ccache/blob/master/doc/INSTALL.md) to install from source.",
      "source_content_hash": "8a78aedb0a353a5b9d34e4b0936a67681d11da988ec237988b732cb74b3672ee",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Ccache 可透過多數作業系統的套件管理器取得。在 macOS 上，可透過 `brew install ccache` 安裝。或參閱 [官方安裝指南](https://github.com/ccache/ccache/blob/master/doc/INSTALL.md) 從原始碼編譯安裝。"
      }
    },
    {
      "segment_id": "2838eb68",
      "source_content": "You can then do two clean builds (e.g. on Android you can first run `yarn react-native run-android`, delete the `android/app/build` folder and run the first command once more). You will notice that the second build was way faster than the first one (it should take seconds rather than minutes).\nWhile building, you can verify that `ccache` works correctly and check the cache hits/miss rate `ccache -s`",
      "source_content_hash": "e5e04d8991fd2fc71b42b79e5fcbd7062af81aea5c8bf10cd311b9e4fc307afe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "接著可執行兩次完整建置（例如在 Android 上先執行 `yarn react-native run-android`，刪除 `android/app/build` 資料夾後再次執行）。您會發現第二次建置速度大幅提升（應僅需數秒而非數分鐘）。建置過程中可透過 `ccache -s` 驗證快取命中率。"
      }
    },
    {
      "segment_id": "c4c0fc07",
      "source_content": "```\n$ ccache -s\nSummary:\n  Hits:             196 /  3068 (6.39 %)\n    Direct:           0 /  3068 (0.00 %)\n    Preprocessed:   196 /  3068 (6.39 %)\n  Misses:          2872\n    Direct:        3068\n    Preprocessed:  2872\n  Uncacheable:        1\nPrimary storage:\n  Hits:             196 /  6136 (3.19 %)\n  Misses:          5940\n  Cache size (GB): 0.60 / 20.00 (3.00 %)\n```",
      "source_content_hash": "7948a85d967b4a28eb0d2997e11f5d796952d7ee162625725b30292219eb18ae",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_c4c0fc07"
      }
    },
    {
      "segment_id": "f38d1cb0",
      "source_content": "Note that `ccache` aggregates the stats over all builds. You can use `ccache --zero-stats` to reset them before a build to verify the cache-hit ratio.",
      "source_content_hash": "52174c345c8ceaeb40c5538bd32198584754d6a916169be93e69f479e08a7077",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "注意：`ccache` 會累積所有建置的統計數據。可使用 `ccache --zero-stats` 在建置前重置數據以準確測量快取命中率。"
      }
    },
    {
      "segment_id": "5f82a1e9",
      "source_content": "Should you need to wipe your cache, you can do so with `ccache --clear`",
      "source_content_hash": "8fe3c6b9b611feebe3532d6f309a910af7b0236354ef547cd9145461475cd5e0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如需清除快取，請執行 `ccache --clear`"
      }
    },
    {
      "segment_id": "36d6c3de",
      "source_content": "#### XCode Specific Setup",
      "source_content_hash": "770cb6ebf07cf1a6ebbaabf05585f7302017423e815a23826edcfbefe659d276",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### XCode 特定設定"
      }
    },
    {
      "segment_id": "c364340c",
      "source_content": "To make sure `ccache` works correctly with iOS and XCode, you need to enable React Native support for ccache in `ios/Podfile`.",
      "source_content_hash": "0b6bbc8beb0e66e062b564b1808c5e85c4b052d928adc22897404f139a241c8a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "要讓 `ccache` 在 iOS 和 XCode 環境正常運作，需在 `ios/Podfile` 中啟用 React Native 對 ccache 的支援。"
      }
    },
    {
      "segment_id": "f45239ba",
      "source_content": "Open `ios/Podfile` in your editor and uncomment the `ccache_enabled` line.",
      "source_content_hash": "bd566ac17f31ce2a1d7f479648e6eff9593bda81d728afd1a61f981fb2c9a1d2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "用編輯器開啟 `ios/Podfile` 並取消註解 `ccache_enabled` 設定行。"
      }
    },
    {
      "segment_id": "136818ce",
      "source_content": "```ruby\n  post_install do |installer|\n    # https://github.com/facebook/react-native/blob/main/packages/react-native/scripts/react_native_pods.rb#L197-L202\n    react_native_post_install(\n      installer,\n      config[:reactNativePath],\n      :mac_catalyst_enabled => false,\n      # TODO: Uncomment the line below\n      :ccache_enabled => true\n    )\n  end\n```",
      "source_content_hash": "1a22a74f8ad3f5438703bf8ff2be3f6b8c6fa7d69a986fdc9d98be2a9e8d7846",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_136818ce"
      }
    },
    {
      "segment_id": "a0d0e29e",
      "source_content": "#### Using this approach on a CI",
      "source_content_hash": "686feb6fee874400ab696579f5f96b0b7ff569db86403ca2febc54191d139ee0",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### 在 CI 環境使用此方法"
      }
    },
    {
      "segment_id": "be17ccc3",
      "source_content": "Ccache uses the `/Users/$USER/Library/Caches/ccache` folder on macOS to store the cache.\nTherefore you could save & restore the corresponding folder also on CI to speedup your builds.",
      "source_content_hash": "0a4c976cba47d92b0d4b43d16294c9c044eaccaf4b6f5af9a1ac4d6b9d0c5004",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "Ccache 在 macOS 上預設將快取儲存於 `/Users/$USER/Library/Caches/ccache` 目錄。因此可在 CI 環境保存與還原此目錄以加速建置。"
      }
    },
    {
      "segment_id": "719d3997",
      "source_content": "However, there are a couple of things to be aware:",
      "source_content_hash": "ef1fff3f61847caf7b59bf5b280cb08f53fcf7fbb52edb52ebb1d0776c789896",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "但需注意以下事項："
      }
    },
    {
      "segment_id": "3670cec0",
      "source_content": "1. On CI, we recommend to do a full clean build, to avoid poisoned cache problems. If you follow the approach mentioned in the previous paragraph, you should be able to parallelize the native build on 4 different ABIs and you will most likely not need `ccache` on CI.\n\n2. `ccache` relies on timestamps to compute a cache hit. This doesn't work well on CI as files are re-downloaded at every CI run. To overcome this, you'll need to use the `compiler_check content` option which relies instead on [hashing the content of the file](https://ccache.dev/manual/4.3.html).",
      "source_content_hash": "2a921ebaff43e1de6849872861ddf8429cc67eaff3876774221c467d4f1e15a8",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "1. 在 CI 環境建議執行完整乾淨建置，避免快取污染問題。若採用前述多 ABI 平行建置方法，通常不需在 CI 使用 `ccache`。\n\n2. `ccache` 依賴時間戳記判斷快取命中，這在 CI 環境效果不佳（因檔案每次都會重新下載）。解決方法是啟用 `compiler_check content` 選項，改為 [對檔案內容進行雜湊驗證](https://ccache.dev/manual/4.3.html)。"
      }
    },
    {
      "segment_id": "97afbaf0",
      "source_content": "### Distributed caches",
      "source_content_hash": "a71572ffef70e67e357ce1d84dcf5df5c64b0e48049bdd114425e33200542be1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 分散式快取"
      }
    },
    {
      "segment_id": "a8f09c71",
      "source_content": "Similar to local caches, you might want to consider using a distributed cache for your native builds.\nThis could be specifically useful in bigger organizations that are doing frequent native builds.",
      "source_content_hash": "40a46711cd22c96d154ebd9ab7b7384634499d1e46841e76bcfbb2f77f897667",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "類似本地快取的概念，對於頻繁執行原生建置的大型組織，可考慮使用分散式快取系統。"
      }
    },
    {
      "segment_id": "6f08f877",
      "source_content": "We recommend to use [sccache](https://github.com/mozilla/sccache) to achieve this.\nWe defer to the sccache [distributed compilation quickstart](https://github.com/mozilla/sccache/blob/main/docs/DistributedQuickstart.md) for instructions on how to setup and use this tool.",
      "source_content_hash": "934ebdf0af8557af6b234b126abd9fbe09df30b7101acb99c6d759f93357f0fb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們推薦使用 [sccache](https://github.com/mozilla/sccache) 實現此目的。具體設定方法請參閱 sccache 的 [分散式編譯快速入門指南](https://github.com/mozilla/sccache/blob/main/docs/DistributedQuickstart.md)。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.79/build-speed.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.745807+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "e0a5067182cdd4c2382045ac138f73240ef42efd48d6a13a24dafd966318197c"
  }
}