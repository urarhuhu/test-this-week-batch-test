{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.79/height-and-width.md",
  "source_file_content_hash": "af14bfb57ce2b317e5fced676c62996f6630a1753f749b01be7612cfbe181c72",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: height-and-width\ntitle: Height and Width\n---",
      "source_content_hash": "1fbbd58868085abdc215e7dd104742db04f35e3f68c6c68a1ff7efaa532b092e",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "A component's height and width determine its size on the screen.",
      "source_content_hash": "d9b14ab9b1620800663572b09bd5b91499df92f7092b95acb43673ab898ffa34",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "元件的高度和寬度決定了它在螢幕上的大小。"
      }
    },
    {
      "segment_id": "cc3c868d",
      "source_content": "## Fixed Dimensions",
      "source_content_hash": "25a82014765070a441a99b3fbd383058d92f457fcca280b824e3d7c4a214d2ad",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 固定尺寸"
      }
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "The general way to set the dimensions of a component is by adding a fixed `width` and `height` to style. All dimensions in React Native are unitless, and represent density-independent pixels.",
      "source_content_hash": "ebe42ae794bcb1221711b44cad18b9a043aad13b5d8b5486635aa4acf648dda2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "設定元件尺寸的通用方法是透過在樣式中添加固定的 `width` 和 `height`。React Native 中的所有尺寸都是無單位的，代表與螢幕密度無關的像素。"
      }
    },
    {
      "segment_id": "ee201347",
      "source_content": "```SnackPlayer name=Height%20and%20Width\nimport React from 'react';\nimport {View} from 'react-native';\n\nconst FixedDimensionsBasics = () => {\n  return (\n    <View>\n      <View\n        style={{\n          width: 50,\n          height: 50,\n          backgroundColor: 'powderblue',\n        }}\n      />\n      <View\n        style={{\n          width: 100,\n          height: 100,\n          backgroundColor: 'skyblue',\n        }}\n      />\n      <View\n        style={{\n          width: 150,\n          height: 150,\n          backgroundColor: 'steelblue',\n        }}\n      />\n    </View>\n  );\n};\n\nexport default FixedDimensionsBasics;\n```",
      "source_content_hash": "ce1887aeaae1ebc487ea1c7216d3049ed555c17abace2feb2d8cb84a32590b68",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_ee201347"
      }
    },
    {
      "segment_id": "13d9cd70",
      "source_content": "Setting dimensions this way is common for components whose size should always be fixed to a number of points and not calculated based on screen size.",
      "source_content_hash": "3c648ef1b1989cf47a39727dc6b1dd4c4b45dee50b499012d64def6d7707e556",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這種設定尺寸的方式適用於那些大小應始終固定為特定點數，而不是根據螢幕大小計算的元件。"
      }
    },
    {
      "segment_id": "5a149cd3",
      "source_content": ":::caution\nThere is no universal mapping from points to physical units of measurement. This means that a component with fixed dimensions might not have the same physical size, across different devices and screen sizes. However, this difference is unnoticeable for most use cases.\n:::",
      "source_content_hash": "dd217630cea2e36e12b18bdd558292caaa66dcd67b4eed0f6e2520a02dbe69e6",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::caution\n點數與實際測量單位之間沒有通用的映射關係。這意味著具有固定尺寸的元件在不同設備和螢幕大小上可能不會具有相同的物理大小。然而，對於大多數使用情況來說，這種差異是難以察覺的。\n:::"
      }
    },
    {
      "segment_id": "c6cc90a0",
      "source_content": "## Flex Dimensions",
      "source_content_hash": "dfc8882d39d5cd1d06f8bc59a97d94fc544e7bf5392a0b1f724a14d591f3ff64",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 彈性尺寸"
      }
    },
    {
      "segment_id": "d3649a1e",
      "source_content": "Use `flex` in a component's style to have the component expand and shrink dynamically based on available space. Normally you will use `flex: 1`, which tells a component to fill all available space, shared evenly amongst other components with the same parent. The larger the `flex` given, the higher the ratio of space a component will take compared to its siblings.",
      "source_content_hash": "250443036f6e10179e5a4ec60ef1a65243d071b373658b99eb0e21de994a0e61",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在元件的樣式中使用 `flex` 可以讓元件根據可用空間動態擴展和收縮。通常你會使用 `flex: 1`，這會告訴元件填滿所有可用空間，並與具有相同父元件的其他元件均勻共享空間。`flex` 值越大，元件相對於其兄弟元件所佔的空間比例就越高。"
      }
    },
    {
      "segment_id": "0bfbe139",
      "source_content": ":::info\nA component can only expand to fill available space if its parent has dimensions greater than `0`. If a parent does not have either a fixed `width` and `height` or `flex`, the parent will have dimensions of `0` and the `flex` children will not be visible.\n:::",
      "source_content_hash": "dc23abd126a0a97c28c96743b75effa329914c96a3ec047695a7f30c03fc01bf",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::info\n只有當父元件的尺寸大於 `0` 時，元件才能擴展以填滿可用空間。如果父元件沒有固定的 `width` 和 `height` 或 `flex`，父元件的尺寸將為 `0`，而 `flex` 子元件將不可見。\n:::"
      }
    },
    {
      "segment_id": "c05ad55e",
      "source_content": "```SnackPlayer name=Flex%20Dimensions\nimport React from 'react';\nimport {View} from 'react-native';\n\nconst FlexDimensionsBasics = () => {\n  return (\n    // Try removing the `flex: 1` on the parent View.\n    // The parent will not have dimensions, so the children can't expand.\n    // What if you add `height: 300` instead of `flex: 1`?\n    <View style={{flex: 1}}>\n      <View style={{flex: 1, backgroundColor: 'powderblue'}} />\n      <View style={{flex: 2, backgroundColor: 'skyblue'}} />\n      <View style={{flex: 3, backgroundColor: 'steelblue'}} />\n    </View>\n  );\n};\n\nexport default FlexDimensionsBasics;\n```",
      "source_content_hash": "fe2e8cb4188838fc5669f4b4521c30c63ebaaea38f2aecbafe622be8c7a24e60",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_c05ad55e"
      }
    },
    {
      "segment_id": "463ed165",
      "source_content": "After you can control a component's size, the next step is to [learn how to lay it out on the screen](flexbox.md).",
      "source_content_hash": "1c7a39d9352ac7063ff8a1e8c8c4e7954a7df4abb1dee5a9b9dd2ad99d501e76",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在你能控制元件的大小之後，下一步是[學習如何在螢幕上佈局](flexbox.md)。"
      }
    },
    {
      "segment_id": "66819c78",
      "source_content": "## Percentage Dimensions",
      "source_content_hash": "2f200cfa71d8556420c45e6dfb675b1c7c555cd50e47726819e47378933441f3",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 百分比尺寸"
      }
    },
    {
      "segment_id": "fbc2db85",
      "source_content": "If you want to fill a certain portion of the screen, but you _don't_ want to use the `flex` layout, you _can_ use **percentage values** in the component's style. Similar to flex dimensions, percentage dimensions require parent with a defined size.",
      "source_content_hash": "f4ba4d14d49c760b5d0cb16ce06acd243567fb462a4b0962985f2ec377f0eacf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果你想填滿螢幕的某一部分，但_不想_使用 `flex` 佈局，你_可以_在元件的樣式中使用**百分比值**。與彈性尺寸類似，百分比尺寸需要父元件有定義的大小。"
      }
    },
    {
      "segment_id": "b73a4a7a",
      "source_content": "```SnackPlayer name=Percentage%20Dimensions\nimport React from 'react';\nimport {View} from 'react-native';\n\nconst PercentageDimensionsBasics = () => {\n  // Try removing the `height: '100%'` on the parent View.\n  // The parent will not have dimensions, so the children can't expand.\n  return (\n    <View style={{height: '100%'}}>\n      <View\n        style={{\n          height: '15%',\n          backgroundColor: 'powderblue',\n        }}\n      />\n      <View\n        style={{\n          width: '66%',\n          height: '35%',\n          backgroundColor: 'skyblue',\n        }}\n      />\n      <View\n        style={{\n          width: '33%',\n          height: '50%',\n          backgroundColor: 'steelblue',\n        }}\n      />\n    </View>\n  );\n};\n\nexport default PercentageDimensionsBasics;\n```",
      "source_content_hash": "afe03dd618ab068cea62f51603b6b525e74472d81ab908daf419ad48e97274a4",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_b73a4a7a"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.79/height-and-width.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.722053+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "af14bfb57ce2b317e5fced676c62996f6630a1753f749b01be7612cfbe181c72"
  }
}