{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.73/security.md",
  "source_file_content_hash": "0d6b291a53004aa2e0f518f58066df900fc198e24851e7d3ae448c167bc44651",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: security\ntitle: Security\n---",
      "source_content_hash": "5d2ccdb25a87d11ee94d4c67da18f1ae4816ae4751c3b7c072eefb4c3279d2d3",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4d1292be"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "Security is often overlooked when building apps. It is true that it is impossible to build software that is completely impenetrable—we’ve yet to invent a completely impenetrable lock (bank vaults do, after all, still get broken into). However, the probability of falling victim to a malicious attack or being exposed for a security vulnerability is inversely proportional to the effort you’re willing to put in to protecting your application against any such eventuality. Although an ordinary padlock is pickable, it is still much harder to get past than a cabinet hook!",
      "source_content_hash": "df0d98b0008b9e15405463c7a0c85dd7dda117b4e66d740164039ea411e23343",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在構建應用程式時，安全性往往被忽視。雖然確實無法打造完全無法攻破的軟體——畢竟我們至今仍未發明完全無法破解的鎖（銀行的保險庫終究還是會被闖入）。但遭受惡意攻擊或因安全漏洞而暴露的機率，與你願意投入多少努力來保護應用程式免受此類事件影響成反比。普通的掛鎖雖然能被撬開，但比起櫥櫃掛鉤仍然難突破得多！"
      }
    },
    {
      "segment_id": "775b7fa4",
      "source_content": "<img src=\"/docs/assets/d_security_chart.svg\" width={283} alt=\" \" style={{float: 'right'}} />",
      "source_content_hash": "76ce55f9528e4fdfa2f4a5185a22447e838e049ee410651c104e364bd6b39b52",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_775b7fa4"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "In this guide, you will learn about best practices for storing sensitive information, authentication, network security, and tools that will help you secure your app. This is not a preflight checklist—it is a catalogue of options, each of which will help further protect your app and users.",
      "source_content_hash": "c336a438bc9f91206eb287a7c01363b95d4b42d551dd29e03ed7aac1a79564de",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "本指南將介紹儲存敏感資訊、身份驗證、網路安全的最佳實踐，以及協助你強化應用程式安全的工具。這不是一份預檢清單——而是選項目錄，每個選項都能進一步保護你的應用程式與使用者。"
      }
    },
    {
      "segment_id": "70153c6e",
      "source_content": "## Storing Sensitive Info",
      "source_content_hash": "18cf6a030c2fc831898ddbf90fa7933bdfa7321e81d763e0854c11d22c2db5e8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 儲存敏感資訊"
      }
    },
    {
      "segment_id": "86b54d44",
      "source_content": "Never store sensitive API keys in your app code. Anything included in your code could be accessed in plain text by anyone inspecting the app bundle. Tools like [react-native-dotenv](https://github.com/goatandsheep/react-native-dotenv) and [react-native-config](https://github.com/luggit/react-native-config/) are great for adding environment-specific variables like API endpoints, but they should not be confused with server-side environment variables, which can often contain secrets and API keys.",
      "source_content_hash": "24e9a8b4d3027622b6a9b01adcbcce8e44fbc3b2d6beb4bc067d987bb6e38fc3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "切勿在應用程式代碼中儲存敏感的 API 金鑰。任何包含在代碼中的內容都可能被檢查應用套件的人以純文字形式存取。像 [react-native-dotenv](https://github.com/goatandsheep/react-native-dotenv) 和 [react-native-config](https://github.com/luggit/react-native-config/) 這樣的工具非常適合添加環境特定的變數（如 API 端點），但它們不應與伺服器端的環境變數混淆，後者通常包含密鑰和 API 金鑰。"
      }
    },
    {
      "segment_id": "39b3772c",
      "source_content": "If you must have an API key or a secret to access some resource from your app, the most secure way to handle this would be to build an orchestration layer between your app and the resource. This could be a serverless function (e.g. using AWS Lambda or Google Cloud Functions) which can forward the request with the required API key or secret. Secrets in server side code cannot be accessed by the API consumers the same way secrets in your app code can.",
      "source_content_hash": "a41b6130338434f183833d4516b9f4ce7cee5341ca24afd71190204d8925d0ce",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果必須在應用程式中使用 API 金鑰或密鑰來存取某些資源，最安全的處理方式是構建一個位於應用程式和資源之間的協調層。這可以是無伺服器函數（例如使用 AWS Lambda 或 Google Cloud Functions），它可以轉發帶有所需 API 金鑰或密鑰的請求。伺服器端代碼中的密鑰無法像應用程式代碼中的密鑰那樣被 API 消費者存取。"
      }
    },
    {
      "segment_id": "1acb9a05",
      "source_content": "**For persisted user data, choose the right type of storage based on its sensitivity.** As your app is used, you’ll often find the need to save data on the device, whether to support your app being used offline, cut down on network requests or save your user’s access token between sessions so they wouldn’t have to re-authenticate each time they use the app.",
      "source_content_hash": "1ccf30e82023fe3007018dc5b2f2d3870ac3cb9da1ea9815dcda4e326265b9af",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**對於持久化的使用者數據，根據其敏感性選擇合適的儲存類型。** 隨著應用程式的使用，你會經常發現需要在設備上保存數據，無論是為了支持離線使用、減少網路請求，還是在會話之間保存使用者的存取令牌，這樣他們就不必每次使用應用程式時重新驗證。"
      }
    },
    {
      "segment_id": "4262047b",
      "source_content": "> **Persisted vs unpersisted** — persisted data is written to the device’s disk, which lets the data be read by your app across application launches without having to do another network request to fetch it or asking the user to re-enter it. But this also can make that data more vulnerable to being accessed by attackers. Unpersisted data is never written to disk—so there's no data to access!",
      "source_content_hash": "7b5de7d85e24f9499c23f7e7c35cc08b43f0aed14bee32b0bbd20b28e6501bbd",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> **持久化 vs 非持久化** — 持久化數據會被寫入設備的磁碟，這使得數據可以在應用程式多次啟動之間被讀取，而無需再次發送網路請求或要求使用者重新輸入。但這也可能使數據更容易被攻擊者存取。非持久化數據永遠不會寫入磁碟——因此沒有數據可供存取！"
      }
    },
    {
      "segment_id": "95b38f97",
      "source_content": "### Async Storage",
      "source_content_hash": "0f7a337608a24441fdcc64dc7e363c8860961b6064159ae6093057a2781ae821",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### Async Storage"
      }
    },
    {
      "segment_id": "ccc88b4c",
      "source_content": "[Async Storage](https://github.com/react-native-async-storage/async-storage) is a community-maintained module for React Native that provides an asynchronous, unencrypted, key-value store. Async Storage is not shared between apps: every app has its own sandbox environment and has no access to data from other apps.",
      "source_content_hash": "c275568c840032631cfadef66977f576cb33c969093b06dcdfd39b7204ea8fe3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[Async Storage](https://github.com/react-native-async-storage/async-storage) 是 React Native 的一個社區維護模組，提供了一個非同步、未加密的鍵值儲存。Async Storage 不會在應用程式之間共享：每個應用程式都有自己的沙盒環境，無法存取其他應用程式的數據。"
      }
    },
    {
      "segment_id": "fec94f74",
      "source_content": "| **Do** use async storage when...              | **Don't** use async storage for... |\n| --------------------------------------------- | ---------------------------------- |\n| Persisting non-sensitive data across app runs | Token storage                      |\n| Persisting Redux state                        | Secrets                            |\n| Persisting GraphQL state                      |                                    |\n| Storing global app-wide variables             |                                    |",
      "source_content_hash": "ed3513f70c197d7abaa3a6ce2c42e5f921c3355dbebcd3ecaff234e6421c8e09",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_fec94f74"
      }
    },
    {
      "segment_id": "f422383e",
      "source_content": "#### Developer Notes",
      "source_content_hash": "6ed23c252eeaa073a44962113b6b35340f98964ec0d29ad7a46d5cebc4b78b66",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### 開發者注意事項"
      }
    },
    {
      "segment_id": "7b66d6d6",
      "source_content": "<Tabs groupId=\"guide\" queryString defaultValue=\"web\" values={constants.getDevNotesTabs([\"web\"])}>\n\n<TabItem value=\"web\">\n\n> Async Storage is the React Native equivalent of Local Storage from the web\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "d189a7e3b40f226692553759f138b95135fb66599099ad23b87296455658b17c",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_7b66d6d6"
      }
    },
    {
      "segment_id": "8bddee80",
      "source_content": "### Secure Storage",
      "source_content_hash": "53c229a9e47f7b7739896f3e380d083b4a233e5f77c559595c061711d228a2cc",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 安全儲存"
      }
    },
    {
      "segment_id": "a9d49f92",
      "source_content": "React Native does not come bundled with any way of storing sensitive data. However, there are pre-existing solutions for Android and iOS platforms.",
      "source_content_hash": "e728128a966c1973dc89f04e23f1d31f4b61889e9120db26b70dd7e9e8843ba6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Native 並未內建任何儲存敏感數據的方式。然而，Android 和 iOS 平台已有現成的解決方案。"
      }
    },
    {
      "segment_id": "6d28a77c",
      "source_content": "#### iOS - Keychain Services",
      "source_content_hash": "44606318d0a27977a6ebd55de29082350b02c9e7f2e55bfc3ec3d50ee9f96d07",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### iOS - 鑰匙圈服務"
      }
    },
    {
      "segment_id": "f7ef78f9",
      "source_content": "[Keychain Services](https://developer.apple.com/documentation/security/keychain_services) allows you to securely store small chunks of sensitive info for the user. This is an ideal place to store certificates, tokens, passwords, and any other sensitive information that doesn’t belong in Async Storage.",
      "source_content_hash": "271a8b048d731d58c541fc319301b9af905a7a8356cb58f753dca46e00e71460",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[鑰匙圈服務](https://developer.apple.com/documentation/security/keychain_services) 允許你安全地儲存使用者的少量敏感資訊。這是儲存證書、令牌、密碼以及任何其他不應放在 Async Storage 中的敏感資訊的理想場所。"
      }
    },
    {
      "segment_id": "60410af6",
      "source_content": "#### Android - Secure Shared Preferences",
      "source_content_hash": "ba108c27a71fb2d39be33b53f04c3161ba7aff8581519bb6423e4c854b60449e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### Android - 安全共享偏好設定"
      }
    },
    {
      "segment_id": "b9aaa519",
      "source_content": "[Shared Preferences](https://developer.android.com/reference/android/content/SharedPreferences) is the Android equivalent for a persistent key-value data store. **Data in Shared Preferences is not encrypted by default**, but [Encrypted Shared Preferences](https://developer.android.com/topic/security/data) wraps the Shared Preferences class for Android, and automatically encrypts keys and values.",
      "source_content_hash": "78d6fc17d99462b9180f8cf3f55d2336755978d702b0fa7be2290ad32c4b6e42",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[共享偏好設定](https://developer.android.com/reference/android/content/SharedPreferences) 是 Android 上相當於持久化鍵值數據儲存的機制。**共享偏好設定中的數據預設未加密**，但 [加密共享偏好設定](https://developer.android.com/topic/security/data) 為 Android 封裝了共享偏好設定類，並自動加密鍵和值。"
      }
    },
    {
      "segment_id": "1a316f80",
      "source_content": "#### Android - Keystore",
      "source_content_hash": "811ad8543965c065b13d1d5d87c03dd2adcf116ecd0d8d5e25369d22aeac632e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### Android - 金鑰庫"
      }
    },
    {
      "segment_id": "40158b4b",
      "source_content": "The [Android Keystore](https://developer.android.com/training/articles/keystore) system lets you store cryptographic keys in a container to make it more difficult to extract from the device.",
      "source_content_hash": "607c7ad189442dca6a3b2659bd10d4a6b576479cad17997815b7b712e7e754d4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[Android Keystore](https://developer.android.com/training/articles/keystore) 系統可讓您將加密金鑰儲存在容器中，使其更難以從裝置中提取。"
      }
    },
    {
      "segment_id": "6ea4c715",
      "source_content": "In order to use iOS Keychain services or Android Secure Shared Preferences, you can either write a bridge yourself or use a library which wraps them for you and provides a unified API at your own risk. Some libraries to consider:",
      "source_content_hash": "f8a8e29efd35309271bd02a7e67b6ff91898b22f56fa1062473f51220d5c8803",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若要使用 iOS Keychain 服務或 Android 安全共享偏好設定，您可以自行編寫橋接程式碼，或使用封裝這些功能並提供統一 API 的函式庫（但需自行承擔風險）。以下是一些可考慮的函式庫："
      }
    },
    {
      "segment_id": "158e1f5d",
      "source_content": "- [expo-secure-store](https://docs.expo.dev/versions/latest/sdk/securestore/)\n- [react-native-encrypted-storage](https://github.com/emeraldsanto/react-native-encrypted-storage) - uses Keychain on iOS and EncryptedSharedPreferences on Android.\n- [react-native-keychain](https://github.com/oblador/react-native-keychain)\n- [react-native-sensitive-info](https://github.com/mCodex/react-native-sensitive-info) - secure for iOS, but uses Android Shared Preferences for Android (which is not secure by default). There is however a [branch](https://github.com/mCodex/react-native-sensitive-info/tree/keystore) that uses Android Keystore.\n  - [redux-persist-sensitive-storage](https://github.com/CodingZeal/redux-persist-sensitive-storage) - wraps react-native-sensitive-info for Redux.",
      "source_content_hash": "1c450ec9ab424ba63bfa3bba9fab0529b553277aaff43cb15a83131b405eaa05",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- [expo-secure-store](https://docs.expo.dev/versions/latest/sdk/securestore/)\n- [react-native-encrypted-storage](https://github.com/emeraldsanto/react-native-encrypted-storage) - 在 iOS 上使用 Keychain，在 Android 上使用 EncryptedSharedPreferences。\n- [react-native-keychain](https://github.com/oblador/react-native-keychain)\n- [react-native-sensitive-info](https://github.com/mCodex/react-native-sensitive-info) - 在 iOS 上是安全的，但在 Android 上使用 Shared Preferences（預設不安全）。不過有一個[分支](https://github.com/mCodex/react-native-sensitive-info/tree/keystore)使用 Android Keystore。\n  - [redux-persist-sensitive-storage](https://github.com/CodingZeal/redux-persist-sensitive-storage) - 為 Redux 封裝 react-native-sensitive-info。"
      }
    },
    {
      "segment_id": "81f451c9",
      "source_content": "> **Be mindful of unintentionally storing or exposing sensitive info.** This could happen accidentally, for example saving sensitive form data in redux state and persisting the whole state tree in Async Storage. Or sending user tokens and personal info to an application monitoring service such as Sentry or Crashlytics.",
      "source_content_hash": "4cb4471c305fcfccadc0d24fea287d103ccd219e67bb77695b52af3a949e2c75",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> **注意無意中儲存或暴露敏感資訊的情況。** 這種情況可能意外發生，例如將敏感表單資料儲存在 redux state 中，並將整個狀態樹持久化到 Async Storage。或將用戶令牌和個人資訊發送到應用程式監控服務（如 Sentry 或 Crashlytics）。"
      }
    },
    {
      "segment_id": "047c2395",
      "source_content": "## Authentication and Deep Linking",
      "source_content_hash": "dfd84d5b169344fb14d17e61d12b9f48875e4d40c128aaad2a00aaf8a4a69809",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 認證與深度連結"
      }
    },
    {
      "segment_id": "68209f5c",
      "source_content": "<img src=\"/docs/assets/d_security_deep-linking.svg\" width={225} alt=\" \" style={{float: 'right', margin: '0 0 1em 1em'}} />",
      "source_content_hash": "0e0c84e893e36e2b094785163a32eae487c895b5b3bf4b835ccd496a3ef59196",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_68209f5c"
      }
    },
    {
      "segment_id": "6cc549f2",
      "source_content": "Mobile apps have a unique vulnerability that is non-existent in the web: **deep linking**. Deep linking is a way of sending data directly to a native application from an outside source. A deep link looks like `app://` where `app` is your app scheme and anything following the // could be used internally to handle the request.",
      "source_content_hash": "b114964bf1bd676ca40774fd65296a5dfdd3bea99bc6dfee8e6fd445244abee7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "行動應用程式有一個在網頁上不存在的獨特漏洞：**深度連結**。深度連結是一種從外部來源直接向原生應用程式發送資料的方式。深度連結的形式類似 `app://`，其中 `app` 是您的應用程式方案，而 `//` 後面的內容可用於內部處理請求。"
      }
    },
    {
      "segment_id": "d0dd855b",
      "source_content": "For example, if you were building an ecommerce app, you could use `app://products/1` to deep link to your app and open the product detail page for a product with id 1. You can think of these kind of like URLs on the web, but with one crucial distinction:",
      "source_content_hash": "a3196387824c64d3ecee43b4aefca247b88d178a17300134baa678a8a79ae225",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "例如，如果您正在構建一個電子商務應用程式，可以使用 `app://products/1` 來深度連結到您的應用程式，並打開 id 為 1 的產品詳細頁面。您可以將其視為類似於網頁上的 URL，但有一個關鍵區別："
      }
    },
    {
      "segment_id": "7736989b",
      "source_content": "Deep links are not secure and you should never send any sensitive information in them.",
      "source_content_hash": "923482c5ad7859feb5c44ef4ab81276f273cc598e6f704f22d6668be7817ee17",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "深度連結並不安全，您不應在其中發送任何敏感資訊。"
      }
    },
    {
      "segment_id": "6270d577",
      "source_content": "The reason deep links are not secure is because there is no centralized method of registering URL schemes. As an application developer, you can use almost any url scheme you choose by [configuring it in Xcode](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app) for iOS or [adding an intent on Android](https://developer.android.com/training/app-links/deep-linking).",
      "source_content_hash": "617d151eddae5cca5196d2eb7cede40963028c6c0c4f1958e9f77ac26e3d73cf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "深度連結不安全的原因是沒有集中註冊 URL 方案的方法。作為應用程式開發者，您可以通過在 iOS 的 [Xcode 中配置](https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app) 或在 Android 的 [添加 intent](https://developer.android.com/training/app-links/deep-linking) 來使用幾乎任何 URL 方案。"
      }
    },
    {
      "segment_id": "a1fa5396",
      "source_content": "There is nothing stopping a malicious application from hijacking your deep link by also registering to the same scheme and then obtaining access to the data your link contains. Sending something like `app://products/1` is not harmful, but sending tokens is a security concern.",
      "source_content_hash": "54e63ab70b5838de863d7fd3029d9503b8a1e8f52c730a9b4cb9f9443b4e7924",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "沒有任何機制可以阻止惡意應用程式通過註冊相同的方案來劫持您的深度連結，從而獲取連結中包含的資料。發送像 `app://products/1` 這樣的內容無害，但發送令牌則是一個安全問題。"
      }
    },
    {
      "segment_id": "ec619944",
      "source_content": "When the operating system has two or more applications to choose from when opening a link, Android will show the user a [Disambiguation dialog](https://developer.android.com/training/basics/intents/sending#disambiguation-dialog) and ask them to choose which application to use to open the link. On iOS however, the operating system will make the choice for you, so the user will be blissfully unaware. Apple has made steps to address this issue in later iOS versions (iOS 11) where they instituted a first-come-first-served principle, although this vulnerability could still be exploited in different ways which you can read more about [here](https://thehackernews.com/2019/07/ios-custom-url-scheme.html). Using [universal links](https://developer.apple.com/ios/universal-links/) will allow linking to content within your app securely in iOS.",
      "source_content_hash": "69bf3b3b60893530b75d598c96f36bb26bb0c9d9ef82b4176976f055f961b528",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當操作系統在打開連結時有兩個或更多應用程式可供選擇時，Android 會向用戶顯示一個 [歧義對話框](https://developer.android.com/training/basics/intents/sending#disambiguation-dialog)，並詢問他們選擇使用哪個應用程式來打開連結。然而在 iOS 上，操作系統會為您做出選擇，因此用戶將毫不知情。Apple 在後續的 iOS 版本（iOS 11）中採取了措施來解決這個問題，實施了先到先得的原則，儘管這種漏洞仍可能以其他方式被利用，您可以在此[閱讀更多](https://thehackernews.com/2019/07/ios-custom-url-scheme.html)。使用 [通用連結](https://developer.apple.com/ios/universal-links/) 可以在 iOS 中安全地連結到應用程式內的內容。"
      }
    },
    {
      "segment_id": "2e771fd0",
      "source_content": "### OAuth2 and Redirects",
      "source_content_hash": "95aced738d478ca1aa928fac113e842840f6be82ed722684d8a9da9ef8b28b3c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### OAuth2 與重定向"
      }
    },
    {
      "segment_id": "0750bfa1",
      "source_content": "The OAuth2 authentication protocol is incredibly popular nowadays, prided as the most complete and secure protocol around. The OpenID Connect protocol is also based on this. In OAuth2, the user is asked to authenticate via a third party. On successful completion, this third party redirects back to the requesting application with a verification code which can be exchanged for a JWT — a [JSON Web Token](https://jwt.io/introduction/). JWT is an open standard for securely transmitting information between parties on the web.",
      "source_content_hash": "d89b0847d3e3cea1ce7dddd32e74758ab045513a252bee1b8d23e93f9e212f27",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "OAuth2 認證協議在當今極為流行，被譽為最完善且安全的協議。OpenID Connect 協議也是基於此。在 OAuth2 中，用戶需透過第三方進行身份驗證。成功完成後，該第三方會重定向回請求應用程式，並附帶一個可兌換為 JWT（[JSON Web Token](https://jwt.io/introduction/)）的驗證碼。JWT 是一種在網絡上安全傳輸資訊的開放標準。"
      }
    },
    {
      "segment_id": "86348f98",
      "source_content": "On the web, this redirect step is secure, because URLs on the web are guaranteed to be unique. This is not true for apps because, as mentioned earlier, there is no centralized method of registering URL schemes! In order to address this security concern, an additional check must be added in the form of PKCE.",
      "source_content_hash": "c4f887206b69cc958312d0315c897f5881d49c718b1aa9715403d3848fb103aa",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在網絡上，此重定向步驟是安全的，因為網址具有唯一性保證。但對應用程式而言並非如此，如前所述，並無集中式方法來註冊網址方案！為解決此安全隱患，必須額外加入 PKCE 形式的檢查機制。"
      }
    },
    {
      "segment_id": "6b77b644",
      "source_content": "[PKCE](https://oauth.net/2/pkce/), pronounced “Pixy” stands for Proof of Key Code Exchange, and is an extension to the OAuth 2 spec. This involves adding an additional layer of security which verifies that the authentication and token exchange requests come from the same client. PKCE uses the [SHA 256](https://www.movable-type.co.uk/scripts/sha256.html) Cryptographic Hash Algorithm. SHA 256 creates a unique “signature” for a text or file of any size, but it is:",
      "source_content_hash": "44b71df20d5376b4ef2ca3d647039bbb4f37fa3dcdcc0965a137a757a4680e7f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[PKCE](https://oauth.net/2/pkce/)（讀作「Pixy」）全稱為 Proof of Key Code Exchange，是 OAuth 2 規範的擴展。它透過增加一層安全驗證，確保認證與權杖交換請求來自同一客戶端。PKCE 採用 [SHA 256](https://www.movable-type.co.uk/scripts/sha256.html) 加密雜湊演算法。SHA 256 能為任意大小的文字或檔案產生獨特「簽章」，其特性如下："
      }
    },
    {
      "segment_id": "e0019b35",
      "source_content": "- Always the same length regardless of the input file\n- Guaranteed to always produce the same result for the same input\n- One way (that is, you can’t reverse engineer it to reveal the original input)",
      "source_content_hash": "6a816cba7867f3f9316f9aa1d854f84609534f99c30e4185966e95a89356f20c",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 無論輸入檔案大小，輸出長度固定\n- 相同輸入必定產生相同結果\n- 單向不可逆（無法逆向推導原始輸入）"
      }
    },
    {
      "segment_id": "1862c5fe",
      "source_content": "Now you have two values:",
      "source_content_hash": "0183974e6a7ff5826c06f8f676d34b32d6a6dc9cb3d52eccd2e9ed6e9b262984",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此時您將持有兩個數值："
      }
    },
    {
      "segment_id": "2d15468d",
      "source_content": "- **code_verifier** - a large random string generated by the client\n- **code_challenge** - the SHA 256 of the code_verifier",
      "source_content_hash": "c850bd9bbb09ded0d5493e82b2e256ec4afc25402c07156059346eb1e1591123",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- **code_verifier** - 由客戶端生成的大型隨機字串\n- **code_challenge** - code_verifier 的 SHA 256 雜湊值"
      }
    },
    {
      "segment_id": "2838eb68",
      "source_content": "During the initial `/authorize` request, the client also sends the `code_challenge` for the `code_verifier` it keeps in memory. After the authorize request has returned correctly, the client also sends the `code_verifier` that was used to generate the `code_challenge`. The IDP will then calculate the `code_challenge`, see if it matches what was set on the very first `/authorize` request, and only send the access token if the values match.",
      "source_content_hash": "b93a521973651463210a9201aed5cfb3a198f6d260be9bbc079e9f17ab98f2d0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在初始的 `/authorize` 請求中，客戶端會同時發送記憶體中的 `code_verifier` 所對應的 `code_challenge`。當授權請求正確返回後，客戶端再發送用於生成 `code_challenge` 的原始 `code_verifier`。身份提供者（IDP）將重新計算 `code_challenge`，核對是否與初始 `/authorize` 請求設定的值相符，僅在匹配時才會發送存取權杖。"
      }
    },
    {
      "segment_id": "4be28ed1",
      "source_content": "This guarantees that only the application that triggered the initial authorization flow would be able to successfully exchange the verification code for a JWT. So even if a malicious application gets access to the verification code, it will be useless on its own. To see this in action, check out [this example](https://aaronparecki.com/oauth-2-simplified/#mobile-apps).",
      "source_content_hash": "be3e9ffb2983b89664eaff57be1d7b4984f00ae040a306732eb4cdd8fed3b56e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此機制確保只有觸發初始授權流程的應用程式能成功兌換驗證碼為 JWT。即使惡意應用取得驗證碼，單獨持有也毫無用處。實際運作範例可參考[此示範](https://aaronparecki.com/oauth-2-simplified/#mobile-apps)。"
      }
    },
    {
      "segment_id": "0e80209e",
      "source_content": "A library to consider for native OAuth is [react-native-app-auth](https://github.com/FormidableLabs/react-native-app-auth). React-native-app-auth is an SDK for communicating with OAuth2 providers. It wraps the native [AppAuth-iOS](https://github.com/openid/AppAuth-iOS) and [AppAuth-Android](https://github.com/openid/AppAuth-Android) libraries and can support PKCE.",
      "source_content_hash": "8d802a52a2f83cd7e341feb684802d5fe134daaffa3eae753ec12e0825f67476",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若需實作原生 OAuth，可考慮使用 [react-native-app-auth](https://github.com/FormidableLabs/react-native-app-auth) 函式庫。該 SDK 封裝了原生 [AppAuth-iOS](https://github.com/openid/AppAuth-iOS) 與 [AppAuth-Android](https://github.com/openid/AppAuth-Android) 函式庫，能與 OAuth2 供應商溝通並支援 PKCE。"
      }
    },
    {
      "segment_id": "d7a531bd",
      "source_content": "> React-native-app-auth can support PKCE only if your Identity Provider supports it.",
      "source_content_hash": "5e41b4c2568b82b9829ed917594db8b80c942612197c7827c9eb40e17292ea8c",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 僅當您的身份供應商支援時，react-native-app-auth 方能實作 PKCE。"
      }
    },
    {
      "segment_id": "6693c38c",
      "source_content": "![OAuth2 with PKCE](/docs/assets/diagram_pkce.svg)",
      "source_content_hash": "07df9727c85d8225dfb3defc1e22291c526150e401028d4e42fd3725d638ae64",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![OAuth2 搭配 PKCE](/docs/assets/diagram_pkce.svg)"
      }
    },
    {
      "segment_id": "8172a0a5",
      "source_content": "## Network Security",
      "source_content_hash": "b81b7f6f226e5b3b182a55b99764490dd4cc13e7f24d33f8c5c48c015a4adb0d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 網路安全"
      }
    },
    {
      "segment_id": "1b4de6df",
      "source_content": "Your APIs should always use [SSL encryption](https://www.ssl.com/faqs/faq-what-is-ssl/). SSL encryption protects against the requested data being read in plain text between when it leaves the server and before it reaches the client. You’ll know the endpoint is secure, because it starts with `https://` instead of `http://`.",
      "source_content_hash": "734614cc17cac4080d86ed36b405d7ce8c0bac6ebf02143a3ba8d3348b548423",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您的 API 應始終使用 [SSL 加密](https://www.ssl.com/faqs/faq-what-is-ssl/)。SSL 加密能防止資料在伺服器傳送至客戶端過程中被以明文竊取。安全端點可透過 `https://` 開頭（而非 `http://`）識別。"
      }
    },
    {
      "segment_id": "37fca32e",
      "source_content": "### SSL Pinning",
      "source_content_hash": "207202e2dcb7a8ff7b35d43b35fab68fc8bdefc7a17f69ca13bf7b88252daed4",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### SSL 憑證綁定"
      }
    },
    {
      "segment_id": "a8610918",
      "source_content": "Using https endpoints could still leave your data vulnerable to interception. With https, the client will only trust the server if it can provide a valid certificate that is signed by a trusted Certificate Authority that is pre-installed on the client. An attacker could take advantage of this by installing a malicious root CA certificate to the user’s device, so the client would trust all certificates that are signed by the attacker. Thus, relying on certificates alone could still leave you vulnerable to a [man-in-the-middle attack](https://en.wikipedia.org/wiki/Man-in-the-middle_attack).",
      "source_content_hash": "513f2edec70d5fb87b6e87f475b7cf188318b55882526ff73962bc3d6d19b18c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "即使使用 https 端點，資料仍可能遭攔截。在 https 架構下，客戶端僅信任由預裝可信憑證授權機構簽署的有效憑證。攻擊者可藉由在用戶裝置安裝惡意根憑證，使客戶端誤信攻擊者簽署的所有憑證。因此，單純依賴憑證仍可能使您暴露於[中間人攻擊](https://en.wikipedia.org/wiki/Man-in-the-middle_attack)風險中。"
      }
    },
    {
      "segment_id": "a6c928a1",
      "source_content": "**SSL pinning** is a technique that can be used on the client side to avoid this attack. It works by embedding (or pinning) a list of trusted certificates to the client during development, so that only the requests signed with one of the trusted certificates will be accepted, and any self-signed certificates will not be.",
      "source_content_hash": "c279b7998f296a9f11ae89607aab0592b985ba9095f28703585ab6b22569fde9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**SSL 憑證綁定**是一種可在客戶端使用的技術，用以防範此類攻擊。其原理是在開發階段將一組受信任的憑證清單嵌入（或「綁定」）至客戶端，使得只有由這些受信任憑證簽署的請求才會被接受，任何自簽憑證都將被拒絕。"
      }
    },
    {
      "segment_id": "df35f7e1",
      "source_content": "> When using SSL pinning, you should be mindful of certificate expiry. Certificates expire every 1-2 years and when one does, it’ll need to be updated in the app as well as on the server. As soon as the certificate on the server has been updated, any apps with the old certificate embedded in them will cease to work.",
      "source_content_hash": "e131ee13bc7c7f650b136554f9778c175537aa70f98ac4bcfecabbd1b45ba2bb",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 使用 SSL 憑證綁定時，需注意憑證的有效期限。憑證通常每 1-2 年會過期，屆時不僅伺服器端需更新憑證，應用程式內嵌的憑證也必須同步更新。一旦伺服器憑證更新後，任何仍內嵌舊憑證的應用程式將立即無法運作。"
      }
    },
    {
      "segment_id": "23b96cc0",
      "source_content": "## Summary",
      "source_content_hash": "30ac03ff33731529441be8fbe52a3bd0d4c5ec830e806d54692168ebb7f98ada",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 總結"
      }
    },
    {
      "segment_id": "8fcdd6d4",
      "source_content": "There is no bulletproof way to handle security, but with conscious effort and diligence, it is possible to significantly reduce the likelihood of a security breach in your application. Invest in security proportional to the sensitivity of the data stored in your application, the number of users, and the damage a hacker could do when gaining access to their account. And remember: it’s significantly harder to access information that was never requested in the first place.",
      "source_content_hash": "4645ef3070e6810cf8b690653031b01adf8de06a95dcebd6ecc63da65d830867",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "沒有任何方法能絕對保證安全，但透過有意識的努力與嚴謹措施，可大幅降低應用程式遭受安全漏洞攻擊的可能性。請根據應用程式儲存資料的敏感性、用戶數量及駭客入侵可能造成的損害程度，投入相應的安全防護資源。切記：根本未請求的資訊，駭客要取得自然困難得多。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.73/security.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.403820+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "0d6b291a53004aa2e0f518f58066df900fc198e24851e7d3ae448c167bc44651"
  }
}