{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.73/inputaccessoryview.md",
  "source_file_content_hash": "3f340ce8a1fb4d3f26a85f9a4f0ac5b25b596e80b2201b5bfec6a2d6a8e7b564",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: inputaccessoryview\ntitle: InputAccessoryView\n---",
      "source_content_hash": "f4323126d724a8e6c89f9a2cc1dc2d360f6354e97f23e34edd5aad8baf849002",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "A component which enables customization of the keyboard input accessory view on iOS. The input accessory view is displayed above the keyboard whenever a `TextInput` has focus. This component can be used to create custom toolbars.",
      "source_content_hash": "d16bc9e515d003e16a81d1e10229b04dd8ead5f40b83ecc85b951c2bfa302602",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "一個可在 iOS 上自訂鍵盤輸入附屬視圖的元件。當 `TextInput` 獲得焦點時，輸入附屬視圖會顯示於鍵盤上方。此元件可用於建立自訂工具列。"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "To use this component wrap your custom toolbar with the InputAccessoryView component, and set a `nativeID`. Then, pass that `nativeID` as the `inputAccessoryViewID` of whatever `TextInput` you desire. A basic example:",
      "source_content_hash": "667292e9f9b35e5e0943e950bbf537cd92a75a10c611d4bf1d10508acaf4cafe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "使用時請將自訂工具列以 InputAccessoryView 元件包裹，並設定 `nativeID`。接著將該 `nativeID` 作為 `inputAccessoryViewID` 傳遞給目標 `TextInput`。基礎範例："
      }
    },
    {
      "segment_id": "71b63116",
      "source_content": "```SnackPlayer name=InputAccessoryView&supportedPlatforms=ios\nimport React, {useState} from 'react';\nimport {Button, InputAccessoryView, ScrollView, TextInput} from 'react-native';\n\nconst App = () => {\n  const inputAccessoryViewID = 'uniqueID';\n  const initialText = '';\n  const [text, setText] = useState(initialText);\n\n  return (\n    <>\n      <ScrollView keyboardDismissMode=\"interactive\">\n        <TextInput\n          style={{\n            padding: 16,\n            marginTop: 50,\n          }}\n          inputAccessoryViewID={inputAccessoryViewID}\n          onChangeText={setText}\n          value={text}\n          placeholder={'Please type here…'}\n        />\n      </ScrollView>\n      <InputAccessoryView nativeID={inputAccessoryViewID}>\n        <Button onPress={() => setText(initialText)} title=\"Clear text\" />\n      </InputAccessoryView>\n    </>\n  );\n};\n\nexport default App;\n```",
      "source_content_hash": "e8768098d013b6db95bb218147756485c02a74c2089f559940bb84c2a7f2ed60",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_71b63116"
      }
    },
    {
      "segment_id": "1042b50d",
      "source_content": "This component can also be used to create sticky text inputs (text inputs which are anchored to the top of the keyboard). To do this, wrap a `TextInput` with the `InputAccessoryView` component, and don't set a `nativeID`. For an example, look at [InputAccessoryViewExample.js](https://github.com/facebook/react-native/blob/main/packages/rn-tester/js/examples/InputAccessoryView/InputAccessoryViewExample.js).",
      "source_content_hash": "2022324b6f7e0bd98b25f224b93cf91498b50b0fabe389bc9a45767162ca1793",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此元件亦可用於建立黏性文字輸入框（錨定於鍵盤頂端的文字輸入框）。操作方式是以 `InputAccessoryView` 包裹 `TextInput` 且不設定 `nativeID`。範例可參考 [InputAccessoryViewExample.js](https://github.com/facebook/react-native/blob/main/packages/rn-tester/js/examples/InputAccessoryView/InputAccessoryViewExample.js)。"
      }
    },
    {
      "segment_id": "39993511",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "f44c1398",
      "source_content": "# Reference",
      "source_content_hash": "7f466000063da6e2b641eee17b52fffbcef1717169b55b58c4543dc0dc23ea11",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "# 參考文件"
      }
    },
    {
      "segment_id": "6f930b2f",
      "source_content": "## Props",
      "source_content_hash": "5b94a6cc928a22f2ff71078f7462cd97dbe259a0c4d1877ab3afc2a92dded915",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 屬性"
      }
    },
    {
      "segment_id": "11c76fcc",
      "source_content": "### `backgroundColor`",
      "source_content_hash": "025725f2b031ec6f9807ec405c4a8f8691ad8652446c7f936d6c8a5159d12237",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `backgroundColor`"
      }
    },
    {
      "segment_id": "36b6db6e",
      "source_content": "| Type               |\n| ------------------ |\n| [color](colors.md) |",
      "source_content_hash": "8632e6c1f1b54cc7faa3ecbab5f8e6ef0ebdba99dde80616d750401474098649",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_36b6db6e"
      }
    },
    {
      "segment_id": "6e9a41d8",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "7283cdac",
      "source_content": "### `nativeID`",
      "source_content_hash": "157dbabe7da1e6477d223af8aea3d0045181cfaad08511e049648be26c80d1c8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `nativeID`"
      }
    },
    {
      "segment_id": "1131ef75",
      "source_content": "An ID which is used to associate this `InputAccessoryView` to specified TextInput(s).",
      "source_content_hash": "9a233eb0c48f88240ee6f553a70051e120d9e088f08c4e2fb9b0bcf5942e6486",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "用於將此 `InputAccessoryView` 與指定 TextInput 建立關聯的識別碼。"
      }
    },
    {
      "segment_id": "f1fa4157",
      "source_content": "| Type   |\n| ------ |\n| string |",
      "source_content_hash": "f6fdc4c4e48a0fd4403866c93d58d6fd94287810ec227946601aa88b1cb1eced",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_f1fa4157"
      }
    },
    {
      "segment_id": "379f9c7b",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "3ef18741",
      "source_content": "### `style`",
      "source_content_hash": "13724cc4fc79fe456e2ca97c82efa2ac5ced724471bd3e09daa7d3c8b5f20a5c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `style`"
      }
    },
    {
      "segment_id": "98ef0057",
      "source_content": "| Type                              |\n| --------------------------------- |\n| [View Style](view-style-props.md) |",
      "source_content_hash": "f4fb06d2318f9f111d5e287541c887f93cd3442a49effd8d1079893305c5ced4",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_98ef0057"
      }
    },
    {
      "segment_id": "b1cbdb65",
      "source_content": "# Known issues",
      "source_content_hash": "8c2b620309aaae36b42a64b7c3cec0a70a954f61c956e785c658864b8057b9d9",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "# 已知問題"
      }
    },
    {
      "segment_id": "caffd879",
      "source_content": "- [react-native#18997](https://github.com/facebook/react-native/issues/18997): Doesn't support multiline `TextInput`\n- [react-native#20157](https://github.com/facebook/react-native/issues/20157): Can't use with a bottom tab bar",
      "source_content_hash": "c00ceff3710f7734a259c3327258225ad95c5bff29c95eb7a3bc62d155089588",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- [react-native#18997](https://github.com/facebook/react-native/issues/18997): 不支援多行 `TextInput`\n- [react-native#20157](https://github.com/facebook/react-native/issues/20157): 無法與底部標籤欄共用"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.73/inputaccessoryview.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.424163+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "3f340ce8a1fb4d3f26a85f9a4f0ac5b25b596e80b2201b5bfec6a2d6a8e7b564"
  }
}