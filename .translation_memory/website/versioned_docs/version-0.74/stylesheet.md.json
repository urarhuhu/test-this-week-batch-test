{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.74/stylesheet.md",
  "source_file_content_hash": "fcdf7ad1fc2b96aaee93d7d6f1411dbd8ecf079e1591ce886a5ee38dbb1da233",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: stylesheet\ntitle: StyleSheet\n---",
      "source_content_hash": "0c3f7cd0cc242f80acf2e3eec7046f60e75c3c31e02814638d3daa8b3d6cc382",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "A StyleSheet is an abstraction similar to CSS StyleSheets",
      "source_content_hash": "612febb397a3df05e0b4fb47e0bc0ea99f0ee312616a2b92ad2d5bbf4109ee9a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "StyleSheet 是一個類似於 CSS 樣式表的抽象層"
      }
    },
    {
      "segment_id": "e6a5da7c",
      "source_content": "```SnackPlayer name=StyleSheet\nimport React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst App = () => (\n  <View style={styles.container}>\n    <Text style={styles.title}>React Native</Text>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: '#eaeaea',\n  },\n  title: {\n    marginTop: 16,\n    paddingVertical: 8,\n    borderWidth: 4,\n    borderColor: '#20232a',\n    borderRadius: 6,\n    backgroundColor: '#61dafb',\n    color: '#20232a',\n    textAlign: 'center',\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n});\n\nexport default App;\n```",
      "source_content_hash": "f7d0024cd0074d5eb6f2d23db6bb36df7ce7492d50266f75d56833e3dca64c0c",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_e6a5da7c"
      }
    },
    {
      "segment_id": "3cfe6286",
      "source_content": "Code quality tips:",
      "source_content_hash": "b4238d6c885362e0d6f88187cf95a701870ee94948eb487f4d50fa19145dd1e5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "程式碼品質建議："
      }
    },
    {
      "segment_id": "bdfae007",
      "source_content": "- By moving styles away from the render function, you're making the code easier to understand.\n- Naming the styles is a good way to add meaning to the low level components in the render function.",
      "source_content_hash": "03e65bbda45ab2d14623c99ee53b939e4c55b66dc8730e372b2ac951090457f6",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 將樣式移出渲染函式能使程式碼更易理解。\n- 為樣式命名有助於為渲染函式中的底層元件賦予意義。"
      }
    },
    {
      "segment_id": "06784e79",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "c674e260",
      "source_content": "# Reference",
      "source_content_hash": "7f466000063da6e2b641eee17b52fffbcef1717169b55b58c4543dc0dc23ea11",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "# 參考文獻"
      }
    },
    {
      "segment_id": "6d28a77c",
      "source_content": "## Methods",
      "source_content_hash": "f10f482f08112298a7b6d3090f1ea9c2254688471ce31e5da64ed9631f177b5d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 方法"
      }
    },
    {
      "segment_id": "cb5b269c",
      "source_content": "### `compose()`",
      "source_content_hash": "3440d16234b4dee46797b40a22c21b505436608b92b86e6a2ef2ca61743c3121",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `compose()`"
      }
    },
    {
      "segment_id": "3ce8f045",
      "source_content": "```tsx\nstatic compose(style1: Object, style2: Object): Object | Object[];\n```",
      "source_content_hash": "6190906c0c1546f8a3f92c80144c0c3f9bd523efd098d67342b267564e7c4ab1",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_3ce8f045"
      }
    },
    {
      "segment_id": "e536ea0d",
      "source_content": "Combines two styles such that `style2` will override any styles in `style1`. If either style is falsy, the other one is returned without allocating an array, saving allocations and maintaining reference equality for PureComponent checks.",
      "source_content_hash": "2b06cec0468c6b8f99e752d22607e3ba7322b9bd694c3cd93ab227661f34568a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "合併兩種樣式，使 `style2` 會覆寫 `style1` 中的任何樣式。若任一樣式為假值，則直接返回另一個樣式而不分配陣列，節省記憶體分配並維持 PureComponent 檢查的參考相等性。"
      }
    },
    {
      "segment_id": "3c08ed05",
      "source_content": "```SnackPlayer name=Compose\nimport React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst App = () => (\n  <View style={container}>\n    <Text style={text}>React Native</Text>\n  </View>\n);\n\nconst page = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: '#fff',\n  },\n  text: {\n    fontSize: 30,\n    color: '#000',\n  },\n});\n\nconst lists = StyleSheet.create({\n  listContainer: {\n    flex: 1,\n    backgroundColor: '#61dafb',\n  },\n  listItem: {\n    fontStyle: 'italic',\n    fontWeight: 'bold',\n  },\n});\n\nconst container = StyleSheet.compose(page.container, lists.listContainer);\nconst text = StyleSheet.compose(page.text, lists.listItem);\n\nexport default App;\n```",
      "source_content_hash": "2f501261e931c13c596f819f0dce65830f29192998fea5f10dc3ba80d8f8e7c1",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_3c08ed05"
      }
    },
    {
      "segment_id": "1742e28b",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "99d0dd9b",
      "source_content": "### `create()`",
      "source_content_hash": "129d96bef642b0bba6f4d5ce6bd151173ad439089228f7a4bd67c0166a8ca4c5",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `create()`"
      }
    },
    {
      "segment_id": "cae897fb",
      "source_content": "```tsx\nstatic create(styles: Object): Object;\n```",
      "source_content_hash": "1a9b9aa380ee2d26757e1f4c327cacee900ffda9a8c3b168dd4d99369da2b04f",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_cae897fb"
      }
    },
    {
      "segment_id": "4be28ed1",
      "source_content": "Creates a StyleSheet style reference from the given object.",
      "source_content_hash": "949ec33bf93bc24bd4fce2f33b1cbd775ef9a1886adb4afeb982819129bceeb1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "從給定物件創建 StyleSheet 樣式參照。"
      }
    },
    {
      "segment_id": "04837130",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "d1f76d04",
      "source_content": "### `flatten()`",
      "source_content_hash": "1793c818788c5c3999b0759a75332eb03ac73280c288129dfa0a180beedc436b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `flatten()`"
      }
    },
    {
      "segment_id": "f39e109c",
      "source_content": "```tsx\nstatic flatten(style: Object[]): Object;\n```",
      "source_content_hash": "2e94eecff98d7d2e0416d153baae810d600488290e96cdbb9fb7d1054628cfdd",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_f39e109c"
      }
    },
    {
      "segment_id": "1b4de6df",
      "source_content": "Flattens an array of style objects, into one aggregated style object. Alternatively, this method can be used to lookup IDs, returned by `StyleSheet.register`.",
      "source_content_hash": "fdb924dac04017f14cd968c85be94f577897ca9657fbc46d2c1320c2afb157dc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "將樣式物件陣列扁平化為單一聚合樣式物件。此方法亦可用於查閱由 `StyleSheet.register` 返回的 ID。"
      }
    },
    {
      "segment_id": "fcc9030a",
      "source_content": "> **NOTE:** Exercise caution as abusing this can tax you in terms of optimizations. IDs enable optimizations through the bridge and memory in general. Referring to style objects directly will deprive you of these optimizations.",
      "source_content_hash": "ddbb55884b01db6584d6d8a96cda5f61793d8655e59c4f97b8dc1058aa4dd39a",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> **注意：** 請謹慎使用，過度濫用可能影響優化效果。ID 能透過橋接機制和記憶體帶來優化。直接引用樣式物件將使您無法享受這些優化。"
      }
    },
    {
      "segment_id": "1a63b635",
      "source_content": "```SnackPlayer name=Flatten\nimport React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst App = () => (\n  <View style={page.container}>\n    <Text style={flattenStyle}>React Native</Text>\n    <Text>Flatten Style</Text>\n    <Text style={page.code}>{JSON.stringify(flattenStyle, null, 2)}</Text>\n  </View>\n);\n\nconst page = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    alignItems: 'center',\n  },\n  text: {\n    color: '#000',\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n  code: {\n    marginTop: 12,\n    padding: 12,\n    borderRadius: 8,\n    color: '#666',\n    backgroundColor: '#eaeaea',\n  },\n});\n\nconst typography = StyleSheet.create({\n  header: {\n    color: '#61dafb',\n    fontSize: 30,\n    marginBottom: 36,\n  },\n});\n\nconst flattenStyle = StyleSheet.flatten([page.text, typography.header]);\n\nexport default App;\n```",
      "source_content_hash": "e3f020893c1da4f75958859655c2e7da46ac3b5ef0616288e0ff31a48f8c82c5",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_1a63b635"
      }
    },
    {
      "segment_id": "0ddaa835",
      "source_content": "This method internally uses `StyleSheetRegistry.getStyleByID(style)` to resolve style objects represented by IDs. Thus, an array of style objects (instances of `StyleSheet.create()`), are individually resolved to, their respective objects, merged as one and then returned. This also explains the alternative use.",
      "source_content_hash": "638bce1666ad7544f70b1d7e2eefb51bf3f116d750f16110a97890b4f4c6fdc9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此方法內部使用 `StyleSheetRegistry.getStyleByID(style)` 來解析以 ID 表示的樣式物件。因此，樣式物件陣列（`StyleSheet.create()` 的實例）會被逐一解析為對應物件，合併後返回。這也解釋了該方法的替代用途。"
      }
    },
    {
      "segment_id": "cb3e8b91",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "58f98d22",
      "source_content": "### `setStyleAttributePreprocessor()`",
      "source_content_hash": "b72b2dce360f6c2a6d96bb05d4903982a560a76bebef7d071e30493fb4cc6bcd",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `setStyleAttributePreprocessor()`"
      }
    },
    {
      "segment_id": "82636697",
      "source_content": "> **WARNING: EXPERIMENTAL.** Breaking changes will probably happen a lot and will not be reliably announced. The whole thing might be deleted, who knows? Use at your own risk.",
      "source_content_hash": "80878c276d403c58ae20e5ec9fef90ed75fc7caa6ae6716f8cd747fa53f65db7",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> **警告：實驗性功能。** 可能頻繁發生破壞性變更且不保證會事先公告。整個功能隨時可能被移除，誰知道呢？使用風險自負。"
      }
    },
    {
      "segment_id": "a1af15b5",
      "source_content": "```tsx\nstatic setStyleAttributePreprocessor(\n  property: string,\n  process: (propValue: any) => any,\n);\n```",
      "source_content_hash": "05d4c32c83a6d81a2effd58ab6d78272adf09fcd55305a0a52f749af1bda921f",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_a1af15b5"
      }
    },
    {
      "segment_id": "39c48ff7",
      "source_content": "Sets a function to use to pre-process a style property value. This is used internally to process color and transform values. You should not use this unless you really know what you are doing and have exhausted other options.",
      "source_content_hash": "e757548df45fd07ebb84b4bea0243ff7e2d2cc514ca4ab91c99a4544ddf588bf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "設定用於預處理樣式屬性值的函式。此方法內部用於處理顏色和變形值。除非您確知自己在做什麼且已窮盡其他選項，否則不應使用此方法。"
      }
    },
    {
      "segment_id": "8d279c43",
      "source_content": "## Properties",
      "source_content_hash": "899ecb557156d36aac98f2082474f5ea1e01af3d4a611b79b00dab2a3116aab2",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 屬性"
      }
    },
    {
      "segment_id": "96311fc6",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "c4ac6a6f",
      "source_content": "### `absoluteFill`",
      "source_content_hash": "cb11ddb2eac4c01eee36edf7595433f4ae3eb5a43a9645b94208f53df5cfc1e4",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `absoluteFill`"
      }
    },
    {
      "segment_id": "b49a7009",
      "source_content": "A very common pattern is to create overlays with position absolute and zero positioning (`position: 'absolute', left: 0, right: 0, top: 0, bottom: 0`), so `absoluteFill` can be used for convenience and to reduce duplication of these repeated styles. If you want, absoluteFill can be used to create a customized entry in a StyleSheet, e.g.:",
      "source_content_hash": "f0529e05651e8adb5dd5461c116ec9d353404e5059628177e49f1004d7e17533",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "絕對定位全屏覆蓋是常見模式（`position: 'absolute', left: 0, right: 0, top: 0, bottom: 0`），為方便起見並減少重複樣式，可使用 `absoluteFill`。您亦可透過 absoluteFill 在 StyleSheet 中創建自定義項目，例如："
      }
    },
    {
      "segment_id": "768336f1",
      "source_content": "```SnackPlayer name=absoluteFill\nimport React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst App = () => (\n  <View style={styles.container}>\n    <View style={styles.box1}>\n      <Text style={styles.text}>1</Text>\n    </View>\n    <View style={[styles.box2, StyleSheet.absoluteFill]}>\n      <Text style={styles.text}>2</Text>\n    </View>\n    <View style={styles.box3}>\n      <Text style={styles.text}>3</Text>\n    </View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  box1: {\n    position: 'absolute',\n    top: 40,\n    left: 40,\n    width: 100,\n    height: 100,\n    backgroundColor: 'red',\n  },\n  box2: {\n    width: 100,\n    height: 100,\n    backgroundColor: 'blue',\n  },\n  box3: {\n    position: 'absolute',\n    top: 120,\n    left: 120,\n    width: 100,\n    height: 100,\n    backgroundColor: 'green',\n  },\n  text: {\n    color: '#FFF',\n    fontSize: 80,\n  },\n});\n\nexport default App;\n```",
      "source_content_hash": "bbd50a23763832ada6e3e37396c6bfc3fa525dea88f99d059cc4434cab96db75",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_768336f1"
      }
    },
    {
      "segment_id": "f0644895",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "4147aea6",
      "source_content": "### `absoluteFillObject`",
      "source_content_hash": "e9874991e55420186ebb8ae89508c370a2e31c8540cf87c2b60390519cc5298f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `absoluteFillObject`"
      }
    },
    {
      "segment_id": "43287462",
      "source_content": "Sometimes you may want `absoluteFill` but with a couple tweaks - `absoluteFillObject` can be used to create a customized entry in a `StyleSheet`, e.g.:",
      "source_content_hash": "006aa9ef05e132e6ddc97b873b7b9df58c42e4ceb4c277a85ecedc69a7872957",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "有時您可能需要微調版的 `absoluteFill`——可使用 `absoluteFillObject` 在 `StyleSheet` 中創建自定義項目，例如："
      }
    },
    {
      "segment_id": "fa8763ec",
      "source_content": "```SnackPlayer name=absoluteFillObject\nimport React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst App = () => (\n  <View style={styles.container}>\n    <View style={styles.box1}>\n      <Text style={styles.text}>1</Text>\n    </View>\n    <View style={styles.box2}>\n      <Text style={styles.text}>2</Text>\n    </View>\n    <View style={styles.box3}>\n      <Text style={styles.text}>3</Text>\n    </View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  box1: {\n    position: 'absolute',\n    top: 40,\n    left: 40,\n    width: 100,\n    height: 100,\n    backgroundColor: 'red',\n  },\n  box2: {\n    ...StyleSheet.absoluteFillObject,\n    top: 120,\n    left: 50,\n    width: 100,\n    height: 100,\n    backgroundColor: 'blue',\n  },\n  box3: {\n    ...StyleSheet.absoluteFillObject,\n    top: 120,\n    left: 120,\n    width: 100,\n    height: 100,\n    backgroundColor: 'green',\n  },\n  text: {\n    color: '#FFF',\n    fontSize: 80,\n  },\n});\n\nexport default App;\n```",
      "source_content_hash": "5a635a288f4d04136c1b616ae86800ad4f4cf80ee72af62c137ec15937996ed3",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_fa8763ec"
      }
    },
    {
      "segment_id": "1eb2c35a",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "ca32a808",
      "source_content": "### `hairlineWidth`",
      "source_content_hash": "724ac2b478579afdf057a49d25785c516bb06d9a2e458ba1ae874192ac1eb110",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `hairlineWidth`"
      }
    },
    {
      "segment_id": "d1996877",
      "source_content": "This is defined as the width of a thin line on the platform. It can be used as the thickness of a border or division between two elements. Example:",
      "source_content_hash": "1fe1ab7502a17fa7e96e6499101b64ebad2e3e07a5867ef550e5482cde7b4c46",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此常數定義為平台上細線的寬度。可用作邊框粗細或兩元素間分隔線。範例："
      }
    },
    {
      "segment_id": "d96a088c",
      "source_content": "```SnackPlayer name=hairlineWidth\nimport React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst App = () => (\n  <View style={styles.container}>\n    <Text style={styles.row}>React</Text>\n    <Text style={styles.row}>Native</Text>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n  },\n  row: {\n    padding: 4,\n    borderBottomColor: 'red',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n  },\n});\n\nexport default App;\n```",
      "source_content_hash": "4bc38f65d2572cdf1f049ff3397d1e1b28e6548e53d3d21fecb4e66dd90228d1",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_d96a088c"
      }
    },
    {
      "segment_id": "4443801b",
      "source_content": "This constant will always be a round number of pixels (so a line defined by it can look crisp) and will try to match the standard width of a thin line on the underlying platform. However, you should not rely on it being a constant size, because on different platforms and screen densities its value may be calculated differently.",
      "source_content_hash": "f53df9ae0f91cd2bfb532b1886acd6b210c0bb44c8f68a92de79b6f37e4a1f14",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此常數永遠是整數像素值（確保線條清晰），並會嘗試匹配底層平台的標準細線寬度。但請勿依賴其恆定不變，因不同平台和螢幕密度可能採用不同計算方式。"
      }
    },
    {
      "segment_id": "7441a9ec",
      "source_content": "A line with hairline width may not be visible if your simulator is downscaled.",
      "source_content_hash": "c125536164533c530294853dcfeca1ae117eb53b8f2fa35ac2e8a071134190e8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若模擬器縮放比例過低，hairline 寬度的線條可能無法顯示。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.74/stylesheet.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.448082+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "fcdf7ad1fc2b96aaee93d7d6f1411dbd8ecf079e1591ce886a5ee38dbb1da233"
  }
}