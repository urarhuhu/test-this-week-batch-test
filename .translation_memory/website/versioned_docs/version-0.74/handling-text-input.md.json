{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.74/handling-text-input.md",
  "source_file_content_hash": "847eff9a6f3cb86ea7afa5e5906b892a59a3a4ad2b778c9e976bcd9e488b610e",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: handling-text-input\ntitle: Handling Text Input\n---",
      "source_content_hash": "2611b0392ef67c21b63cc8885f9946afe9c8476ff77f75a2a14df85e6bd55b73",
      "node_type": "yaml",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "bb42506b",
      "source_content": "[`TextInput`](textinput#content) is a [Core Component](intro-react-native-components) that allows the user to enter text. It has an `onChangeText` prop that takes a function to be called every time the text changed, and an `onSubmitEditing` prop that takes a function to be called when the text is submitted.",
      "source_content_hash": "7eec6272d739b69bfdd2eb69554f7bc1b96c05c606a2bde14bd1f97c835a09ce",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "For example, let's say that as the user types, you're translating their words into a different language. In this new language, every single word is written the same way: üçï. So the sentence \"Hello there Bob\" would be translated as \"üçï üçï üçï\".",
      "source_content_hash": "9c9c64c726aa6abb51c6bed9769db223153e68b9c915ef3c89711b2bef04224e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "71b63116",
      "source_content": "```SnackPlayer name=Handling%20Text%20Input\nimport React, {useState} from 'react';\nimport {Text, TextInput, View} from 'react-native';\n\nconst PizzaTranslator = () => {\n  const [text, setText] = useState('');\n  return (\n    <View style={{padding: 10}}>\n      <TextInput\n        style={{height: 40}}\n        placeholder=\"Type here to translate!\"\n        onChangeText={newText => setText(newText)}\n        defaultValue={text}\n      />\n      <Text style={{padding: 10, fontSize: 42}}>\n        {text\n          .split(' ')\n          .map(word => word && 'üçï')\n          .join(' ')}\n      </Text>\n    </View>\n  );\n};\n\nexport default PizzaTranslator;\n```",
      "source_content_hash": "29dbadb0a6ee28e76b054a158848c3b90ad60d8ceecadc0cbee74b3ea614aa1c",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "97ae4a01",
      "source_content": "In this example, we store `text` in the state, because it changes over time.",
      "source_content_hash": "fbb30f6fc0c2e4c998dff08cb00bc1a3e9abdd783b81e4e20a6a060299ec6a35",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "c3a738de",
      "source_content": "There are a lot more things you might want to do with a text input. For example, you could validate the text inside while the user types. For more detailed examples, see the [React docs on controlled components](https://react.dev/reference/react-dom/components/input#controlling-an-input-with-a-state-variable), or the [reference docs for TextInput](textinput.md).",
      "source_content_hash": "6a1aecd0dfad787430f6299f08009ad95bcc32ded6beb0e3c0868dc2476a9b13",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "3cfe6286",
      "source_content": "Text input is one of the ways the user interacts with the app. Next, let's look at another type of input and [learn how to handle touches](handling-touches.md).",
      "source_content_hash": "a0674d01409cd57093f403094e20623f63b788adfd8a44b02e745340028c90d4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.74/handling-text-input.md",
  "last_updated_timestamp": "2025-06-18T09:36:12.061331+00:00",
  "schema_version": "1.0",
  "translated_versions": {}
}