{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.74/the-new-architecture/landing-page.md",
  "source_file_content_hash": "aa463ef17b636fa2bbc969f8ba8f7937abf2a6a81ef0a1a1333f02f078feb28d",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: landing-page\ntitle: About the New Architecture\n---",
      "source_content_hash": "7279839d1ca31dc3bbb4689e55315f73588fccf13c8d458b07cb6356c0b2aba2",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "0eeea6cc",
      "source_content": ":::info\nIf you are looking for the New Architecture guides, they have moved to the [working group](https://github.com/reactwg/react-native-new-architecture#guides).\n:::",
      "source_content_hash": "107a293004b85be02e0d885333afb5f00b17bcd19c247e824415714f6fe2f702",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::info\n若您正在尋找新架構指南，它們已遷移至[工作小組](https://github.com/reactwg/react-native-new-architecture#guides)。\n:::"
      }
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "Since 2018, the React Native team has been redesigning the core internals of React Native to enable developers to create higher-quality experiences. As of 2024, this version of React Native has been proven at scale and powers production apps by Meta.",
      "source_content_hash": "cb0a532ee179aee55a760b3aacf322ce91c97226b1da80d39d45513e9c79b179",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "自2018年起，React Native團隊便開始重新設計React Native的核心內部架構，以讓開發者能打造更高品質的使用體驗。截至2024年，此版本的React Native已通過大規模驗證，並支撐著Meta的生產環境應用程式。"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "The term _New Architecture_ refers to both the new framework architecture and the work to bring it to open source.",
      "source_content_hash": "8e50f020c51e9b01c06450382420d5d6201728057f45c8001c1a34ff321468a2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "「新架構」一詞同時指涉新的框架架構設計，以及將其引入開源生態系的工作。"
      }
    },
    {
      "segment_id": "ad8fd492",
      "source_content": "The New Architecture has been available for experimental opt-in as of [React Native 0.68](/blog/2022/03/30/version-068#opting-in-to-the-new-architecture) with continued improvements in every subsequent release. The team is now working to make this the default experience for the React Native open source ecosystem.",
      "source_content_hash": "652fe8c324823bffd4a377c130fe581d0b2ac52101b11271ce89d79d8c092642",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "新架構自[React Native 0.68](/blog/2022/03/30/version-068#opting-in-to-the-new-architecture)起已開放實驗性啟用，並在後續每個版本持續改進。團隊現正致力使其成為React Native開源生態系的預設體驗。"
      }
    },
    {
      "segment_id": "cbe57f9d",
      "source_content": "## Why a New Architecture?",
      "source_content_hash": "464d6cf0c3e6ce69b195d365be145f310af6ad3cac8ede332c213ea04e3bffa4",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 為何需要新架構？"
      }
    },
    {
      "segment_id": "39b3772c",
      "source_content": "After many years of building with React Native, the team identified a set of limitations that prevented developers from crafting certain experiences with a high polish. These limitations were fundamental to the existing design of the framework, so the New Architecture started as an investment in the future of React Native.",
      "source_content_hash": "071b3f6bea6e66ba6134f0a864c57e1ed450d8d37c715ab8747d67707e768500",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "經過多年使用React Native進行開發，團隊識別出一系列限制，這些限制阻礙開發者打造高度精緻的使用體驗。這些限制源自框架現有設計的根本性問題，因此新架構成為對React Native未來的投資。"
      }
    },
    {
      "segment_id": "1acb9a05",
      "source_content": "The New Architecture unlocks capabilities and improvements that were impossible in the legacy architecture.",
      "source_content_hash": "f2014f411bdcc1f85069a695654a62f24963fe1245664beb35f295d0a7c25a6b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "新架構解鎖了舊架構無法實現的功能與改進。"
      }
    },
    {
      "segment_id": "63622bf0",
      "source_content": "### Synchronous Layout and Effects",
      "source_content_hash": "9e4b474c070eec86eaffd3fd589b82a96d066e24fe8467de5bc3817bf9f2b2f2",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 同步佈局與效果"
      }
    },
    {
      "segment_id": "98cfbd53",
      "source_content": "Building adaptive UI experiences often requires measuring the size and position of your views and adjusting layout.",
      "source_content_hash": "e78103007deb3f5b7bea8cb38f01f5a7b5334d3a09748aee18ef240a9d00acc2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "建構自適應UI體驗常需測量視圖的尺寸與位置，並據此調整佈局。"
      }
    },
    {
      "segment_id": "ccc88b4c",
      "source_content": "Today, you would use the [`onLayout`](/docs/view#onlayout) event to get the layout information of a view and make any adjustments. However, state updates within the `onLayout` callback may apply after painting the previous render. This means that users may see intermediate states or visual jumps between rendering the initial layout and responding to layout measurements.",
      "source_content_hash": "3c81f4a46c95f24d36dd82f85bd88e9ce3c6ce020325f9fc53b4b9f13f68b24b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現今您會使用[`onLayout`](/docs/view#onlayout)事件來取得視圖的佈局資訊並進行調整。然而，在`onLayout`回調中的狀態更新可能在前次渲染繪製完成後才生效。這意味著使用者可能看到初始佈局與回應佈局測量之間的過渡狀態或視覺跳動。"
      }
    },
    {
      "segment_id": "d9172fa4",
      "source_content": "With the New Architecture, we can avoid this issue entirely with synchronous access to layout information and properly scheduled updates such that no intermediate state is visible to users.",
      "source_content_hash": "1718ac8c01aff37510c029b4f24989db3577a97668d99e378cbdcb1e63e35568",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "透過新架構，我們能完全避免此問題——藉由同步存取佈局資訊與妥善排程更新，確保使用者不會看到任何過渡狀態。"
      }
    },
    {
      "segment_id": "599822a5",
      "source_content": "<details>\n<summary>Example: Rendering a Tooltip</summary>\n\nMeasuring and placing a tooltip above a view allows us to showcase what synchronous rendering unlocks. The tooltip needs to know the position of its target view to determine where it should render.\n\nIn the current architecture, we use `onLayout` to get the measurements of the view and then update the positioning of the tooltip based on where the view is.\n\n```jsx\nfunction ViewWithTooltip() {\n  // ...\n\n  // We get the layout information and pass to ToolTip to position itself\n  const onLayout = React.useCallback(event => {\n    targetRef.current?.measureInWindow((x, y, width, height) => {\n      // This state update is not guaranteed to run in the same commit\n      // This results in a visual \"jump\" as the ToolTip repositions itself\n      setTargetRect({x, y, width, height});\n    });\n  }, []);\n\n  return (\n    <>\n      <View ref={targetRef} onLayout={onLayout}>\n        <Text>Some content that renders a tooltip above</Text>\n      </View>\n      <Tooltip targetRect={targetRect} />\n    </>\n  );\n}\n```\n\nWith the New Architecture, we can use [`useLayoutEffect`](https://react.dev/reference/react/useLayoutEffect) to synchronously measure and apply layout updates in a single commit, avoiding the visual \"jump\".\n\n```jsx\nfunction ViewWithTooltip() {\n  // ...\n\n  useLayoutEffect(() => {\n    // The measurement and state update for `targetRect` happens in a single commit\n    // allowing ToolTip to position itself without intermediate paints\n    targetRef.current?.measureInWindow((x, y, width, height) => {\n      setTargetRect({x, y, width, height});\n    });\n  }, [setTargetRect]);\n\n  return (\n    <>\n      <View ref={targetRef}>\n        <Text>Some content that renders a tooltip above</Text>\n      </View>\n      <Tooltip targetRect={targetRect} />\n    </>\n  );\n}\n```\n\n<div className=\"TwoColumns TwoFigures\">\n <figure>\n  <img src=\"/img/new-architecture/async-on-layout.gif\" alt=\"A view that is moving to the corners of the viewport and center with a tooltip rendered either above or below it. The tooltip is rendered after a short delay after the view moves\" />\n  <figcaption>Asynchronous measurement and render of the ToolTip. [See code](https://gist.github.com/lunaleaps/eabd653d9864082ac1d3772dac217ab9).</figcaption>\n</figure>\n<figure>\n  <img src=\"/img/new-architecture/sync-use-layout-effect.gif\" alt=\"A view that is moving to the corners of the viewport and center with a tooltip rendered either above or below it. The view and tooltip move in unison.\" />\n  <figcaption>Synchronous measurement and render of the ToolTip. [See code](https://gist.github.com/lunaleaps/148756563999c83220887757f2e549a3).</figcaption>\n</figure>\n</div>\n\n</details>",
      "source_content_hash": "e7e8a56175297481d4e3d20be910d570309df8f3b2b91d5a0255e1c63b173f3c",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_599822a5"
      }
    },
    {
      "segment_id": "e06c002e",
      "source_content": "### Support for Concurrent Renderer and Features",
      "source_content_hash": "d7a843cab033a4fd0498898092244ba329f98ae9883ff2d2b870604c46f3c971",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 支援並行渲染器與功能"
      }
    },
    {
      "segment_id": "25212439",
      "source_content": "The New Architecture supports concurrent rendering and features that have shipped in [React 18](https://react.dev/blog/2022/03/29/react-v18) and beyond. You can now use features like Suspense for data-fetching, Transitions, and other new React APIs in your React Native code, further conforming codebases and concepts between web and native React development.",
      "source_content_hash": "ec23a07a2626910d499ccb21acf6e87590e5f2cef3d401b447ce64e029093114",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "新架構支援[React 18](https://react.dev/blog/2022/03/29/react-v18)後引入的並行渲染與功能。您現在能在React Native程式碼中使用如Suspense資料擷取、Transitions等新React API，進一步統一網頁與原生React開發的程式碼庫與概念。"
      }
    },
    {
      "segment_id": "d79a4831",
      "source_content": "The concurrent renderer also brings out-of-the-box improvements like automatic batching, which reduces re-renders in React.",
      "source_content_hash": "41d0f02b4897699c45443a439ee8563af5b449f4a5af6ddac41e4300d437c540",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "並行渲染器還帶來開箱即用的改進，例如自動批次處理可減少React中的重新渲染。"
      }
    },
    {
      "segment_id": "440823bd",
      "source_content": "<details>\n<summary>Example: Automatic Batching</summary>\n\nWith the New Architecture, you'll get automatic batching with the React 18 renderer.\n\nIn this example, a slider specifies how many tiles to render. Dragging the slider from 0 to 1000 will fire off a quick succession of state updates and re-renders.\n\nIn comparing the renderers for the [same code](https://gist.github.com/lunaleaps/79bb6f263404b12ba57db78e5f6f28b2), you can visually notice the renderer provides a smoother UI, with less intermediate UI updates. State updates from native event handlers, like this native Slider component, are now batched.\n\n<div className=\"TwoColumns TwoFigures\">\n <figure>\n  <img src=\"/img/new-architecture/legacy-renderer.gif\" alt=\"A video demonstrating an app rendering many views according to a slider input. The slider value is adjusted from 0 to 1000 and the UI slowly catches up to rendering 1000 views.\" />\n  <figcaption>Rendering frequent state updates with legacy renderer.</figcaption>\n</figure>\n<figure>\n  <img src=\"/img/new-architecture/react18-renderer.gif\" alt=\"A video demonstrating an app rendering many views according to a slider input. The slider value is adjusted from 0 to 1000 and the UI resolves to 1000 views faster than the previous example, without as many intermediate states.\" />\n  <figcaption>Rendering frequent state updates with React 18 renderer.</figcaption>\n</figure>\n</div>\n</details>",
      "source_content_hash": "3c95ab46746bea4c0d3333e89f5c02e403796d2c4ae73aec6f1becae185db36a",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_440823bd"
      }
    },
    {
      "segment_id": "5f82a1e9",
      "source_content": "New concurrent features, like [Transitions](https://react.dev/reference/react/useTransition), give you the power to express the priority of UI updates. Marking an update as lower priority tells React it can \"interrupt\" rendering the update to handle higher priority updates to ensure a responsive user experience where it matters.",
      "source_content_hash": "db3e15c9e7dd0490548d482f0fbe7b2cd0d2a8fdb436667e423f3097db957b1e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "新的並行功能如[Transitions](https://react.dev/reference/react/useTransition)，讓您能表達UI更新的優先級。將更新標記為低優先級時，React可「中斷」該更新的渲染以處理更高優先級更新，確保關鍵處的使用體驗流暢。"
      }
    },
    {
      "segment_id": "8607cf29",
      "source_content": "<details>\n<summary>Example: Using `startTransition`</summary>\n\nWe can build on the previous example to showcase how transitions can interrupt in-progress rendering to handle a newer state update.\n\nWe wrap the tile number state update with `startTransition` to indicate that rendering the tiles can be interrupted. `startTransition` also provides a `isPending` flag to tell us when the transition is complete.\n\n```jsx\nfunction TileSlider({value, onValueChange}) {\n  const [isPending, startTransition] = useTransition();\n\n  return (\n    <>\n      <View>\n        <Text>\n          Render {value} Tiles\n        </Text>\n        <ActivityIndicator animating={isPending} />\n      </View>\n      <Slider\n        value={1}\n        minimumValue={1}\n        maximumValue={1000}\n        step={1}\n        onValueChange={newValue => {\n          startTransition(() => {\n            onValueChange(newValue);\n          });\n        }}\n      />\n    </>\n  );\n}\n\nfunction ManyTiles() {\n  const [value, setValue] = useState(1);\n  const tiles = generateTileViews(value);\n  return (\n      <TileSlider onValueChange={setValue} value={value} />\n      <View>\n        {tiles}\n      </View>\n  )\n}\n```\n\nYou'll notice that with the frequent updates in a transition, React renders fewer intermediate states because it bails out of rendering the state as soon as it becomes stale. In comparison, without transitions, more intermediate states are rendered. Both examples still use automatic batching. Still, transitions give even more power to developers to batch in-progress renders.\n\n<div className=\"TwoColumns TwoFigures\">\n<figure>\n  <img src=\"/img/new-architecture/with-transitions.gif\" alt=\"A video demonstrating an app rendering many views (tiles) according to a slider input. The views are rendered in batches as the slider is quickly adjusted from 0 to 1000. There are less batch renders in comparison to the next video.\" />\n  <figcaption>Rendering tiles with transitions to interrupt in-progress renders of stale state. [See code](https://gist.github.com/lunaleaps/eac391bf3fe4c85953cefeb74031bab0/revisions).</figcaption>\n</figure>\n<figure>\n  <img src=\"/img/new-architecture/without-transitions.gif\" alt=\"A video demonstrating an app rendering many views (tiles) according to a slider input. The views are rendered in batches as the slider is quickly adjusted from 0 to 1000.\" />\n  <figcaption>Rendering tiles without marking it as a transition. [See code](https://gist.github.com/lunaleaps/eac391bf3fe4c85953cefeb74031bab0/revisions).</figcaption>\n</figure>\n</div>\n</details>",
      "source_content_hash": "eb8e701c2c013bb1c994effac6b57ad1f4f5ca964872002b67854a7a3ff3d6f7",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_8607cf29"
      }
    },
    {
      "segment_id": "e63d69ef",
      "source_content": "### Fast JavaScript/Native Interfacing",
      "source_content_hash": "ebc0c8451c0b3af4ec1c3e717a397966221767e4bf9b61dea78a2ceb5a7c700e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 快速的JavaScript/原生介面交互"
      }
    },
    {
      "segment_id": "0427bb2b",
      "source_content": "The New Architecture removes the [asynchronous bridge](https://reactnative.dev/blog/2018/06/14/state-of-react-native-2018#architecture) between JavaScript and native and replaces it with JavaScript Interface (JSI). JSI is an interface that allows JavaScript to hold a reference to a C++ object and vice-versa. With a memory reference, you can directly invoke methods without serialization costs.",
      "source_content_hash": "b72e0417cffbe1883b31dc6a8d262d7307d460cb8da877e374d9ecf5675bd811",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "新架構移除了JavaScript與原生間的[非同步橋接](https://reactnative.dev/blog/2018/06/14/state-of-react-native-2018#architecture)，改以JavaScript介面（JSI）取代。JSI是一種允許JavaScript持有C++物件參考（反之亦然）的介面。透過記憶體參考，您可直接呼叫方法而無需序列化成本。"
      }
    },
    {
      "segment_id": "4899bc54",
      "source_content": "JSI enables [VisionCamera](https://github.com/mrousavy/react-native-vision-camera), a popular camera library for React Native, to process frames in real time. Typical frame buffers are 10 MB, which amounts to roughly 1 GB of data per second, depending on the frame rate. In comparison with the serialization costs of the bridge, JSI handles that amount of interfacing data with ease. JSI can expose other complex instance-based types such as databases, images, audio samples, etc.",
      "source_content_hash": "f0fce81be126f213e16dad5929de731f78ffa6b1be85b44c0ad5c6884701a388",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "JSI使熱門的React Native相機函式庫[VisionCamera](https://github.com/mrousavy/react-native-vision-camera)能即時處理影格。典型影格緩衝區為10MB，依影格速率不同，每秒約需處理1GB資料量。相較於橋接的序列化成本，JSI能輕鬆處理此量級的介面資料。JSI還能暴露其他複雜的實例型別，如資料庫、影像、音訊樣本等。"
      }
    },
    {
      "segment_id": "b27c61de",
      "source_content": "JSI adoption in the New Architecture removes this class of serialization work from all native-JavaScript interop. This includes initializing and re-rendering native core components like `View` and `Text`. You can read more about our [investigation in rendering performance](https://github.com/reactwg/react-native-new-architecture/discussions/123) in the New Architecture and the improved benchmarks we measured.",
      "source_content_hash": "19cfc16552540c2af0e794b78ced820f084587c67c845537c87a4bd58d168010",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "新架構中採用的 JSI 技術移除了所有原生與 JavaScript 互操作中的序列化工作。這包括初始化與重新渲染如 `View` 和 `Text` 等原生核心元件。您可以在新架構工作組的[渲染效能研究討論](https://github.com/reactwg/react-native-new-architecture/discussions/123)中閱讀更多關於我們測得的改進基準。"
      }
    },
    {
      "segment_id": "de588fa2",
      "source_content": "### Learn more",
      "source_content_hash": "83d74efdc950af7c8b51c2f8d97bfe4cd86fcd493e868356cda7131a4049c9b8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 了解更多"
      }
    },
    {
      "segment_id": "3799844b",
      "source_content": "To achieve this, the New Architecture had to refactor multiple parts of the React Native infrastructure. To learn more about the refactor and other benefits it brings, check out the [documentation](https://github.com/reactwg/react-native-new-architecture) in the New Architecture working group.",
      "source_content_hash": "dc656fd35634839322b5a5942918e04f0851debed457274cdcdbf49aed877553",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "為實現這些改進，新架構必須重構 React Native 基礎設施的多個部分。要了解重構細節及其他優勢，請查閱新架構工作組的[技術文件](https://github.com/reactwg/react-native-new-architecture)。"
      }
    },
    {
      "segment_id": "8159e12a",
      "source_content": "## What can I expect from enabling the New Architecture?",
      "source_content_hash": "21fdc4c866b44f11ee8cab9c051bef3d67bc3ea57835266b8f403037082d17b3",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 啟用新架構能獲得什麼？"
      }
    },
    {
      "segment_id": "6e5d54a8",
      "source_content": "While the New Architecture enables these features and improvements, enabling the New Architecture for your app or library may not immediately improve the performance or user experience.",
      "source_content_hash": "c4528ed8ba35fafbc40c9609724dae7b4085ee1a576c8037fdd2de5eeb6f7537",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "雖然新架構支援這些功能與改進，但立即為您的應用程式或函式庫啟用新架構未必能直接提升效能或用戶體驗。"
      }
    },
    {
      "segment_id": "48249e3c",
      "source_content": "For example, your code may need refactoring to leverage new capabilities like synchronous layout effects or concurrent features. Although JSI will minimize the overhead between JavaScript and native memory, data serialization may not have been a bottleneck for your app's performance.",
      "source_content_hash": "1d09a596228367190107b575e8cbc6e2c712133457f79d659d076f8693959226",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "例如，您的程式碼可能需要重構才能充分利用同步佈局效果或並行功能等新特性。儘管 JSI 能最小化 JavaScript 與原生記憶體間的開銷，但資料序列化可能原本就不是您應用效能的瓶頸。"
      }
    },
    {
      "segment_id": "ebfad7e4",
      "source_content": "Enabling the New Architecture in your app or library is opting into the future of React Native.",
      "source_content_hash": "9f798ffa5201163be9b5674fffd15cea9d74f3529b15691b84abf21c6e23cb87",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "為應用或函式庫啟用新架構，即是選擇擁抱 React Native 的未來。"
      }
    },
    {
      "segment_id": "7e563909",
      "source_content": "The team is actively researching and developing new capabilities the New Architecture unlocks. For example, web alignment is an active area of exploration at Meta that will ship to the React Native open source ecosystem.",
      "source_content_hash": "9bb658c68d3c68909a5b1510ce9a195ee6b60f0699cdc2ea7d83a702c37ce878",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "團隊正積極研究開發新架構解鎖的潛在功能。例如 Meta 正在探索的網頁對齊方案，未來將發布至 React Native 開源生態系。"
      }
    },
    {
      "segment_id": "7cfc0291",
      "source_content": "- [Updates to the event loop model](https://github.com/react-native-community/discussions-and-proposals/blob/main/proposals/0744-well-defined-event-loop.md)\n- [Node and layout APIs](https://github.com/react-native-community/discussions-and-proposals/blob/main/proposals/0607-dom-traversal-and-layout-apis.md)\n- [Styling and layout conformance](https://github.com/facebook/yoga/releases/tag/v2.0.0)",
      "source_content_hash": "9345afebae7da42df955768146eff83f98f722fe44199fcd877fd08a981f1925",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- [事件循環模型的更新](https://github.com/react-native-community/discussions-and-proposals/blob/main/proposals/0744-well-defined-event-loop.md)\n- [節點與佈局 API](https://github.com/react-native-community/discussions-and-proposals/blob/main/proposals/0607-dom-traversal-and-layout-apis.md)\n- [樣式與佈局一致性](https://github.com/facebook/yoga/releases/tag/v2.0.0)"
      }
    },
    {
      "segment_id": "09512450",
      "source_content": "You can follow along and contribute in our dedicated [discussions & proposals](https://github.com/react-native-community/discussions-and-proposals/discussions/651) repository.",
      "source_content_hash": "c11d6ddd27caf5b3d59663c77fb16678083c994cab7c16d47fcefb3380bb97ef",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您可以在專屬的[討論與提案](https://github.com/react-native-community/discussions-and-proposals/discussions/651)儲存庫追蹤進度並參與貢獻。"
      }
    },
    {
      "segment_id": "49007f24",
      "source_content": "## Should I use the New Architecture today?",
      "source_content_hash": "05eb87568a8e8735105bd7a884d591e80a509084a89f1d3533772199994b4584",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 我現在應該採用新架構嗎？"
      }
    },
    {
      "segment_id": "be0f7233",
      "source_content": "At [React Conf 2024](https://youtu.be/Q5SMmKb7qVI?feature=shared&t=1219), we announced that the React Native [New Architecture is now in Beta](https://github.com/reactwg/react-native-new-architecture/discussions/189).",
      "source_content_hash": "d915a513d3fb86e26b0eeff4b4f7f21baf6ff701e5437a1ac2db9a6ae4af2e23",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在 [React Conf 2024](https://youtu.be/Q5SMmKb7qVI?feature=shared&t=1219) 大會上，我們宣布 React Native [新架構已進入 Beta 階段](https://github.com/reactwg/react-native-new-architecture/discussions/189)。"
      }
    },
    {
      "segment_id": "d8c366cc",
      "source_content": "We believe that the New Architecture is very close to be used in production.",
      "source_content_hash": "edd3be82b1f1c959e780933c5be2556f97de11e9e6f015bc54e2d51efc8bcd19",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們認為新架構已非常接近可投入正式生產環境的成熟度。"
      }
    },
    {
      "segment_id": "833ce577",
      "source_content": "Our guidance is as follows:",
      "source_content_hash": "cc724758ec4ed0c95ad3b69257ab9a6663566fee145e527247a2b7771b1ca2b3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現階段建議如下："
      }
    },
    {
      "segment_id": "dee201e7",
      "source_content": "- For most production apps, we do _not_ recommend enabling the New Architecture today. Waiting for the official release will offer the best experience.\n- However, we do advise for you to plan for the migration and to start trying it out.\n- If you maintain a React Native library, we recommend enabling it and verifying your use cases are covered. You can find the [instructions here](https://github.com/reactwg/react-native-new-architecture#guides).",
      "source_content_hash": "e966ee2d4f338a129e324d5f76456d3ad95b0dab8f091596500e860fc94eaccb",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 對多數正式環境應用，我們目前「不」建議立即啟用新架構。等待官方正式發布將獲得最佳體驗。\n- 但建議您開始規劃遷移並進行測試驗證。\n- 若您維護 React Native 函式庫，建議啟用新架構並確認您的使用情境已被涵蓋。[操作指南請見此處](https://github.com/reactwg/react-native-new-architecture#guides)。"
      }
    },
    {
      "segment_id": "43662a16",
      "source_content": "### Enable the New Architecture",
      "source_content_hash": "f6e4a0388dc391eefae219a877955a2dc23e792c7f682a9794f1c7ca000cf919",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 啟用新架構"
      }
    },
    {
      "segment_id": "85821ad3",
      "source_content": "If you are interested in dogfooding the New Architecture experience, you can find [instructions](https://github.com/reactwg/react-native-new-architecture/blob/main/docs/enable-apps.md) in our dedicated working group. The [New Architecture working group](https://github.com/reactwg/react-native-new-architecture) is a dedicated space for support and coordination for New Architecture adoption and where the team posts regular updates.",
      "source_content_hash": "48629520619a600416f5fff2c122df19755061e96c5b2429367062d25457020b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若您有意參與新架構的實際測試，可在我們專屬工作組找到[啟用指南](https://github.com/reactwg/react-native-new-architecture/blob/main/docs/enable-apps.md)。[新架構工作組](https://github.com/reactwg/react-native-new-architecture)是獲取支援與協調新架構採用的專屬空間，團隊會在此定期發布更新。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.74/the-new-architecture/landing-page.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.520422+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "aa463ef17b636fa2bbc969f8ba8f7937abf2a6a81ef0a1a1333f02f078feb28d"
  }
}