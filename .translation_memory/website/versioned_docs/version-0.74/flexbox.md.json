{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.74/flexbox.md",
  "source_file_content_hash": "4946a9de2cb0d050029b2c718e11126f53bdd120169df978641d75818e24c89c",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: flexbox\ntitle: Layout with Flexbox\n---",
      "source_content_hash": "3cffe3efeab0344fefaf5b081037b4207be4071a62a8c1ede88db37784db5627",
      "node_type": "yaml",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "A component can specify the layout of its children using the Flexbox algorithm. Flexbox is designed to provide a consistent layout on different screen sizes.",
      "source_content_hash": "eb40390b9e17b030ad1ac620cd85634ead08833de65ddc9e3a6003f839a9df3e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "You will normally use a combination of `flexDirection`, `alignItems`, and `justifyContent` to achieve the right layout.",
      "source_content_hash": "8ca54f79a3081aaebdd7a18317131c05e68d6f0b5e7c150b1433d7ad3985263d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "0e7eb58c",
      "source_content": ":::caution\nFlexbox works the same way in React Native as it does in CSS on the web, with a few exceptions.\nThe defaults are different, with `flexDirection` defaulting to `column` instead of `row`, `alignContent` defaulting to `flex-start` instead of `stretch`, `flexShrink` defaulting to `0` instead of `1`, the `flex` parameter only supporting a single number.\n:::",
      "source_content_hash": "5b1463dcb220613eda4d344a58530c869d6635ce991120a476139914fff8ee9f",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "3daf1b88",
      "source_content": "## Flex",
      "source_content_hash": "ff56bb1d7f2aeb5c0debbfe043b42d72d4f1bed819d46ff31707dd88b4b153b8",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "f6168993",
      "source_content": "[`flex`](layout-props#flex) will define how your items are going to **“fill”** over the available space along your main axis. Space will be divided according to each element's flex property.",
      "source_content_hash": "9f9c5a7a2943b72365b2837ad5bf7988b99dbb9d661e69a2de308a77d4e35198",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "f5f6d2ce",
      "source_content": "In the following example, the red, orange, and green views are all children in the container view that has `flex: 1` set. The red view uses `flex: 1` , the orange view uses `flex: 2`, and the green view uses `flex: 3` . **1+2+3 = 6**, which means that the red view will get `1/6` of the space, the orange `2/6` of the space, and the green `3/6` of the space.",
      "source_content_hash": "17640a28cc75e5e274fe869aff57071a91c124d1f6cb98c40483cf7cc7f58904",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "41a8ae85",
      "source_content": "```SnackPlayer name=Flex%20Example\nimport React from 'react';\nimport {StyleSheet, View} from 'react-native';\n\nconst Flex = () => {\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          // Try setting `flexDirection` to `\"row\"`.\n          flexDirection: 'column',\n        },\n      ]}>\n      <View style={{flex: 1, backgroundColor: 'red'}} />\n      <View style={{flex: 2, backgroundColor: 'darkorange'}} />\n      <View style={{flex: 3, backgroundColor: 'green'}} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 20,\n  },\n});\n\nexport default Flex;\n```",
      "source_content_hash": "933c956d54f4c85539fc8e7fe60daab6ce07e3a9c1e5d5a6d84c5be69fab893b",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "60410af6",
      "source_content": "## Flex Direction",
      "source_content_hash": "2e29f1d62c5a23785004add253d2cfd17ee80941455667b00e012b73ea7cf100",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "b9aaa519",
      "source_content": "[`flexDirection`](layout-props#flexdirection) controls the direction in which the children of a node are laid out. This is also referred to as the main axis. The cross axis is the axis perpendicular to the main axis, or the axis which the wrapping lines are laid out in.",
      "source_content_hash": "31c691933763972d16e3ff37ccca279c780d9d086b2993528280656ed08aedc9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "e3321a43",
      "source_content": "- `column` (**default value**) Align children from top to bottom. If wrapping is enabled, then the next line will start to the right of the first item on the top of the container.\n\n- `row` Align children from left to right. If wrapping is enabled, then the next line will start under the first item on the left of the container.\n\n- `column-reverse` Align children from bottom to top. If wrapping is enabled, then the next line will start to the right of the first item on the bottom of the container.\n\n- `row-reverse` Align children from right to left. If wrapping is enabled, then the next line will start under the first item on the right of the container.",
      "source_content_hash": "6fd64c26c5bbdb5c62a21ef790a14d3b3cc69c2e6b7cbcfde7a7428d8d4068e5",
      "node_type": "list",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "531437ca",
      "source_content": "You can learn more [here](https://www.yogalayout.dev/docs/styling/flex-direction).",
      "source_content_hash": "f8b3f4301b395abb361e025ea21ef4c30a5bcf51d1523faeeb72395273945f49",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "c537a3d3",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Flex%20Direction&ext=js\nimport React, {useState} from 'react';\nimport {StyleSheet, Text, TouchableOpacity, View} from 'react-native';\n\nconst FlexDirectionBasics = () => {\n  const [flexDirection, setflexDirection] = useState('column');\n\n  return (\n    <PreviewLayout\n      label=\"flexDirection\"\n      values={['column', 'row', 'row-reverse', 'column-reverse']}\n      selectedValue={flexDirection}\n      setSelectedValue={setflexDirection}>\n      <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default FlexDirectionBasics;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Flex%20Direction&ext=tsx\nimport React, {useState} from 'react';\nimport {StyleSheet, Text, TouchableOpacity, View} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\nconst FlexDirectionBasics = () => {\n  const [flexDirection, setflexDirection] = useState('column');\n\n  return (\n    <PreviewLayout\n      label=\"flexDirection\"\n      values={['column', 'row', 'row-reverse', 'column-reverse']}\n      selectedValue={flexDirection}\n      setSelectedValue={setflexDirection}>\n      <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  label: string;\n  values: string[];\n  selectedValue: string;\n  setSelectedValue: (value: string) => void;\n}>;\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}: PreviewLayoutProps) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default FlexDirectionBasics;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "babe6df3eb56b7ef9d80a16f490d6f0bb640a400dcbad5b0989c70dca8a9bce5",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "846134ef",
      "source_content": "## Layout Direction",
      "source_content_hash": "842a814b2f8980bc1d84cfac3ae44b2a9319fe548d682179ed426020946c3b79",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "53e725dc",
      "source_content": "Layout [`direction`](layout-props#direction) specifies the direction in which children and text in a hierarchy should be laid out. Layout direction also affects what edge `start` and `end` refer to. By default, React Native lays out with LTR layout direction. In this mode `start` refers to left and `end` refers to right.",
      "source_content_hash": "4726927926e7f9e1d71f85b98b1d988b0f056db8a03051e59072923e0068b115",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "ce3bcadf",
      "source_content": "- `LTR` (**default value**) Text and children are laid out from left to right. Margin and padding applied to the start of an element are applied on the left side.\n\n- `RTL` Text and children are laid out from right to left. Margin and padding applied to the start of an element are applied on the right side.",
      "source_content_hash": "a64fe861fff55c46aebc247e0005ae69b731b4e91ebb5238de27cc4afbc3908d",
      "node_type": "list",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "5ca07c68",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Flex%20Direction&ext=js\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\n\nconst DirectionLayout = () => {\n  const [direction, setDirection] = useState('ltr');\n\n  return (\n    <PreviewLayout\n      label=\"direction\"\n      selectedValue={direction}\n      values={['ltr', 'rtl']}\n      setSelectedValue={setDirection}>\n      <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default DirectionLayout;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Flex%20Direction&ext=tsx\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\nconst DirectionLayout = () => {\n  const [direction, setDirection] = useState('ltr');\n\n  return (\n    <PreviewLayout\n      label=\"direction\"\n      selectedValue={direction}\n      values={['ltr', 'rtl']}\n      setSelectedValue={setDirection}>\n      <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  label: string;\n  values: string[];\n  selectedValue: string;\n  setSelectedValue: (value: string) => void;\n}>;\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}: PreviewLayoutProps) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default DirectionLayout;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "4b19a3bf8381091b00c5eb0ff5d2bc033b86b304c8adcf6a2b2b70bbb8cb1cf2",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "152bce91",
      "source_content": "## Justify Content",
      "source_content_hash": "840f78008b3f94616629a64bb95ca9cf78d79800f224748f9fc2fb2215321938",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "13ccbdec",
      "source_content": "[`justifyContent`](layout-props#justifycontent) describes how to align children within the main axis of their container. For example, you can use this property to center a child horizontally within a container with `flexDirection` set to `row` or vertically within a container with `flexDirection` set to `column`.",
      "source_content_hash": "1ee3c058132b1f74ea44bdf7a78928a975e77dcee1bdb337e2334a5c5f184e45",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "bc349d8b",
      "source_content": "- `flex-start`(**default value**) Align children of a container to the start of the container's main axis.\n\n- `flex-end` Align children of a container to the end of the container's main axis.\n\n- `center` Align children of a container in the center of the container's main axis.\n\n- `space-between` Evenly space off children across the container's main axis, distributing the remaining space between the children.\n\n- `space-around` Evenly space off children across the container's main axis, distributing the remaining space around the children. Compared to `space-between`, using `space-around` will result in space being distributed to the beginning of the first child and end of the last child.\n\n- `space-evenly` Evenly distribute children within the alignment container along the main axis. The spacing between each pair of adjacent items, the main-start edge and the first item, and the main-end edge and the last item, are all exactly the same.",
      "source_content_hash": "d66e4a85883a69a0d4ea3decb06800941d592fff60d5196270471176f8d6f12b",
      "node_type": "list",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "0cfab7d6",
      "source_content": "You can learn more [here](https://www.yogalayout.dev/docs/styling/justify-content).",
      "source_content_hash": "ffea2bc829be9a3d5c0b44d9a3cc30e745f09663ba0447c805b92c21fd0eec65",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "c59938e3",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Justify%20Content&ext=js\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\n\nconst JustifyContentBasics = () => {\n  const [justifyContent, setJustifyContent] = useState('flex-start');\n\n  return (\n    <PreviewLayout\n      label=\"justifyContent\"\n      selectedValue={justifyContent}\n      values={[\n        'flex-start',\n        'flex-end',\n        'center',\n        'space-between',\n        'space-around',\n        'space-evenly',\n      ]}\n      setSelectedValue={setJustifyContent}>\n      <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default JustifyContentBasics;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Justify%20Content&ext=tsx\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\nconst JustifyContentBasics = () => {\n  const [justifyContent, setJustifyContent] = useState('flex-start');\n\n  return (\n    <PreviewLayout\n      label=\"justifyContent\"\n      selectedValue={justifyContent}\n      values={[\n        'flex-start',\n        'flex-end',\n        'center',\n        'space-between',\n        'space-around',\n        'space-evenly',\n      ]}\n      setSelectedValue={setJustifyContent}>\n      <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  label: string;\n  values: string[];\n  selectedValue: string;\n  setSelectedValue: (value: string) => void;\n}>;\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}: PreviewLayoutProps) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default JustifyContentBasics;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "475d91748232ef3ab66d9a2a49a93bb8d5be3eebb3bdc54f07e90ac7ef287152",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "ad565a3c",
      "source_content": "## Align Items",
      "source_content_hash": "4a257fc0b309880e9e3f4d32e5561e340d5d0f0698b72ad4af9b6c941190f9a0",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "f3bed9df",
      "source_content": "[`alignItems`](layout-props#alignitems) describes how to align children along the cross axis of their container. It is very similar to `justifyContent` but instead of applying to the main axis, `alignItems` applies to the cross axis.",
      "source_content_hash": "2b75409e3d026ddb305cd0dd98bdb2a3b69ef269b277fa4ea87a300bd6db24ea",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "97506226",
      "source_content": "- `stretch` (**default value**) Stretch children of a container to match the `height` of the container's cross axis.\n\n- `flex-start` Align children of a container to the start of the container's cross axis.\n\n- `flex-end` Align children of a container to the end of the container's cross axis.\n\n- `center` Align children of a container in the center of the container's cross axis.\n\n- `baseline` Align children of a container along a common baseline. Individual children can be set to be the reference baseline for their parents.",
      "source_content_hash": "c0b59b55b33df64bca195a6ef000c076ec172c395839f1f91b573fe2004d87bf",
      "node_type": "list",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "5a357fc6",
      "source_content": ":::info\nFor `stretch` to have an effect, children must not have a fixed dimension along the secondary axis. In the following example, setting `alignItems: stretch` does nothing until the `width: 50` is removed from the children.\n:::",
      "source_content_hash": "e1b425c1e91099317e24dd288a7d908b13c719d10f54d2247d8de34a60fac858",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "1c6a8a5f",
      "source_content": "You can learn more [here](https://www.yogalayout.dev/docs/styling/align-items-self).",
      "source_content_hash": "a04e8895ef377f342175a6eae6224eef20f0ed452b136d32e86bfc4cb844cfb4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "40c3fbc2",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Align%20Items&ext=js\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\n\nconst AlignItemsLayout = () => {\n  const [alignItems, setAlignItems] = useState('stretch');\n\n  return (\n    <PreviewLayout\n      label=\"alignItems\"\n      selectedValue={alignItems}\n      values={['stretch', 'flex-start', 'flex-end', 'center', 'baseline']}\n      setSelectedValue={setAlignItems}>\n      <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View\n        style={[\n          styles.box,\n          {\n            backgroundColor: 'steelblue',\n            width: 'auto',\n            minWidth: 50,\n          },\n        ]}\n      />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    minHeight: 200,\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default AlignItemsLayout;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Align%20Items&ext=tsx\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\nconst AlignItemsLayout = () => {\n  const [alignItems, setAlignItems] = useState('stretch');\n\n  return (\n    <PreviewLayout\n      label=\"alignItems\"\n      selectedValue={alignItems}\n      values={['stretch', 'flex-start', 'flex-end', 'center', 'baseline']}\n      setSelectedValue={setAlignItems}>\n      <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View\n        style={[\n          styles.box,\n          {\n            backgroundColor: 'steelblue',\n            width: 'auto',\n            minWidth: 50,\n          },\n        ]}\n      />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  label: string;\n  values: string[];\n  selectedValue: string;\n  setSelectedValue: (value: string) => void;\n}>;\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}: PreviewLayoutProps) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    minHeight: 200,\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default AlignItemsLayout;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "ddb5acb2606da3d05d65acc10551474ac25a69e422b08e21fd05b51411143c16",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "deab0099",
      "source_content": "## Align Self",
      "source_content_hash": "ecdf1fe73b26ca53ae8c7b402251de8585b389387f753cacd134810827319db8",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "f6e6394b",
      "source_content": "[`alignSelf`](layout-props#alignself) has the same options and effect as `alignItems` but instead of affecting the children within a container, you can apply this property to a single child to change its alignment within its parent. `alignSelf` overrides any option set by the parent with `alignItems`.",
      "source_content_hash": "ba21022150698e23c7cc8ce61e760c45bfd29fcc0c9ea85fc964e3eb55d58b7b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "c39d71d5",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Align%20Self&ext=js\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\n\nconst AlignSelfLayout = () => {\n  const [alignSelf, setAlignSelf] = useState('stretch');\n\n  return (\n    <PreviewLayout\n      label=\"alignSelf\"\n      selectedValue={alignSelf}\n      values={['stretch', 'flex-start', 'flex-end', 'center', 'baseline']}\n      setSelectedValue={setAlignSelf}>\n      <View\n        style={[\n          styles.box,\n          {\n            alignSelf,\n            width: 'auto',\n            minWidth: 50,\n            backgroundColor: 'powderblue',\n          },\n        ]}\n      />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={styles.container}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    minHeight: 200,\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default AlignSelfLayout;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Align%20Self&ext=tsx\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport type {PropsWithChildren} from 'react';\nimport type {FlexAlignType} from 'react-native';\n\nconst AlignSelfLayout = () => {\n  const [alignSelf, setAlignSelf] = useState<FlexAlignType>('stretch');\n\n  return (\n    <PreviewLayout\n      label=\"alignSelf\"\n      selectedValue={alignSelf}\n      values={['stretch', 'flex-start', 'flex-end', 'center', 'baseline']}\n      setSelectedValue={setAlignSelf}>\n      <View\n        style={[\n          styles.box,\n          {\n            alignSelf,\n            width: 'auto',\n            minWidth: 50,\n            backgroundColor: 'powderblue',\n          },\n        ]}\n      />\n      <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  label: string;\n  values: FlexAlignType[];\n  selectedValue: string;\n  setSelectedValue: (value: FlexAlignType) => void;\n}>;\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}: PreviewLayoutProps) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={styles.container}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    minHeight: 200,\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default AlignSelfLayout;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "92db8b1c7844d14f9d79cdc3282f4f0c23af25098a8b2fb92ee4537fdf8c8d52",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "275d84f0",
      "source_content": "## Align Content",
      "source_content_hash": "9c03a57ec79e6466cf38530c8813f319f321f881ee383722ff113915c0bbdbf0",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "51f9efbf",
      "source_content": "[alignContent](layout-props#aligncontent) defines the distribution of lines along the cross-axis. This only has effect when items are wrapped to multiple lines using `flexWrap`.",
      "source_content_hash": "9c3f0eeded83d4fff244c3334f1324a22e56d1c01cfb70efb367339059dbdad3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "ff3b8884",
      "source_content": "- `flex-start` (**default value**) Align wrapped lines to the start of the container's cross axis.\n\n- `flex-end` Align wrapped lines to the end of the container's cross axis.\n\n- `stretch` (_default value when using Yoga on the web_) Stretch wrapped lines to match the height of the container's cross axis.\n\n- `center` Align wrapped lines in the center of the container's cross axis.\n\n- `space-between` Evenly space wrapped lines across the container's cross axis, distributing the remaining space between the lines.\n\n- `space-around` Evenly space wrapped lines across the container's cross axis, distributing the remaining space around the lines. Each end of the container has a half-sized space compared to the space between items.\n\n- `space-evenly` Evenly space wrapped lines across the container's cross axis, distributing the remaining space around the lines. Each space is the same size.",
      "source_content_hash": "152606c07853e826a7c97ba230daa50c262230ef272883e724f9ae5c84bb1be2",
      "node_type": "list",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "ef7bbc13",
      "source_content": "You can learn more [here](https://www.yogalayout.dev/docs/styling/align-content).",
      "source_content_hash": "ef439615f2751ef8a572d88bb2aa794a7ab8f36e19a0463d5520209cef0b2944",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "13615bdd",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Align%20Content&ext=js\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\n\nconst AlignContentLayout = () => {\n  const [alignContent, setAlignContent] = useState('flex-start');\n\n  return (\n    <PreviewLayout\n      label=\"alignContent\"\n      selectedValue={alignContent}\n      values={[\n        'flex-start',\n        'flex-end',\n        'stretch',\n        'center',\n        'space-between',\n        'space-around',\n      ]}\n      setSelectedValue={setAlignContent}>\n      <View style={[styles.box, {backgroundColor: 'orangered'}]} />\n      <View style={[styles.box, {backgroundColor: 'orange'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumseagreen'}]} />\n      <View style={[styles.box, {backgroundColor: 'deepskyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumturquoise'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumslateblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'purple'}]} />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexWrap: 'wrap',\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    maxHeight: 400,\n  },\n  box: {\n    width: 50,\n    height: 80,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default AlignContentLayout;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Align%20Content&ext=tsx\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\nconst AlignContentLayout = () => {\n  const [alignContent, setAlignContent] = useState('flex-start');\n\n  return (\n    <PreviewLayout\n      label=\"alignContent\"\n      selectedValue={alignContent}\n      values={[\n        'flex-start',\n        'flex-end',\n        'stretch',\n        'center',\n        'space-between',\n        'space-around',\n      ]}\n      setSelectedValue={setAlignContent}>\n      <View style={[styles.box, {backgroundColor: 'orangered'}]} />\n      <View style={[styles.box, {backgroundColor: 'orange'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumseagreen'}]} />\n      <View style={[styles.box, {backgroundColor: 'deepskyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumturquoise'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumslateblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'purple'}]} />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  label: string;\n  values: string[];\n  selectedValue: string;\n  setSelectedValue: (value: string) => void;\n}>;\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}: PreviewLayoutProps) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexWrap: 'wrap',\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    maxHeight: 400,\n  },\n  box: {\n    width: 50,\n    height: 80,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default AlignContentLayout;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "1838050b6aefcdcf2de007efa0c95e4f0597ea9eb722e3fe22799ec1c4b68767",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "fc816aab",
      "source_content": "## Flex Wrap",
      "source_content_hash": "ae598338f00b3983012e21fbf6ce0652cbfdae7d7d5574f8816ad992eb739c2c",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "2f8abb7c",
      "source_content": "The [`flexWrap`](layout-props#flexwrap) property is set on containers and it controls what happens when children overflow the size of the container along the main axis. By default, children are forced into a single line (which can shrink elements). If wrapping is allowed, items are wrapped into multiple lines along the main axis if needed.",
      "source_content_hash": "1b2bc65b6fdbc3821bbb37700cbda31630d7bdcf2e9779eb9cd02bb7617a3f7b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "783e0529",
      "source_content": "When wrapping lines, `alignContent` can be used to specify how the lines are placed in the container. Learn more [here](https://www.yogalayout.dev/docs/styling/flex-wrap).",
      "source_content_hash": "7c8111de27cdcba7a4ba95d26f88873e3ef7e2f518d894750074adade3ae61a5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "bded19c3",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Flex%20Wrap&ext=js\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\n\nconst FlexWrapLayout = () => {\n  const [flexWrap, setFlexWrap] = useState('wrap');\n\n  return (\n    <PreviewLayout\n      label=\"flexWrap\"\n      selectedValue={flexWrap}\n      values={['wrap', 'nowrap']}\n      setSelectedValue={setFlexWrap}>\n      <View style={[styles.box, {backgroundColor: 'orangered'}]} />\n      <View style={[styles.box, {backgroundColor: 'orange'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumseagreen'}]} />\n      <View style={[styles.box, {backgroundColor: 'deepskyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumturquoise'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumslateblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'purple'}]} />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    maxHeight: 400,\n  },\n  box: {\n    width: 50,\n    height: 80,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default FlexWrapLayout;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Flex%20Wrap&ext=tsx\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\nconst FlexWrapLayout = () => {\n  const [flexWrap, setFlexWrap] = useState('wrap');\n\n  return (\n    <PreviewLayout\n      label=\"flexWrap\"\n      selectedValue={flexWrap}\n      values={['wrap', 'nowrap']}\n      setSelectedValue={setFlexWrap}>\n      <View style={[styles.box, {backgroundColor: 'orangered'}]} />\n      <View style={[styles.box, {backgroundColor: 'orange'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumseagreen'}]} />\n      <View style={[styles.box, {backgroundColor: 'deepskyblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumturquoise'}]} />\n      <View style={[styles.box, {backgroundColor: 'mediumslateblue'}]} />\n      <View style={[styles.box, {backgroundColor: 'purple'}]} />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  label: string;\n  values: string[];\n  selectedValue: string;\n  setSelectedValue: (value: string) => void;\n}>;\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}: PreviewLayoutProps) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={[styles.container, {[label]: selectedValue}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    maxHeight: 400,\n  },\n  box: {\n    width: 50,\n    height: 80,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default FlexWrapLayout;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "aad93577ac35eaec2dd2365fc8a5443476e8dc3cb69ffdd4056d8105cb7e304d",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "f6aa7c0b",
      "source_content": "## Flex Basis, Grow, and Shrink",
      "source_content_hash": "8acecf6054c35b03920f4b8a6252a3a1e97a03254843bfc79319b34123224b1e",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "60b0dc85",
      "source_content": "- [`flexBasis`](layout-props#flexbasis) is an axis-independent way of providing the default size of an item along the main axis. Setting the `flexBasis` of a child is similar to setting the `width` of that child if its parent is a container with `flexDirection: row` or setting the `height` of a child if its parent is a container with `flexDirection: column`. The `flexBasis` of an item is the default size of that item, the size of the item before any `flexGrow` and `flexShrink` calculations are performed.\n\n- [`flexGrow`](layout-props#flexgrow) describes how much space within a container should be distributed among its children along the main axis. After laying out its children, a container will distribute any remaining space according to the flex grow values specified by its children.\n\n  `flexGrow` accepts any floating point value >= 0, with 0 being the default value. A container will distribute any remaining space among its children weighted by the children’s `flexGrow` values.\n\n- [`flexShrink`](layout-props#flexshrink) describes how to shrink children along the main axis in the case in which the total size of the children overflows the size of the container on the main axis. `flexShrink` is very similar to `flexGrow` and can be thought of in the same way if any overflowing size is considered to be negative remaining space. These two properties also work well together by allowing children to grow and shrink as needed.\n\n  `flexShrink` accepts any floating point value >= 0, with 0 being the default value (on the web, the default is 1). A container will shrink its children weighted by the children’s `flexShrink` values.",
      "source_content_hash": "72a7450dcecce3fa4c817a16091c1961a34ad3a29a784a94e7420301677dc277",
      "node_type": "list",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "5df73577",
      "source_content": "You can learn more [here](https://www.yogalayout.dev/docs/styling/flex-basis-grow-shrink).",
      "source_content_hash": "5458d253bbb99ff108a7c3fe9af852408e3428675a6bb8e21d1c51091f47425b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "35f6c801",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Flex%20Basis%2C%20Grow%2C%20and%20Shrink&ext=js\nimport React, {useState} from 'react';\nimport {View, Text, TextInput, StyleSheet} from 'react-native';\n\nconst App = () => {\n  const [powderblue, setPowderblue] = useState({\n    flexGrow: 0,\n    flexShrink: 1,\n    flexBasis: 'auto',\n  });\n  const [skyblue, setSkyblue] = useState({\n    flexGrow: 1,\n    flexShrink: 0,\n    flexBasis: 100,\n  });\n  const [steelblue, setSteelblue] = useState({\n    flexGrow: 0,\n    flexShrink: 1,\n    flexBasis: 200,\n  });\n  return (\n    <View style={styles.container}>\n      <View\n        style={[\n          styles.container,\n          {\n            flexDirection: 'row',\n            alignContent: 'space-between',\n          },\n        ]}>\n        <BoxInfo color=\"powderblue\" {...powderblue} setStyle={setPowderblue} />\n        <BoxInfo color=\"skyblue\" {...skyblue} setStyle={setSkyblue} />\n        <BoxInfo color=\"steelblue\" {...steelblue} setStyle={setSteelblue} />\n      </View>\n      <View style={styles.previewContainer}>\n        <View\n          style={[\n            styles.box,\n            {\n              flexBasis: powderblue.flexBasis,\n              flexGrow: powderblue.flexGrow,\n              flexShrink: powderblue.flexShrink,\n              backgroundColor: 'powderblue',\n            },\n          ]}\n        />\n        <View\n          style={[\n            styles.box,\n            {\n              flexBasis: skyblue.flexBasis,\n              flexGrow: skyblue.flexGrow,\n              flexShrink: skyblue.flexShrink,\n              backgroundColor: 'skyblue',\n            },\n          ]}\n        />\n        <View\n          style={[\n            styles.box,\n            {\n              flexBasis: steelblue.flexBasis,\n              flexGrow: steelblue.flexGrow,\n              flexShrink: steelblue.flexShrink,\n              backgroundColor: 'steelblue',\n            },\n          ]}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst BoxInfo = ({color, flexBasis, flexShrink, setStyle, flexGrow}) => (\n  <View style={[styles.row, {flexDirection: 'column'}]}>\n    <View\n      style={[\n        styles.boxLabel,\n        {\n          backgroundColor: color,\n        },\n      ]}>\n      <Text\n        style={{\n          color: '#fff',\n          fontWeight: '500',\n          textAlign: 'center',\n        }}>\n        Box\n      </Text>\n    </View>\n    <Text style={styles.label}>flexBasis</Text>\n    <TextInput\n      value={flexBasis}\n      style={styles.input}\n      onChangeText={fB =>\n        setStyle(value => ({\n          ...value,\n          flexBasis: isNaN(parseInt(fB, 10)) ? 'auto' : parseInt(fB, 10),\n        }))\n      }\n    />\n    <Text style={styles.label}>flexShrink</Text>\n    <TextInput\n      value={flexShrink}\n      style={styles.input}\n      onChangeText={fS =>\n        setStyle(value => ({\n          ...value,\n          flexShrink: isNaN(parseInt(fS, 10)) ? undefined : parseInt(fS, 10),\n        }))\n      }\n    />\n    <Text style={styles.label}>flexGrow</Text>\n    <TextInput\n      value={flexGrow}\n      style={styles.input}\n      onChangeText={fG =>\n        setStyle(value => ({\n          ...value,\n          flexGrow: isNaN(parseInt(fG, 10)) ? undefined : parseInt(fG, 10),\n        }))\n      }\n    />\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 10,\n  },\n  box: {\n    flex: 1,\n    height: 50,\n    width: 50,\n  },\n  boxLabel: {\n    minWidth: 80,\n    padding: 8,\n    borderRadius: 4,\n    marginTop: 8,\n  },\n  label: {\n    marginTop: 6,\n    fontSize: 16,\n    fontWeight: '100',\n  },\n  previewContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'aliceblue',\n  },\n  row: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n  input: {\n    borderBottomWidth: 1,\n    paddingVertical: 3,\n    width: 50,\n    textAlign: 'center',\n  },\n});\n\nexport default App;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Flex%20Basis%2C%20Grow%2C%20and%20Shrink&ext=tsx\nimport React, {useState} from 'react';\nimport {View, Text, TextInput, StyleSheet} from 'react-native';\nimport type {ViewStyle} from 'react-native';\n\nconst App = () => {\n  const [powderblue, setPowderblue] = useState<ViewStyle>({\n    flexGrow: 0,\n    flexShrink: 1,\n    flexBasis: 'auto',\n  });\n  const [skyblue, setSkyblue] = useState<ViewStyle>({\n    flexGrow: 1,\n    flexShrink: 0,\n    flexBasis: 100,\n  });\n  const [steelblue, setSteelblue] = useState<ViewStyle>({\n    flexGrow: 0,\n    flexShrink: 1,\n    flexBasis: 200,\n  });\n  return (\n    <View style={styles.container}>\n      <View\n        style={[\n          styles.container,\n          {\n            flexDirection: 'row',\n            alignContent: 'space-between',\n          },\n        ]}>\n        <BoxInfo color=\"powderblue\" {...powderblue} setStyle={setPowderblue} />\n        <BoxInfo color=\"skyblue\" {...skyblue} setStyle={setSkyblue} />\n        <BoxInfo color=\"steelblue\" {...steelblue} setStyle={setSteelblue} />\n      </View>\n      <View style={styles.previewContainer}>\n        <View\n          style={[\n            styles.box,\n            {\n              flexBasis: powderblue.flexBasis,\n              flexGrow: powderblue.flexGrow,\n              flexShrink: powderblue.flexShrink,\n              backgroundColor: 'powderblue',\n            },\n          ]}\n        />\n        <View\n          style={[\n            styles.box,\n            {\n              flexBasis: skyblue.flexBasis,\n              flexGrow: skyblue.flexGrow,\n              flexShrink: skyblue.flexShrink,\n              backgroundColor: 'skyblue',\n            },\n          ]}\n        />\n        <View\n          style={[\n            styles.box,\n            {\n              flexBasis: steelblue.flexBasis,\n              flexGrow: steelblue.flexGrow,\n              flexShrink: steelblue.flexShrink,\n              backgroundColor: 'steelblue',\n            },\n          ]}\n        />\n      </View>\n    </View>\n  );\n};\n\ntype BoxInfoProps = ViewStyle & {\n  color: string;\n  setStyle: React.Dispatch<React.SetStateAction<ViewStyle>>;\n};\n\nconst BoxInfo = ({\n  color,\n  flexBasis,\n  flexShrink,\n  setStyle,\n  flexGrow,\n}: BoxInfoProps) => (\n  <View style={[styles.row, {flexDirection: 'column'}]}>\n    <View\n      style={[\n        styles.boxLabel,\n        {\n          backgroundColor: color,\n        },\n      ]}>\n      <Text\n        style={{\n          color: '#fff',\n          fontWeight: '500',\n          textAlign: 'center',\n        }}>\n        Box\n      </Text>\n    </View>\n    <Text style={styles.label}>flexBasis</Text>\n    <TextInput\n      value={String(flexBasis)}\n      style={styles.input}\n      onChangeText={fB =>\n        setStyle(value => ({\n          ...value,\n          flexBasis: isNaN(parseInt(fB, 10)) ? 'auto' : parseInt(fB, 10),\n        }))\n      }\n    />\n    <Text style={styles.label}>flexShrink</Text>\n    <TextInput\n      value={String(flexShrink)}\n      style={styles.input}\n      onChangeText={fS =>\n        setStyle(value => ({\n          ...value,\n          flexShrink: isNaN(parseInt(fS, 10)) ? undefined : parseInt(fS, 10),\n        }))\n      }\n    />\n    <Text style={styles.label}>flexGrow</Text>\n    <TextInput\n      value={String(flexGrow)}\n      style={styles.input}\n      onChangeText={fG =>\n        setStyle(value => ({\n          ...value,\n          flexGrow: isNaN(parseInt(fG, 10)) ? undefined : parseInt(fG, 10),\n        }))\n      }\n    />\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    paddingHorizontal: 10,\n  },\n  box: {\n    flex: 1,\n    height: 50,\n    width: 50,\n  },\n  boxLabel: {\n    minWidth: 80,\n    padding: 8,\n    borderRadius: 4,\n    marginTop: 8,\n  },\n  label: {\n    marginTop: 6,\n    fontSize: 16,\n    fontWeight: '100',\n  },\n  previewContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    backgroundColor: 'aliceblue',\n  },\n  row: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    marginBottom: 10,\n  },\n  input: {\n    borderBottomWidth: 1,\n    paddingVertical: 3,\n    width: 50,\n    textAlign: 'center',\n  },\n});\n\nexport default App;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "5fa9741ab2ac5cc348a9cec5f0db8c690a674066d11860f263a648d23e5dcd3f",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "df7fa11a",
      "source_content": "## Row Gap, Column Gap and Gap",
      "source_content_hash": "278caa0a1f01b45cb1bd72dee78aab008470585e32db3426ac41295f10eaa348",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "00010715",
      "source_content": "- [`rowGap`](layout-props#rowgap) sets the size of the gap (gutter) between an element's rows.\n\n- [`columnGap`](layout-props#columngap) sets the size of the gap (gutter) between an element's columns.\n\n- [`gap`](layout-props#gap) sets the size of the gap (gutter) between rows and columns. It is a shorthand for `rowGap` and `columnGap`.",
      "source_content_hash": "2daf0538f2637a2ed5ced7ddb7535839d8ecce973b3a5553024dcca0ba58db2b",
      "node_type": "list",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "9302d5ed",
      "source_content": "You can use `flexWrap` and `alignContent` along with `gap` to add consistent spacing between items.",
      "source_content_hash": "849494c346f8c42b41a7a2fc6f6c1f4bad58a5d886a981b7ba27a18f44a92e7f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "ed9c828d",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Row%20Gap%20and%20Column%20Gap&ext=js\nimport React, {useState} from 'react';\nimport {View, Text, StyleSheet, TextInput} from 'react-native';\n\nconst RowGapAndColumnGap = () => {\n  const [rowGap, setRowGap] = useState(10);\n  const [columnGap, setColumnGap] = useState(10);\n\n  return (\n    <PreviewLayout\n      columnGap={columnGap}\n      handleColumnGapChange={setColumnGap}\n      rowGap={rowGap}\n      handleRowGapChange={setRowGap}>\n      <View style={[styles.box, styles.box1]} />\n      <View style={[styles.box, styles.box2]} />\n      <View style={[styles.box, styles.box3]} />\n      <View style={[styles.box, styles.box4]} />\n      <View style={[styles.box, styles.box5]} />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  children,\n  handleColumnGapChange,\n  handleRowGapChange,\n  rowGap,\n  columnGap,\n}) => (\n  <View style={styles.previewContainer}>\n    <View style={styles.inputContainer}>\n      <View style={styles.itemsCenter}>\n        <Text>Row Gap</Text>\n        <TextInput\n          style={styles.input}\n          value={rowGap}\n          onChangeText={v => handleRowGapChange(Number(v))}\n        />\n      </View>\n      <View style={styles.itemsCenter}>\n        <Text>Column Gap</Text>\n        <TextInput\n          style={styles.input}\n          value={columnGap}\n          onChangeText={v => handleColumnGapChange(Number(v))}\n        />\n      </View>\n    </View>\n    <View style={[styles.container, {rowGap, columnGap}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  itemsCenter: {alignItems: 'center'},\n  inputContainer: {\n    gap: 4,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  previewContainer: {padding: 10, flex: 1},\n  input: {\n    borderBottomWidth: 1,\n    paddingVertical: 3,\n    width: 50,\n    textAlign: 'center',\n  },\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    maxHeight: 400,\n    flexWrap: 'wrap',\n    alignContent: 'flex-start',\n  },\n  box: {\n    width: 50,\n    height: 80,\n  },\n  box1: {\n    backgroundColor: 'orangered',\n  },\n  box2: {\n    backgroundColor: 'orange',\n  },\n  box3: {\n    backgroundColor: 'mediumseagreen',\n  },\n  box4: {\n    backgroundColor: 'deepskyblue',\n  },\n  box5: {\n    backgroundColor: 'mediumturquoise',\n  },\n});\n\nexport default RowGapAndColumnGap;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Row%20Gap%20and%20Column%20Gap&ext=tsx\nimport React, {useState} from 'react';\nimport {View, Text, StyleSheet, TextInput} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\nconst RowGapAndColumnGap = () => {\n  const [rowGap, setRowGap] = useState(10);\n  const [columnGap, setColumnGap] = useState(10);\n\n  return (\n    <PreviewLayout\n      columnGap={columnGap}\n      handleColumnGapChange={setColumnGap}\n      rowGap={rowGap}\n      handleRowGapChange={setRowGap}>\n      <View style={[styles.box, styles.box1]} />\n      <View style={[styles.box, styles.box2]} />\n      <View style={[styles.box, styles.box3]} />\n      <View style={[styles.box, styles.box4]} />\n      <View style={[styles.box, styles.box5]} />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  columnGap: number;\n  handleColumnGapChange: (gap: number) => void;\n  rowGap: number;\n  handleRowGapChange: (gap: number) => void;\n}>;\n\nconst PreviewLayout = ({\n  children,\n  handleColumnGapChange,\n  handleRowGapChange,\n  rowGap,\n  columnGap,\n}: PreviewLayoutProps) => (\n  <View style={styles.previewContainer}>\n    <View style={styles.inputContainer}>\n      <View style={styles.itemsCenter}>\n        <Text>Row Gap</Text>\n        <TextInput\n          style={styles.input}\n          value={String(rowGap)}\n          onChangeText={v => handleRowGapChange(Number(v))}\n        />\n      </View>\n      <View style={styles.itemsCenter}>\n        <Text>Column Gap</Text>\n        <TextInput\n          style={styles.input}\n          value={String(columnGap)}\n          onChangeText={v => handleColumnGapChange(Number(v))}\n        />\n      </View>\n    </View>\n    <View style={[styles.container, {rowGap, columnGap}]}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  itemsCenter: {alignItems: 'center'},\n  inputContainer: {\n    gap: 4,\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n  },\n  previewContainer: {padding: 10, flex: 1},\n  input: {\n    borderBottomWidth: 1,\n    paddingVertical: 3,\n    width: 50,\n    textAlign: 'center',\n  },\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    maxHeight: 400,\n    flexWrap: 'wrap',\n    alignContent: 'flex-start',\n  },\n  box: {\n    width: 50,\n    height: 80,\n  },\n  box1: {\n    backgroundColor: 'orangered',\n  },\n  box2: {\n    backgroundColor: 'orange',\n  },\n  box3: {\n    backgroundColor: 'mediumseagreen',\n  },\n  box4: {\n    backgroundColor: 'deepskyblue',\n  },\n  box5: {\n    backgroundColor: 'mediumturquoise',\n  },\n});\n\nexport default RowGapAndColumnGap;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "06a5bd817ba43acfa2d6be77117d1ac3ed23a135065543ea6be8a08fc61ff2e5",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "146b7979",
      "source_content": "## Width and Height",
      "source_content_hash": "9abbaf8e3e1ca33cc2531be5a07ce1f4a30152e6c9ea262cf2c40404c9e93b70",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "a5b0c976",
      "source_content": "The `width` property specifies the width of an element's content area. Similarly, the `height` property specifies the height of an element's content area.",
      "source_content_hash": "ba3f3f1f7e3896523edd822d9c66a32f6fcaec897cb423da503254b958cd0c99",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "6480cf87",
      "source_content": "Both `width` and `height` can take the following values:",
      "source_content_hash": "ff802e94b2a831ade1b2bb0dae051600bbd034ffef6cb6dce953b980cd17c121",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "d47a848d",
      "source_content": "- `auto` (**default value**) React Native calculates the width/height for the element based on its content, whether that is other children, text, or an image.\n\n- `pixels` Defines the width/height in absolute pixels. Depending on other styles set on the component, this may or may not be the final dimension of the node.\n\n- `percentage` Defines the width or height in percentage of its parent's width or height, respectively.",
      "source_content_hash": "f1e38242231f2176e69efed4260cf9f104a0c1ea266388646468516d7e5c17d0",
      "node_type": "list",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "6fce9aad",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Width%20and%20Height&ext=js\nimport React, {useState} from 'react';\nimport {\n  View,\n  SafeAreaView,\n  TouchableOpacity,\n  Text,\n  StyleSheet,\n} from 'react-native';\n\nconst WidthHeightBasics = () => {\n  const [widthType, setWidthType] = useState('auto');\n  const [heightType, setHeightType] = useState('auto');\n\n  return (\n    <PreviewLayout\n      widthType={widthType}\n      heightType={heightType}\n      widthValues={['auto', 300, '80%']}\n      heightValues={['auto', 200, '60%']}\n      setWidthType={setWidthType}\n      setHeightType={setHeightType}>\n      <View\n        style={{\n          alignSelf: 'flex-start',\n          backgroundColor: 'aliceblue',\n          height: heightType,\n          width: widthType,\n          padding: 15,\n        }}>\n        <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n        <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n        <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n      </View>\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  children,\n  widthType,\n  heightType,\n  widthValues,\n  heightValues,\n  setWidthType,\n  setHeightType,\n}) => (\n  <SafeAreaView style={{flex: 1, padding: 10}}>\n    <View style={styles.row}>\n      <Text style={styles.label}>width </Text>\n      {widthValues.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setWidthType(value)}\n          style={[styles.button, widthType === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              widthType === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={styles.row}>\n      <Text style={styles.label}>height </Text>\n      {heightValues.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setHeightType(value)}\n          style={[styles.button, heightType === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              heightType === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    {children}\n  </SafeAreaView>\n);\n\nconst styles = StyleSheet.create({\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    padding: 8,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginRight: 10,\n    marginBottom: 10,\n  },\n  selected: {\n    backgroundColor: 'coral',\n    shadowOpacity: 0,\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default WidthHeightBasics;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Width%20and%20Height&ext=tsx\nimport React, {useState} from 'react';\nimport {\n  View,\n  SafeAreaView,\n  TouchableOpacity,\n  Text,\n  StyleSheet,\n} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\ntype Dimension = 'auto' | `${number}%` | number;\n\nconst WidthHeightBasics = () => {\n  const [widthType, setWidthType] = useState<Dimension>('auto');\n  const [heightType, setHeightType] = useState<Dimension>('auto');\n\n  return (\n    <PreviewLayout\n      widthType={widthType}\n      heightType={heightType}\n      widthValues={['auto', 300, '80%']}\n      heightValues={['auto', 200, '60%']}\n      setWidthType={setWidthType}\n      setHeightType={setHeightType}>\n      <View\n        style={{\n          alignSelf: 'flex-start',\n          backgroundColor: 'aliceblue',\n          height: heightType,\n          width: widthType,\n          padding: 15,\n        }}>\n        <View style={[styles.box, {backgroundColor: 'powderblue'}]} />\n        <View style={[styles.box, {backgroundColor: 'skyblue'}]} />\n        <View style={[styles.box, {backgroundColor: 'steelblue'}]} />\n      </View>\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  widthType: Dimension;\n  heightType: Dimension;\n  widthValues: Dimension[];\n  heightValues: Dimension[];\n  setWidthType: (value: Dimension) => void;\n  setHeightType: (value: Dimension) => void;\n}>;\n\nconst PreviewLayout = ({\n  children,\n  widthType,\n  heightType,\n  widthValues,\n  heightValues,\n  setWidthType,\n  setHeightType,\n}: PreviewLayoutProps) => (\n  <SafeAreaView style={{flex: 1, padding: 10}}>\n    <View style={styles.row}>\n      <Text style={styles.label}>width </Text>\n      {widthValues.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setWidthType(value)}\n          style={[styles.button, widthType === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              widthType === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={styles.row}>\n      <Text style={styles.label}>height </Text>\n      {heightValues.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setHeightType(value)}\n          style={[styles.button, heightType === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              heightType === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    {children}\n  </SafeAreaView>\n);\n\nconst styles = StyleSheet.create({\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    padding: 8,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginRight: 10,\n    marginBottom: 10,\n  },\n  selected: {\n    backgroundColor: 'coral',\n    shadowOpacity: 0,\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default WidthHeightBasics;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "c4384cfdc70bc13493297ae6c76d20e2155716992a58f7886651215099fb9dcd",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "084f27a0",
      "source_content": "## Absolute & Relative Layout",
      "source_content_hash": "275d4cb2b200784a38ceb1fd8e4b4599e5bab38290f7e3dff9dc48291b2d288f",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "84be31b4",
      "source_content": "The `position` type of an element defines how it is positioned within its parent.",
      "source_content_hash": "e8373765b0cd584c0fa51b11684aabea5eddaa1b25280d9cd20e3e826d510ea5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "70eea27e",
      "source_content": "- `relative` (**default value**) By default, an element is positioned relatively. This means an element is positioned according to the normal flow of the layout, and then offset relative to that position based on the values of `top`, `right`, `bottom`, and `left`. The offset does not affect the position of any sibling or parent elements.\n\n- `absolute` When positioned absolutely, an element doesn't take part in the normal layout flow. It is instead laid out independent of its siblings. The position is determined based on the `top`, `right`, `bottom`, and `left` values.",
      "source_content_hash": "92734ce1f016dae867a704ac87910f9a8623405d576cb750d43667d3db01ed62",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `relative` (**預設值**) 預設情況下，元素採用相對定位。這表示元素會依照正常的版面配置流程進行定位，然後根據 `top`、`right`、`bottom` 和 `left` 的值進行相對偏移。此偏移不會影響其他兄弟元素或父元素的位置。\n\n- `absolute` 當採用絕對定位時，元素不會參與正常的版面配置流程。它會獨立於兄弟元素之外進行布局，其位置完全由 `top`、`right`、`bottom` 和 `left` 的值決定。"
      }
    },
    {
      "segment_id": "c57ac43c",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Absolute%20%26%20Relative%20Layout&ext=js\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\n\nconst PositionLayout = () => {\n  const [position, setPosition] = useState('relative');\n\n  return (\n    <PreviewLayout\n      label=\"position\"\n      selectedValue={position}\n      values={['relative', 'absolute']}\n      setSelectedValue={setPosition}>\n      <View\n        style={[\n          styles.box,\n          {\n            top: 25,\n            left: 25,\n            position,\n            backgroundColor: 'powderblue',\n          },\n        ]}\n      />\n      <View\n        style={[\n          styles.box,\n          {\n            top: 50,\n            left: 50,\n            position,\n            backgroundColor: 'skyblue',\n          },\n        ]}\n      />\n      <View\n        style={[\n          styles.box,\n          {\n            top: 75,\n            left: 75,\n            position,\n            backgroundColor: 'steelblue',\n          },\n        ]}\n      />\n    </PreviewLayout>\n  );\n};\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={styles.container}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    minHeight: 200,\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default PositionLayout;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Absolute%20%26%20Relative%20Layout&ext=tsx\nimport React, {useState} from 'react';\nimport {View, TouchableOpacity, Text, StyleSheet} from 'react-native';\nimport type {PropsWithChildren} from 'react';\n\nconst PositionLayout = () => {\n  const [position, setPosition] = useState<'relative' | 'absolute'>('relative');\n\n  return (\n    <PreviewLayout\n      label=\"position\"\n      selectedValue={position}\n      values={['relative', 'absolute']}\n      setSelectedValue={setPosition}>\n      <View\n        style={[\n          styles.box,\n          {\n            top: 25,\n            left: 25,\n            position,\n            backgroundColor: 'powderblue',\n          },\n        ]}\n      />\n      <View\n        style={[\n          styles.box,\n          {\n            top: 50,\n            left: 50,\n            position,\n            backgroundColor: 'skyblue',\n          },\n        ]}\n      />\n      <View\n        style={[\n          styles.box,\n          {\n            top: 75,\n            left: 75,\n            position,\n            backgroundColor: 'steelblue',\n          },\n        ]}\n      />\n    </PreviewLayout>\n  );\n};\n\ntype PreviewLayoutProps = PropsWithChildren<{\n  label: string;\n  values: Array<'relative' | 'absolute'>;\n  selectedValue: string;\n  setSelectedValue: (value: 'relative' | 'absolute') => void;\n}>;\n\nconst PreviewLayout = ({\n  label,\n  children,\n  values,\n  selectedValue,\n  setSelectedValue,\n}: PreviewLayoutProps) => (\n  <View style={{padding: 10, flex: 1}}>\n    <Text style={styles.label}>{label}</Text>\n    <View style={styles.row}>\n      {values.map(value => (\n        <TouchableOpacity\n          key={value}\n          onPress={() => setSelectedValue(value)}\n          style={[styles.button, selectedValue === value && styles.selected]}>\n          <Text\n            style={[\n              styles.buttonLabel,\n              selectedValue === value && styles.selectedLabel,\n            ]}>\n            {value}\n          </Text>\n        </TouchableOpacity>\n      ))}\n    </View>\n    <View style={styles.container}>{children}</View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 8,\n    backgroundColor: 'aliceblue',\n    minHeight: 200,\n  },\n  box: {\n    width: 50,\n    height: 50,\n  },\n  row: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n  },\n  button: {\n    paddingHorizontal: 8,\n    paddingVertical: 6,\n    borderRadius: 4,\n    backgroundColor: 'oldlace',\n    alignSelf: 'flex-start',\n    marginHorizontal: '1%',\n    marginBottom: 6,\n    minWidth: '48%',\n    textAlign: 'center',\n  },\n  selected: {\n    backgroundColor: 'coral',\n    borderWidth: 0,\n  },\n  buttonLabel: {\n    fontSize: 12,\n    fontWeight: '500',\n    color: 'coral',\n  },\n  selectedLabel: {\n    color: 'white',\n  },\n  label: {\n    textAlign: 'center',\n    marginBottom: 10,\n    fontSize: 24,\n  },\n});\n\nexport default PositionLayout;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "b7659cd3cba5840d8d9cb672f5786f43309838be4283b65f54e46349a9510e8a",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_c57ac43c"
      }
    },
    {
      "segment_id": "dae1118f",
      "source_content": "## Going Deeper",
      "source_content_hash": "114681f45611e2d3608fc0c48990004df4456990bae7f0ce627ab9741a4a558d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 深入探討"
      }
    },
    {
      "segment_id": "c9a77a69",
      "source_content": "Check out the interactive [yoga playground](https://www.yogalayout.dev/playground) that you can use to get a better understanding of flexbox.",
      "source_content_hash": "c92df8d94f281ed6ad390e09dfc198b600d3ce2cb382d1620783cb4cfedb6dbb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您可以透過互動式的 [yoga playground](https://www.yogalayout.dev/playground) 來更深入理解 flexbox 的運作方式。"
      }
    },
    {
      "segment_id": "2eb1bffc",
      "source_content": "We've covered the basics, but there are many other styles you may need for layouts. The full list of props that control layout is documented [here](./layout-props.md).",
      "source_content_hash": "9c446e259e14cdebf77556ea06f4254694806509d2666f62d74a6cf73654b294",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們已經涵蓋了基礎知識，但還有許多其他樣式可能需要用於版面配置。完整的版面控制屬性列表記載於[此處](./layout-props.md)。"
      }
    },
    {
      "segment_id": "a37b8a5b",
      "source_content": "Additionally, you can see some examples from [Wix Engineers](https://medium.com/wix-engineering/the-full-react-native-layout-cheat-sheet-a4147802405c).",
      "source_content_hash": "87f1ff7db5ecd3e2ca95e25e1cf669e041fb86634a28fe14ec7b800023f25612",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此外，您也可以參考 [Wix 工程師](https://medium.com/wix-engineering/the-full-react-native-layout-cheat-sheet-a4147802405c)提供的一些範例。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.74/flexbox.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.470230+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "4946a9de2cb0d050029b2c718e11126f53bdd120169df978641d75818e24c89c"
  }
}