{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.75/stylesheet.md",
  "source_file_content_hash": "14bb8bb9ee8f9f30fc02de9360b7d99b6fea04d17ace3747def968369f712772",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: stylesheet\ntitle: StyleSheet\n---",
      "source_content_hash": "0c3f7cd0cc242f80acf2e3eec7046f60e75c3c31e02814638d3daa8b3d6cc382",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "A StyleSheet is an abstraction similar to CSS StyleSheets.",
      "source_content_hash": "02698aa20b213b61ced9fac94949ebd5ec693dd88ce16792ccd003204605c1ae",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "StyleSheet 是一個類似於 CSS 樣式表的抽象層。"
      }
    },
    {
      "segment_id": "e6a5da7c",
      "source_content": "```SnackPlayer name=StyleSheet\nimport React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst App = () => (\n  <View style={styles.container}>\n    <Text style={styles.title}>React Native</Text>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: '#eaeaea',\n  },\n  title: {\n    marginTop: 16,\n    paddingVertical: 8,\n    borderWidth: 4,\n    borderColor: '#20232a',\n    borderRadius: 6,\n    backgroundColor: '#61dafb',\n    color: '#20232a',\n    textAlign: 'center',\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n});\n\nexport default App;\n```",
      "source_content_hash": "f7d0024cd0074d5eb6f2d23db6bb36df7ce7492d50266f75d56833e3dca64c0c",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_e6a5da7c"
      }
    },
    {
      "segment_id": "3cfe6286",
      "source_content": "Code quality tips:",
      "source_content_hash": "b4238d6c885362e0d6f88187cf95a701870ee94948eb487f4d50fa19145dd1e5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "程式碼品質建議："
      }
    },
    {
      "segment_id": "bdfae007",
      "source_content": "- By moving styles away from the render function, you're making the code easier to understand.\n- Naming the styles is a good way to add meaning to the low level components in the render function, and encourage reuse.\n- In most IDEs, using `StyleSheet.create()` will offer static type checking and suggestions to help you write valid styles.",
      "source_content_hash": "07820c209ede851db1e0ba52e3c7ff336fe7c5619be2e44605096653de1b9bf1",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 將樣式從渲染函數中移出，能使程式碼更易於理解。\n- 為樣式命名有助於為渲染函數中的底層元件賦予意義，並促進重用。\n- 在多數整合開發環境中，使用 `StyleSheet.create()` 會提供靜態類型檢查和建議，幫助您撰寫有效的樣式。"
      }
    },
    {
      "segment_id": "94f98fb8",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "6f930b2f",
      "source_content": "# Reference",
      "source_content_hash": "7f466000063da6e2b641eee17b52fffbcef1717169b55b58c4543dc0dc23ea11",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "# 參考文獻"
      }
    },
    {
      "segment_id": "11c76fcc",
      "source_content": "## Methods",
      "source_content_hash": "f10f482f08112298a7b6d3090f1ea9c2254688471ce31e5da64ed9631f177b5d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 方法"
      }
    },
    {
      "segment_id": "c6cc90a0",
      "source_content": "### `compose()`",
      "source_content_hash": "3440d16234b4dee46797b40a22c21b505436608b92b86e6a2ef2ca61743c3121",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `compose()`"
      }
    },
    {
      "segment_id": "f275f5fd",
      "source_content": "```tsx\nstatic compose(style1: Object, style2: Object): Object | Object[];\n```",
      "source_content_hash": "6190906c0c1546f8a3f92c80144c0c3f9bd523efd098d67342b267564e7c4ab1",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_f275f5fd"
      }
    },
    {
      "segment_id": "23dfb152",
      "source_content": "Combines two styles such that `style2` will override any styles in `style1`. If either style is falsy, the other one is returned without allocating an array, saving allocations and maintaining reference equality for PureComponent checks.",
      "source_content_hash": "2b06cec0468c6b8f99e752d22607e3ba7322b9bd694c3cd93ab227661f34568a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "將兩種樣式組合，使 `style2` 覆蓋 `style1` 中的任何樣式。如果任一樣式為假值，則直接返回另一個樣式，避免分配陣列，節省記憶體分配並保持 PureComponent 檢查的引用相等性。"
      }
    },
    {
      "segment_id": "c05ad55e",
      "source_content": "```SnackPlayer name=Compose\nimport React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst App = () => (\n  <View style={container}>\n    <Text style={text}>React Native</Text>\n  </View>\n);\n\nconst page = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    backgroundColor: '#fff',\n  },\n  text: {\n    fontSize: 30,\n    color: '#000',\n  },\n});\n\nconst lists = StyleSheet.create({\n  listContainer: {\n    flex: 1,\n    backgroundColor: '#61dafb',\n  },\n  listItem: {\n    fontStyle: 'italic',\n    fontWeight: 'bold',\n  },\n});\n\nconst container = StyleSheet.compose(page.container, lists.listContainer);\nconst text = StyleSheet.compose(page.text, lists.listItem);\n\nexport default App;\n```",
      "source_content_hash": "2f501261e931c13c596f819f0dce65830f29192998fea5f10dc3ba80d8f8e7c1",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_c05ad55e"
      }
    },
    {
      "segment_id": "7fc4bca5",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "a138e327",
      "source_content": "### `create()`",
      "source_content_hash": "129d96bef642b0bba6f4d5ce6bd151173ad439089228f7a4bd67c0166a8ca4c5",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `create()`"
      }
    },
    {
      "segment_id": "1cf51900",
      "source_content": "```tsx\nstatic create(styles: Object extends Record<string, ViewStyle | ImageStyle | TextStyle>): Object;\n```",
      "source_content_hash": "b0516b2960e93b2cd3ff02d1ecfa968da66ecd44149166d01877eba981a22b9c",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_1cf51900"
      }
    },
    {
      "segment_id": "f0984c2a",
      "source_content": "An identity function for creating styles. The main practical benefit of creating styles inside `StyleSheet.create()` is static type checking against native style properties.",
      "source_content_hash": "25309cfbb61de11f5dcf310d94604fdaab2d6e0528c9e9d522a08fbe77cf1dec",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "用於創建樣式的恆等函數。在 `StyleSheet.create()` 內部創建樣式的主要實際好處是對原生樣式屬性進行靜態類型檢查。"
      }
    },
    {
      "segment_id": "bc8bc928",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "722e4930",
      "source_content": "### `flatten()`",
      "source_content_hash": "1793c818788c5c3999b0759a75332eb03ac73280c288129dfa0a180beedc436b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `flatten()`"
      }
    },
    {
      "segment_id": "99070903",
      "source_content": "```tsx\nstatic flatten(style: Array<Object extends Record<string, ViewStyle | ImageStyle | TextStyle>>): Object;\n```",
      "source_content_hash": "dc3660e2a51dd512704c2d44df03dadfb7a724fc4fb878989f9e566caf236169",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_99070903"
      }
    },
    {
      "segment_id": "44aaa880",
      "source_content": "Flattens an array of style objects, into one aggregated style object.",
      "source_content_hash": "c9e79e58bded20f4e0f6b1270527470703c0d5781afcb6386b620400407c4fb9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "將樣式物件陣列扁平化為一個聚合的樣式物件。"
      }
    },
    {
      "segment_id": "353ca453",
      "source_content": "```SnackPlayer name=Flatten\nimport React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst App = () => (\n  <View style={page.container}>\n    <Text style={flattenStyle}>React Native</Text>\n    <Text>Flatten Style</Text>\n    <Text style={page.code}>{JSON.stringify(flattenStyle, null, 2)}</Text>\n  </View>\n);\n\nconst page = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n    alignItems: 'center',\n  },\n  text: {\n    color: '#000',\n    fontSize: 14,\n    fontWeight: 'bold',\n  },\n  code: {\n    marginTop: 12,\n    padding: 12,\n    borderRadius: 8,\n    color: '#666',\n    backgroundColor: '#eaeaea',\n  },\n});\n\nconst typography = StyleSheet.create({\n  header: {\n    color: '#61dafb',\n    fontSize: 30,\n    marginBottom: 36,\n  },\n});\n\nconst flattenStyle = StyleSheet.flatten([page.text, typography.header]);\n\nexport default App;\n```",
      "source_content_hash": "e3f020893c1da4f75958859655c2e7da46ac3b5ef0616288e0ff31a48f8c82c5",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_353ca453"
      }
    },
    {
      "segment_id": "1af652fb",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "3f77c6a0",
      "source_content": "### `setStyleAttributePreprocessor()`",
      "source_content_hash": "b72b2dce360f6c2a6d96bb05d4903982a560a76bebef7d071e30493fb4cc6bcd",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `setStyleAttributePreprocessor()`"
      }
    },
    {
      "segment_id": "18f3d343",
      "source_content": "> **WARNING: EXPERIMENTAL.** Breaking changes will probably happen a lot and will not be reliably announced. The whole thing might be deleted, who knows? Use at your own risk.",
      "source_content_hash": "80878c276d403c58ae20e5ec9fef90ed75fc7caa6ae6716f8cd747fa53f65db7",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> **警告：實驗性功能。** 可能會頻繁發生破壞性變更且不會可靠地公告。整個功能可能會被刪除，誰知道呢？使用風險自負。"
      }
    },
    {
      "segment_id": "8ecb92db",
      "source_content": "```tsx\nstatic setStyleAttributePreprocessor(\n  property: string,\n  process: (propValue: any) => any,\n);\n```",
      "source_content_hash": "05d4c32c83a6d81a2effd58ab6d78272adf09fcd55305a0a52f749af1bda921f",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_8ecb92db"
      }
    },
    {
      "segment_id": "dc72fd20",
      "source_content": "Sets a function to use to pre-process a style property value. This is used internally to process color and transform values. You should not use this unless you really know what you are doing and have exhausted other options.",
      "source_content_hash": "e757548df45fd07ebb84b4bea0243ff7e2d2cc514ca4ab91c99a4544ddf588bf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "設置一個函數用於預處理樣式屬性值。此功能內部用於處理顏色和變換值。除非您確切知道自己在做什麼且已窮盡其他選項，否則不應使用此功能。"
      }
    },
    {
      "segment_id": "445c72bd",
      "source_content": "## Properties",
      "source_content_hash": "899ecb557156d36aac98f2082474f5ea1e01af3d4a611b79b00dab2a3116aab2",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 屬性"
      }
    },
    {
      "segment_id": "62d5dc64",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "1297ec42",
      "source_content": "### `absoluteFill`",
      "source_content_hash": "cb11ddb2eac4c01eee36edf7595433f4ae3eb5a43a9645b94208f53df5cfc1e4",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `absoluteFill`"
      }
    },
    {
      "segment_id": "c8a6ab3e",
      "source_content": "A very common pattern is to create overlays with position absolute and zero positioning (`position: 'absolute', left: 0, right: 0, top: 0, bottom: 0`), so `absoluteFill` can be used for convenience and to reduce duplication of these repeated styles. If you want, absoluteFill can be used to create a customized entry in a StyleSheet, e.g.:",
      "source_content_hash": "f0529e05651e8adb5dd5461c116ec9d353404e5059628177e49f1004d7e17533",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "一個非常常見的模式是創建具有絕對定位和零位置（`position: 'absolute', left: 0, right: 0, top: 0, bottom: 0`）的覆蓋層，因此 `absoluteFill` 可用於方便並減少這些重複樣式的冗餘。如果需要，absoluteFill 可用於在 StyleSheet 中創建自定義條目，例如："
      }
    },
    {
      "segment_id": "f02969e0",
      "source_content": "```SnackPlayer name=absoluteFill\nimport React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst App = () => (\n  <View style={styles.container}>\n    <View style={styles.box1}>\n      <Text style={styles.text}>1</Text>\n    </View>\n    <View style={[styles.box2, StyleSheet.absoluteFill]}>\n      <Text style={styles.text}>2</Text>\n    </View>\n    <View style={styles.box3}>\n      <Text style={styles.text}>3</Text>\n    </View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  box1: {\n    position: 'absolute',\n    top: 40,\n    left: 40,\n    width: 100,\n    height: 100,\n    backgroundColor: 'red',\n  },\n  box2: {\n    width: 100,\n    height: 100,\n    backgroundColor: 'blue',\n  },\n  box3: {\n    position: 'absolute',\n    top: 120,\n    left: 120,\n    width: 100,\n    height: 100,\n    backgroundColor: 'green',\n  },\n  text: {\n    color: '#FFF',\n    fontSize: 80,\n  },\n});\n\nexport default App;\n```",
      "source_content_hash": "bbd50a23763832ada6e3e37396c6bfc3fa525dea88f99d059cc4434cab96db75",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_f02969e0"
      }
    },
    {
      "segment_id": "8897e43b",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "2f833a4d",
      "source_content": "### `absoluteFillObject`",
      "source_content_hash": "e9874991e55420186ebb8ae89508c370a2e31c8540cf87c2b60390519cc5298f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `absoluteFillObject`"
      }
    },
    {
      "segment_id": "dfb6fc67",
      "source_content": "Sometimes you may want `absoluteFill` but with a couple tweaks - `absoluteFillObject` can be used to create a customized entry in a `StyleSheet`, e.g.:",
      "source_content_hash": "006aa9ef05e132e6ddc97b873b7b9df58c42e4ceb4c277a85ecedc69a7872957",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "有時您可能需要 `absoluteFill` 但進行一些調整 - `absoluteFillObject` 可用於在 `StyleSheet` 中創建自定義條目，例如："
      }
    },
    {
      "segment_id": "2de995af",
      "source_content": "```SnackPlayer name=absoluteFillObject\nimport React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst App = () => (\n  <View style={styles.container}>\n    <View style={styles.box1}>\n      <Text style={styles.text}>1</Text>\n    </View>\n    <View style={styles.box2}>\n      <Text style={styles.text}>2</Text>\n    </View>\n    <View style={styles.box3}>\n      <Text style={styles.text}>3</Text>\n    </View>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  box1: {\n    position: 'absolute',\n    top: 40,\n    left: 40,\n    width: 100,\n    height: 100,\n    backgroundColor: 'red',\n  },\n  box2: {\n    ...StyleSheet.absoluteFillObject,\n    top: 120,\n    left: 50,\n    width: 100,\n    height: 100,\n    backgroundColor: 'blue',\n  },\n  box3: {\n    ...StyleSheet.absoluteFillObject,\n    top: 120,\n    left: 120,\n    width: 100,\n    height: 100,\n    backgroundColor: 'green',\n  },\n  text: {\n    color: '#FFF',\n    fontSize: 80,\n  },\n});\n\nexport default App;\n```",
      "source_content_hash": "5a635a288f4d04136c1b616ae86800ad4f4cf80ee72af62c137ec15937996ed3",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_2de995af"
      }
    },
    {
      "segment_id": "a7e682e9",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "052c158b",
      "source_content": "### `hairlineWidth`",
      "source_content_hash": "724ac2b478579afdf057a49d25785c516bb06d9a2e458ba1ae874192ac1eb110",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `hairlineWidth`"
      }
    },
    {
      "segment_id": "a01e2096",
      "source_content": "This is defined as the width of a thin line on the platform. It can be used as the thickness of a border or division between two elements. Example:",
      "source_content_hash": "1fe1ab7502a17fa7e96e6499101b64ebad2e3e07a5867ef550e5482cde7b4c46",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此常數定義為平台上細線的寬度。可用作邊框的厚度或兩個元素之間的分隔線。範例："
      }
    },
    {
      "segment_id": "e029f808",
      "source_content": "```SnackPlayer name=hairlineWidth\nimport React from 'react';\nimport {StyleSheet, Text, View} from 'react-native';\n\nconst App = () => (\n  <View style={styles.container}>\n    <Text style={styles.row}>React</Text>\n    <Text style={styles.row}>Native</Text>\n  </View>\n);\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    padding: 24,\n  },\n  row: {\n    padding: 4,\n    borderBottomColor: 'red',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n  },\n});\n\nexport default App;\n```",
      "source_content_hash": "4bc38f65d2572cdf1f049ff3397d1e1b28e6548e53d3d21fecb4e66dd90228d1",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_e029f808"
      }
    },
    {
      "segment_id": "9802de48",
      "source_content": "This constant will always be a round number of pixels (so a line defined by it can look crisp) and will try to match the standard width of a thin line on the underlying platform. However, you should not rely on it being a constant size, because on different platforms and screen densities its value may be calculated differently.",
      "source_content_hash": "f53df9ae0f91cd2bfb532b1886acd6b210c0bb44c8f68a92de79b6f37e4a1f14",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此常數始終為像素的整數（因此由其定義的線條看起來清晰），並會嘗試匹配底層平台上細線的標準寬度。然而，您不應依賴其為固定大小，因為在不同平台和屏幕密度下，其值可能以不同方式計算。"
      }
    },
    {
      "segment_id": "e9a0d59a",
      "source_content": "A line with hairline width may not be visible if your simulator is downscaled.",
      "source_content_hash": "c125536164533c530294853dcfeca1ae117eb53b8f2fa35ac2e8a071134190e8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果您的模擬器被縮小，具有 hairline 寬度的線條可能不可見。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.75/stylesheet.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.557325+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "14bb8bb9ee8f9f30fc02de9360b7d99b6fea04d17ace3747def968369f712772"
  }
}