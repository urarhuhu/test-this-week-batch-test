{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.70/handling-touches.md",
  "source_file_content_hash": "402684a9ca2d2483b10abf00440088846ab86a6cbdc97ddbce0905ea16fb4d1a",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: handling-touches\ntitle: Handling Touches\n---",
      "source_content_hash": "2496ba1c91057ade93f2181297b43bc1d1c4f1096a7ae9c334ae13073d2b43e8",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "Users interact with mobile apps mainly through touch. They can use a combination of gestures, such as tapping on a button, scrolling a list, or zooming on a map. React Native provides components to handle all sorts of common gestures, as well as a comprehensive [gesture responder system](gesture-responder-system.md) to allow for more advanced gesture recognition, but the one component you will most likely be interested in is the basic Button.",
      "source_content_hash": "e06175913458c95f435586487f9c50f5b545b803fac17354ab78292d3c8bebb3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "使用者主要透過觸控與行動應用程式互動。他們可以使用多種手勢組合，例如點擊按鈕、滾動列表或縮放地圖。React Native 提供了處理各種常見手勢的元件，以及一套全面的[手勢回應系統](gesture-responder-system.md)來實現更進階的手勢識別，但您最可能感興趣的元件是基本的 Button（按鈕）。"
      }
    },
    {
      "segment_id": "cc3c868d",
      "source_content": "## Displaying a basic button",
      "source_content_hash": "d329f4898da20748e6f1af03a8866dc888bfb550b548be24645b860eede04b4f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 顯示基本按鈕"
      }
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "[Button](button.md) provides a basic button component that is rendered nicely on all platforms. The minimal example to display a button looks like this:",
      "source_content_hash": "5aee6156252056ff1ac90d75a9627726a8b8c25b052de9092a06c14814e37cc9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[Button](button.md) 提供了一個基礎按鈕元件，可在所有平台上美觀呈現。顯示按鈕的最簡單範例如下："
      }
    },
    {
      "segment_id": "ee201347",
      "source_content": "```jsx\n<Button\n  onPress={() => {\n    alert('You tapped the button!');\n  }}\n  title=\"Press Me\"\n/>\n```",
      "source_content_hash": "8ffaacdfc401c4e7e386b96a2074de837104fcba55695e9b771c6bad857163a7",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_ee201347"
      }
    },
    {
      "segment_id": "f5f6d2ce",
      "source_content": "This will render a blue label on iOS, and a blue rounded rectangle with light text on Android. Pressing the button will call the \"onPress\" function, which in this case displays an alert popup. If you like, you can specify a \"color\" prop to change the color of your button.",
      "source_content_hash": "133a86a10d843c86d97c8367a0725b495b668dfb7bac98539c86c3c110ae7b2e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在 iOS 上會渲染藍色標籤，在 Android 上則會渲染帶有淺色文字的藍色圓角矩形。按下按鈕會呼叫 \"onPress\" 函數，本例中會顯示一個警示彈窗。如果需要，您可以指定 \"color\" 屬性來改變按鈕顏色。"
      }
    },
    {
      "segment_id": "2fdadb08",
      "source_content": "![](/docs/assets/Button.png)",
      "source_content_hash": "f28c7264653ac159418ea07d292587afaeb2ce5125bb1100081587cd64bf0638",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "![](/docs/assets/Button.png)"
      }
    },
    {
      "segment_id": "f2c2bdd0",
      "source_content": "Go ahead and play around with the `Button` component using the example below. You can select which platform your app is previewed in by clicking on the toggle in the bottom right and then clicking on \"Tap to Play\" to preview the app.",
      "source_content_hash": "94075238c90194b1718ce00641af61fbaffe40cb16ef6caaf61f10097fe384ee",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您可以使用下方範例實際操作 `Button` 元件。透過點擊右下角的切換按鈕選擇預覽平台，然後點擊「Tap to Play」預覽應用程式。"
      }
    },
    {
      "segment_id": "08021a08",
      "source_content": "```SnackPlayer name=Button%20Basics\nimport React, { Component } from 'react';\nimport { Button, StyleSheet, View } from 'react-native';\n\nexport default class ButtonBasics extends Component {\n  _onPressButton() {\n    alert('You tapped the button!')\n  }\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.buttonContainer}>\n          <Button\n            onPress={this._onPressButton}\n            title=\"Press Me\"\n          />\n        </View>\n        <View style={styles.buttonContainer}>\n          <Button\n            onPress={this._onPressButton}\n            title=\"Press Me\"\n            color=\"#841584\"\n          />\n        </View>\n        <View style={styles.alternativeLayoutButtonContainer}>\n          <Button\n            onPress={this._onPressButton}\n            title=\"This looks great!\"\n          />\n          <Button\n            onPress={this._onPressButton}\n            title=\"OK!\"\n            color=\"#841584\"\n          />\n        </View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n   flex: 1,\n   justifyContent: 'center',\n  },\n  buttonContainer: {\n    margin: 20\n  },\n  alternativeLayoutButtonContainer: {\n    margin: 20,\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  }\n});\n```",
      "source_content_hash": "a8a9a4ad72b9b440b28a1a2462684af4c62c7d332ad4251328f4817cd93f5d1b",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_08021a08"
      }
    },
    {
      "segment_id": "a4bf4268",
      "source_content": "## Touchables",
      "source_content_hash": "24c5bf05d711121513d9795f2d80b7662bcc97eaa1118f58bdeae1701eef4d31",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 可觸控元件"
      }
    },
    {
      "segment_id": "ec619944",
      "source_content": "If the basic button doesn't look right for your app, you can build your own button using any of the \"Touchable\" components provided by React Native. These components provide the capability to capture tapping gestures and can display feedback when a gesture is recognized. However, these components do not provide any default styling, so you will need to do a bit of work to get them looking nice in your app.",
      "source_content_hash": "cc94b15520e14344a89e74114063faae9db480cf42af2d9bd46bd9fe9caeeea9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果基礎按鈕不符合您的應用程式風格，您可以使用 React Native 提供的任何「Touchable」元件來自訂按鈕。這些元件能捕捉點擊手勢，並在手勢被識別時顯示反饋效果。但請注意，這些元件不提供預設樣式，因此您需要自行設計以符合應用程式外觀。"
      }
    },
    {
      "segment_id": "2547a6bb",
      "source_content": "Which \"Touchable\" component you use will depend on what kind of feedback you want to provide:",
      "source_content_hash": "6834d6c046bd7a19ff7af4bcac12ad554d533894fa3e5643ffabd23c774b68f4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "根據您想提供的反饋類型，可選擇不同的「Touchable」元件："
      }
    },
    {
      "segment_id": "4d429946",
      "source_content": "- Generally, you can use [**TouchableHighlight**](touchablehighlight.md) anywhere you would use a button or link on web. The view's background will be darkened when the user presses down on the button.\n\n- You may consider using [**TouchableNativeFeedback**](touchablenativefeedback.md) on Android to display ink surface reaction ripples that respond to the user's touch.\n\n- [**TouchableOpacity**](touchableopacity.md) can be used to provide feedback by reducing the opacity of the button, allowing the background to be seen through while the user is pressing down.\n\n- If you need to handle a tap gesture but you don't want any feedback to be displayed, use [**TouchableWithoutFeedback**](touchablewithoutfeedback.md).",
      "source_content_hash": "4b4972c877001c80e3535876ab0f72afcb321a971979775c15b6934724422441",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 通常，[**TouchableHighlight**](touchablehighlight.md) 適用於任何需要網頁按鈕或連結效果的場景。使用者按下時，視圖背景會變暗。\n  \n- 在 Android 平台上，可考慮使用 [**TouchableNativeFeedback**](touchablenativefeedback.md) 來顯示墨水漣漪效果，回應使用者的觸控操作。\n\n- 使用 [**TouchableOpacity**](touchableopacity.md) 可透過降低按鈕不透明度來提供反饋，讓背景在使用者按壓時顯現。\n\n- 若需要處理點擊手勢但不希望顯示任何視覺反饋，請使用 [**TouchableWithoutFeedback**](touchablewithoutfeedback.md)。"
      }
    },
    {
      "segment_id": "eb51d107",
      "source_content": "In some cases, you may want to detect when a user presses and holds a view for a set amount of time. These long presses can be handled by passing a function to the `onLongPress` props of any of the \"Touchable\" components.",
      "source_content_hash": "262e60404b5f4af084478210bf0952e674da5ed84dd1c87f3713068e862b287e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "某些情況下，您可能需要檢測使用者長按視圖的行為。在任何「Touchable」元件的 `onLongPress` 屬性中傳遞函數，即可處理這類長按手勢。"
      }
    },
    {
      "segment_id": "1862c5fe",
      "source_content": "Let's see all of these in action:",
      "source_content_hash": "e6c2dcd4150c1f60fb490ef58671b4b6fcd9bd5d29b03e2ed4561db2c2d78ad5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "以下是這些元件的實際範例："
      }
    },
    {
      "segment_id": "a476a172",
      "source_content": "```SnackPlayer name=Touchables\nimport React, { Component } from 'react';\nimport { Platform, StyleSheet, Text, TouchableHighlight, TouchableOpacity, TouchableNativeFeedback, TouchableWithoutFeedback, View } from 'react-native';\n\nexport default class Touchables extends Component {\n  _onPressButton() {\n    alert('You tapped the button!')\n  }\n\n  _onLongPressButton() {\n    alert('You long-pressed the button!')\n  }\n\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <TouchableHighlight onPress={this._onPressButton} underlayColor=\"white\">\n          <View style={styles.button}>\n            <Text style={styles.buttonText}>TouchableHighlight</Text>\n          </View>\n        </TouchableHighlight>\n        <TouchableOpacity onPress={this._onPressButton}>\n          <View style={styles.button}>\n            <Text style={styles.buttonText}>TouchableOpacity</Text>\n          </View>\n        </TouchableOpacity>\n        <TouchableNativeFeedback\n            onPress={this._onPressButton}\n            background={Platform.OS === 'android' ? TouchableNativeFeedback.SelectableBackground() : ''}>\n          <View style={styles.button}>\n            <Text style={styles.buttonText}>TouchableNativeFeedback {Platform.OS !== 'android' ? '(Android only)' : ''}</Text>\n          </View>\n        </TouchableNativeFeedback>\n        <TouchableWithoutFeedback\n            onPress={this._onPressButton}\n            >\n          <View style={styles.button}>\n            <Text style={styles.buttonText}>TouchableWithoutFeedback</Text>\n          </View>\n        </TouchableWithoutFeedback>\n        <TouchableHighlight onPress={this._onPressButton} onLongPress={this._onLongPressButton} underlayColor=\"white\">\n          <View style={styles.button}>\n            <Text style={styles.buttonText}>Touchable with Long Press</Text>\n          </View>\n        </TouchableHighlight>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingTop: 60,\n    alignItems: 'center'\n  },\n  button: {\n    marginBottom: 30,\n    width: 260,\n    alignItems: 'center',\n    backgroundColor: '#2196F3'\n  },\n  buttonText: {\n    textAlign: 'center',\n    padding: 20,\n    color: 'white'\n  }\n});\n```",
      "source_content_hash": "1b352e58ffdf81c9ed04a5169352d2091d9b2b38f18046b63fd7c19556dc5506",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_a476a172"
      }
    },
    {
      "segment_id": "89b740fe",
      "source_content": "## Scrolling and swiping",
      "source_content_hash": "8d216468d0839f045bcc1d54fd49441075db174250dc168b942618229c3a2920",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 滾動與滑動"
      }
    },
    {
      "segment_id": "99840f13",
      "source_content": "Gestures commonly used on devices with touchable screens include swipes and pans. These allow the user to scroll through a list of items, or swipe through pages of content. For these, check out the [ScrollView](scrollview.md) Core Component.",
      "source_content_hash": "d2ce9b54856783790cef4fea05c9c2337a747de87fb774b05928982d6ea8b405",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "觸控螢幕裝置上常見的手勢包括滑動（swipe）和拖曳（pan），這些手勢讓使用者能滾動項目列表或滑動瀏覽內容頁面。相關功能請參考核心元件 [ScrollView](scrollview.md)。"
      }
    },
    {
      "segment_id": "a6b29dc7",
      "source_content": "## Known issues",
      "source_content_hash": "4cecb6da2e40cc04ae6e30cf3f1e7cbd0703e50078cb7c162c0ca14c29be5058",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 已知問題"
      }
    },
    {
      "segment_id": "db79148c",
      "source_content": "- [react-native#29308](https://github.com/facebook/react-native/issues/29308#issuecomment-792864162): The touch area never extends past the parent view bounds and on Android negative margin is not supported.",
      "source_content_hash": "093142bd91b38fb106cbfab8e1ad4ab3233ec8d5dd51086c1443cd34bc63a22a",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- [react-native#29308](https://github.com/facebook/react-native/issues/29308#issuecomment-792864162)：觸控區域不會延伸至父視圖邊界之外，且 Android 不支援負邊距設定。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.70/handling-touches.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.235227+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "402684a9ca2d2483b10abf00440088846ab86a6cbdc97ddbce0905ea16fb4d1a"
  }
}