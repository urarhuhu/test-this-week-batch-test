{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.70/layoutanimation.md",
  "source_file_content_hash": "4f504046b3cf792f2c1d34f7aeb42bf45a3902c8c5089dc3996f106757a83c19",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: layoutanimation\ntitle: LayoutAnimation\n---",
      "source_content_hash": "fb06530523f69509477e97c97e331f12d8b232d1811214ac040534afe03c2f22",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4d1292be"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "Automatically animates views to their new positions when the next layout happens.",
      "source_content_hash": "9e87a15ffd08774845ec3cd1051ede4981f40ab5187349b9d2a32ff293ede0e6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當下一次佈局發生時，自動將視圖動畫到新位置。"
      }
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "A common way to use this API is to call it before updating the state hook in functional components and calling `setState` in class components.",
      "source_content_hash": "5f879b29ca181ecbef67392f70cce5a8544ee75eb9837903b63c7f6da92243aa",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "常見的使用方式是在函數式組件中更新狀態鉤子前調用此API，或在類組件中調用`setState`前使用。"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "Note that in order to get this to work on **Android** you need to set the following flags via `UIManager`:",
      "source_content_hash": "3b8fe7a7636d1c93a3d7e2f1520a80cb4404d9b2cc5d2eaee4ff24c3598cde70",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "請注意，要在**Android**上正常運作，需透過`UIManager`設置以下標記："
      }
    },
    {
      "segment_id": "5564d81d",
      "source_content": "```js\nif (Platform.OS === 'android') {\n  if (UIManager.setLayoutAnimationEnabledExperimental) {\n    UIManager.setLayoutAnimationEnabledExperimental(true);\n  }\n}\n```",
      "source_content_hash": "ed0521b6b4f62cbfcc17164a876e322f9cf4eb5f717b4340e1a343b40e20c311",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_5564d81d"
      }
    },
    {
      "segment_id": "63622bf0",
      "source_content": "## Example",
      "source_content_hash": "9bf34f44c9d1371f4eda569dfa04ff7830aff81cfa81646e680cef087714cdc1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 範例"
      }
    },
    {
      "segment_id": "f2b711c6",
      "source_content": "```SnackPlayer name=LayoutAnimation&supportedPlatforms=android,ios\nimport React, { useState } from \"react\";\nimport { LayoutAnimation, Platform, StyleSheet, Text, TouchableOpacity, UIManager, View } from \"react-native\";\n\nif (\n  Platform.OS === \"android\" &&\n  UIManager.setLayoutAnimationEnabledExperimental\n) {\n  UIManager.setLayoutAnimationEnabledExperimental(true);\n}\nconst App = () => {\n  const [expanded, setExpanded] = useState(false);\n\n  return (\n    <View style={style.container}>\n      <TouchableOpacity\n        onPress={() => {\n          LayoutAnimation.configureNext(LayoutAnimation.Presets.spring);\n          setExpanded(!expanded);\n        }}\n      >\n        <Text>Press me to {expanded ? \"collapse\" : \"expand\"}!</Text>\n      </TouchableOpacity>\n      {expanded && (\n        <View style={style.tile}>\n          <Text>I disappear sometimes!</Text>\n        </View>\n      )}\n    </View>\n  );\n};\n\nconst style = StyleSheet.create({\n  tile: {\n    backgroundColor: \"lightgrey\",\n    borderWidth: 0.5,\n    borderColor: \"#d6d7da\"\n  },\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    overflow: \"hidden\"\n  }\n});\n\nexport default App;\n```",
      "source_content_hash": "56a59d35433eacf89c94d5413d87efad89d921089e9a7cd3d76ceecadd837192",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_f2b711c6"
      }
    },
    {
      "segment_id": "3fa01396",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "b1cbdb65",
      "source_content": "# Reference",
      "source_content_hash": "7f466000063da6e2b641eee17b52fffbcef1717169b55b58c4543dc0dc23ea11",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "# 參考文獻"
      }
    },
    {
      "segment_id": "93028a4e",
      "source_content": "## Methods",
      "source_content_hash": "f10f482f08112298a7b6d3090f1ea9c2254688471ce31e5da64ed9631f177b5d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 方法"
      }
    },
    {
      "segment_id": "58ed925f",
      "source_content": "### `configureNext()`",
      "source_content_hash": "2cf20d477c6c64770255d28366be7fcd716403438bca14036d85cf8d30343b2e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `configureNext()`"
      }
    },
    {
      "segment_id": "9f4336b3",
      "source_content": "```jsx\nstatic configureNext(config, onAnimationDidEnd?, onAnimationDidFail?)\n```",
      "source_content_hash": "e2f23a47490a02f2a6da56e371171be9095bd658750caef38c8d582a192b67fe",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_9f4336b3"
      }
    },
    {
      "segment_id": "fbc2db85",
      "source_content": "Schedules an animation to happen on the next layout.",
      "source_content_hash": "341b2005f772fd23ab24f885955072e848ab9821a484912f2ec8e98c569ffa7e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "安排在下次佈局時執行動畫。"
      }
    },
    {
      "segment_id": "759d12dd",
      "source_content": "#### Parameters:",
      "source_content_hash": "ff8e5b43e53da587e0b9bd2f2b4e2f133abb3b2eb3f3984d5c8a5a5df7d9b025",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### 參數："
      }
    },
    {
      "segment_id": "608df66e",
      "source_content": "| Name               | Type     | Required | Description                         |\n| ------------------ | -------- | -------- | ----------------------------------- |\n| config             | object   | Yes      | See config description below.       |\n| onAnimationDidEnd  | function | No       | Called when the animation finished. |\n| onAnimationDidFail | function | No       | Called when the animation failed.   |",
      "source_content_hash": "a978bbc4c25bf143935ce25e90f1822acf6f9ae91f477af76740678f251f1344",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_608df66e"
      }
    },
    {
      "segment_id": "785750ac",
      "source_content": "The `config` parameter is an object with the keys below. [`create`](layoutanimation.md#create) returns a valid object for `config`, and the [`Presets`](layoutanimation.md#presets) objects can also all be passed as the `config`.",
      "source_content_hash": "144be2dd51b1d4835adc03e4144a1901b9f1e7b87a522ac6bb376df94c8ff875",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`config`參數是一個包含以下鍵的對象。[`create`](layoutanimation.md#create)會返回一個有效的`config`對象，且[`Presets`](layoutanimation.md#presets)對象也可全部作為`config`傳入。"
      }
    },
    {
      "segment_id": "b264104e",
      "source_content": "- `duration` in milliseconds\n- `create`, optional config for animating in new views\n- `update`, optional config for animating views that have been updated\n- `delete`, optional config for animating views as they are removed",
      "source_content_hash": "113f2112c3a2003750c27951967feb024444ff6d36ee86f58a83e067536d1ab1",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `duration` 以毫秒為單位\n- `create`，用於動畫新視圖的可選配置\n- `update`，用於動畫已更新視圖的可選配置\n- `delete`，用於動畫移除視圖的可選配置"
      }
    },
    {
      "segment_id": "6ca4479f",
      "source_content": "The config that's passed to `create`, `update`, or `delete` has the following keys:",
      "source_content_hash": "0390d69fcd4f28ecbf37f07099929b21b2a19c6d5aeff29af5eec7acb8f8941f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "傳遞給`create`、`update`或`delete`的配置包含以下鍵："
      }
    },
    {
      "segment_id": "936011bd",
      "source_content": "- `type`, the [animation type](layoutanimation.md#types) to use\n- `property`, the [layout property](layoutanimation.md#properties) to animate (optional, but recommended for `create` and `delete`)\n- `springDamping` (number, optional and only for use with `type: Type.spring`)\n- `initialVelocity` (number, optional)\n- `delay` (number, optional)\n- `duration` (number, optional)",
      "source_content_hash": "ccf4aa5d4a0532c8be8ff1c1046f573ba597dd49aa16ade0d69402059a4be0aa",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `type`，使用的[動畫類型](layoutanimation.md#types)\n- `property`，要動畫化的[佈局屬性](layoutanimation.md#properties)（可選，但建議用於`create`和`delete`）\n- `springDamping`（數字，可選且僅用於`type: Type.spring`）\n- `initialVelocity`（數字，可選）\n- `delay`（數字，可選）\n- `duration`（數字，可選）"
      }
    },
    {
      "segment_id": "3c5a1374",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "8574d51c",
      "source_content": "### `create()`",
      "source_content_hash": "129d96bef642b0bba6f4d5ce6bd151173ad439089228f7a4bd67c0166a8ca4c5",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `create()`"
      }
    },
    {
      "segment_id": "83537d8d",
      "source_content": "```jsx\nstatic create(duration, type, creationProp)\n```",
      "source_content_hash": "e9bdb5a785bea2a3eacef9c784d5653f4c258a8abee68c70c25b904ff2a7cf0d",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_83537d8d"
      }
    },
    {
      "segment_id": "1958bc43",
      "source_content": "Helper that creates an object (with `create`, `update`, and `delete` fields) to pass into [`configureNext`](layoutanimation.md#configurenext). The `type` parameter is an [animation type](layoutanimation.md#types), and the `creationProp` parameter is a [layout property](layoutanimation.md#properties).",
      "source_content_hash": "c4a956332036c6efd74f47c7bd66d37096d5b0f3747260b0850c470dbc373ebc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "輔助函數，創建一個對象（包含`create`、`update`和`delete`字段）傳入[`configureNext`](layoutanimation.md#configurenext)。`type`參數是[動畫類型](layoutanimation.md#types)，`creationProp`參數是[佈局屬性](layoutanimation.md#properties)。"
      }
    },
    {
      "segment_id": "a8610918",
      "source_content": "**Example:**",
      "source_content_hash": "7cfe1b9c27bbfaa85c8030da8c6308bf8a1b92c6b8592754a77844c446e9722d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**範例：**"
      }
    },
    {
      "segment_id": "1f6cb4dd",
      "source_content": "<Tabs groupId=\"syntax\" queryString defaultValue={constants.defaultSyntax} values={constants.syntax}>\n<TabItem value=\"functional\">\n\n```SnackPlayer name=LayoutAnimation&supportedPlatforms=android,ios\nimport React, { useState } from \"react\";\nimport {\n  View,\n  Platform,\n  UIManager,\n  LayoutAnimation,\n  StyleSheet,\n  Button\n} from \"react-native\";\n\nif (\n  Platform.OS === \"android\" &&\n  UIManager.setLayoutAnimationEnabledExperimental\n) {\n  UIManager.setLayoutAnimationEnabledExperimental(true);\n}\n\nconst App = () => {\n  const [boxPosition, setBoxPosition] = useState(\"left\");\n\n  const toggleBox = () => {\n    LayoutAnimation.configureNext({\n      duration: 500,\n      create: { type: \"linear\", property: \"opacity\" },\n      update: { type: \"spring\", springDamping: 0.4 },\n      delete: { type: \"linear\", property: \"opacity\" }\n    });\n    setBoxPosition(boxPosition === \"left\" ? \"right\" : \"left\");\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.buttonContainer}>\n        <Button title=\"Toggle Layout\" onPress={toggleBox} />\n      </View>\n      <View\n        style={[styles.box, boxPosition === \"left\" ? null : styles.moveRight]}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"flex-start\",\n    justifyContent: \"center\"\n  },\n  box: {\n    height: 100,\n    width: 100,\n    borderRadius: 5,\n    margin: 8,\n    backgroundColor: \"blue\"\n  },\n  moveRight: {\n    alignSelf: \"flex-end\",\n    height: 200,\n    width: 200\n  },\n  buttonContainer: {\n    alignSelf: \"center\"\n  }\n});\n\nexport default App;\n```\n\n</TabItem>\n<TabItem value=\"classical\">\n\n```SnackPlayer name=LayoutAnimation&supportedPlatforms=android,ios\nimport React, { Component } from \"react\";\nimport {\n  View,\n  Platform,\n  UIManager,\n  LayoutAnimation,\n  StyleSheet,\n  Button\n} from \"react-native\";\n\nif (\n  Platform.OS === \"android\" &&\n  UIManager.setLayoutAnimationEnabledExperimental\n) {\n  UIManager.setLayoutAnimationEnabledExperimental(true);\n}\n\nclass App extends Component {\n  state = {\n    boxPosition: \"left\"\n  };\n\n  toggleBox = () => {\n    LayoutAnimation.configureNext({\n      duration: 500,\n      create: { type: \"linear\", property: \"opacity\" },\n      update: { type: \"spring\", springDamping: 0.4 },\n      delete: { type: \"linear\", property: \"opacity\" }\n    });\n    this.setState({\n      boxPosition: this.state.boxPosition === \"left\" ? \"right\" : \"left\"\n    });\n  };\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.buttonContainer}>\n          <Button title=\"Toggle Layout\" onPress={this.toggleBox} />\n        </View>\n        <View\n          style={[\n            styles.box,\n            this.state.boxPosition === \"left\" ? null : styles.moveRight\n          ]}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"flex-start\",\n    justifyContent: \"center\"\n  },\n  box: {\n    height: 100,\n    width: 100,\n    borderRadius: 5,\n    margin: 8,\n    backgroundColor: \"blue\"\n  },\n  moveRight: {\n    alignSelf: \"flex-end\",\n    height: 200,\n    width: 200\n  },\n  buttonContainer: {\n    alignSelf: \"center\"\n  }\n});\n\nexport default App;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "72e98b681a124a46299220836b4216fd7109e7bed381f6c5f12157f7369a655d",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_1f6cb4dd"
      }
    },
    {
      "segment_id": "a075432c",
      "source_content": "## Properties",
      "source_content_hash": "899ecb557156d36aac98f2082474f5ea1e01af3d4a611b79b00dab2a3116aab2",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 屬性"
      }
    },
    {
      "segment_id": "73eb56bc",
      "source_content": "### Types",
      "source_content_hash": "7bd9414ccce182ff61ac0bb88dff38d15d0fc465af95cf2a88bcb1729bf1421e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 類型"
      }
    },
    {
      "segment_id": "e962484d",
      "source_content": "An enumeration of animation types to be used in the [`create`](layoutanimation.md#create) method, or in the `create`/`update`/`delete` configs for [`configureNext`](layoutanimation.md#configurenext). (example usage: `LayoutAnimation.Types.easeIn`)",
      "source_content_hash": "dda31c420171949776f2ca96f27efd8447b74239faade502a78aacb564706163",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "動畫類型的枚舉，用於[`create`](layoutanimation.md#create)方法，或[`configureNext`](layoutanimation.md#configurenext)的`create`/`update`/`delete`配置中。（使用範例：`LayoutAnimation.Types.easeIn`）"
      }
    },
    {
      "segment_id": "85829b62",
      "source_content": "| Types         |\n| ------------- |\n| spring        |\n| linear        |\n| easeInEaseOut |\n| easeIn        |\n| easeOut       |\n| keyboard      |",
      "source_content_hash": "210b1fc9214dc85415137a00dfed8818a214c914dcf36ed22c93c0fba52f4386",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_85829b62"
      }
    },
    {
      "segment_id": "f3f517b3",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "a99db0f6",
      "source_content": "### Properties",
      "source_content_hash": "aebdd7e21f097f43be10085854c737bb7689d3434faf466f13789b084bcc6492",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 屬性"
      }
    },
    {
      "segment_id": "2ab62b74",
      "source_content": "An enumeration of layout properties to be animated to be used in the [`create`](layoutanimation.md#create) method, or in the `create`/`update`/`delete` configs for [`configureNext`](layoutanimation.md#configurenext). (example usage: `LayoutAnimation.Properties.opacity`)",
      "source_content_hash": "c82560e5dac988ff49460b5d51d9c51883fcd50bb7569a14c0e4e2eca7e01e72",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "佈局屬性的枚舉，用於動畫化，可在[`create`](layoutanimation.md#create)方法或[`configureNext`](layoutanimation.md#configurenext)的`create`/`update`/`delete`配置中使用。（使用範例：`LayoutAnimation.Properties.opacity`）"
      }
    },
    {
      "segment_id": "93ab5198",
      "source_content": "| Properties |\n| ---------- |\n| opacity    |\n| scaleX     |\n| scaleY     |\n| scaleXY    |",
      "source_content_hash": "eb2bfa8b1bc6ebcb1040b546f00e77d2b1316a1286a905ff3603b3ce83bbc73e",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_93ab5198"
      }
    },
    {
      "segment_id": "423d7e73",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "a4628837",
      "source_content": "### Presets",
      "source_content_hash": "62cb470e7691f20c654ab6e2698de098364c439630eb2a13f9d13f968d612d0d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 預設配置"
      }
    },
    {
      "segment_id": "b2ffb658",
      "source_content": "A set of predefined animation configs to pass into [`configureNext`](layoutanimation.md#configurenext).",
      "source_content_hash": "1d43927ed2859dbdfe20d150ae59537d27c71758a66ef9c49a894d3cc826edee",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "一組預定義的動畫配置，可傳入[`configureNext`](layoutanimation.md#configurenext)。"
      }
    },
    {
      "segment_id": "a559a766",
      "source_content": "| Presets       | Value                                                                                                                                                                 |\n| ------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| easeInEaseOut | `create(300, 'easeInEaseOut', 'opacity')`                                                                                                                             |\n| linear        | `create(500, 'linear', 'opacity')`                                                                                                                                    |\n| spring        | `{ duration: 700, create: { type: 'linear', property: 'opacity' }, update: { type: 'spring', springDamping: 0.4 }, delete: { type: 'linear', property: 'opacity' } }` |",
      "source_content_hash": "fe431ce66f5dc13d22f323ebde41d637e9a6abe4ccb46a8441c912cb445685da",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_a559a766"
      }
    },
    {
      "segment_id": "c611b0e1",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "757c087d",
      "source_content": "### `easeInEaseOut`",
      "source_content_hash": "b4b0f3603c355f662c0197b5542477db673b1b5170c45c64ca04728995bacba0",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `easeInEaseOut`"
      }
    },
    {
      "segment_id": "1dffcdf5",
      "source_content": "Calls `configureNext()` with `Presets.easeInEaseOut`.",
      "source_content_hash": "d0f44dc61558b08445acee599eac2121ec820204f40b353738095994c456120e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "使用`Presets.easeInEaseOut`調用`configureNext()`。"
      }
    },
    {
      "segment_id": "76a61c0e",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "3d6aa925",
      "source_content": "### `linear`",
      "source_content_hash": "f8fb2f110e6b4d31745fc8babd88a8e1730dd907ab7ec4169ef5eee8b3db1b7a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `linear`"
      }
    },
    {
      "segment_id": "b682f1ac",
      "source_content": "Calls `configureNext()` with `Presets.linear`.",
      "source_content_hash": "197ec0c462a098062d7c6218b8bbd51eecfe0aa8ecc86084aca6d109d2e90c16",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "使用`Presets.linear`調用`configureNext()`。"
      }
    },
    {
      "segment_id": "c9040f97",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "7f6f3173",
      "source_content": "### `spring`",
      "source_content_hash": "464b5fc65bf347c2d20dd65d02f4955e543d642a63d4484afcc51c6005af148e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `spring`"
      }
    },
    {
      "segment_id": "e9a0d59a",
      "source_content": "Calls `configureNext()` with `Presets.spring`.",
      "source_content_hash": "e8457319218980eb2b14f975f6d1370e2029ec78495e6419a665cc13a620ed4e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "使用 `Presets.spring` 呼叫 `configureNext()`。"
      }
    },
    {
      "segment_id": "a6efb0d1",
      "source_content": "**Example:**",
      "source_content_hash": "7cfe1b9c27bbfaa85c8030da8c6308bf8a1b92c6b8592754a77844c446e9722d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**範例：**"
      }
    },
    {
      "segment_id": "93270388",
      "source_content": "<Tabs groupId=\"syntax\" queryString defaultValue={constants.defaultSyntax} values={constants.syntax}>\n<TabItem value=\"functional\">\n\n```SnackPlayer name=LayoutAnimation&supportedPlatforms=android,ios\nimport React, { useState } from \"react\";\nimport {\n  View,\n  Platform,\n  UIManager,\n  LayoutAnimation,\n  StyleSheet,\n  Button\n} from \"react-native\";\n\nif (\n  Platform.OS === \"android\" &&\n  UIManager.setLayoutAnimationEnabledExperimental\n) {\n  UIManager.setLayoutAnimationEnabledExperimental(true);\n}\n\nconst App = () => {\n  const [firstBoxPosition, setFirstBoxPosition] = useState(\"left\");\n  const [secondBoxPosition, setSecondBoxPosition] = useState(\"left\");\n  const [thirdBoxPosition, setThirdBoxPosition] = useState(\"left\");\n\n  const toggleFirstBox = () => {\n    LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);\n    setFirstBoxPosition(firstBoxPosition === \"left\" ? \"right\" : \"left\");\n  };\n\n  const toggleSecondBox = () => {\n    LayoutAnimation.configureNext(LayoutAnimation.Presets.linear);\n    setSecondBoxPosition(secondBoxPosition === \"left\" ? \"right\" : \"left\");\n  };\n\n  const toggleThirdBox = () => {\n    LayoutAnimation.configureNext(LayoutAnimation.Presets.spring);\n    setThirdBoxPosition(thirdBoxPosition === \"left\" ? \"right\" : \"left\");\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.buttonContainer}>\n        <Button title=\"EaseInEaseOut\" onPress={toggleFirstBox} />\n      </View>\n      <View\n        style={[\n          styles.box,\n          firstBoxPosition === \"left\" ? null : styles.moveRight\n        ]}\n      />\n      <View style={styles.buttonContainer}>\n        <Button title=\"Linear\" onPress={toggleSecondBox} />\n      </View>\n      <View\n        style={[\n          styles.box,\n          secondBoxPosition === \"left\" ? null : styles.moveRight\n        ]}\n      />\n      <View style={styles.buttonContainer}>\n        <Button title=\"Spring\" onPress={toggleThirdBox} />\n      </View>\n      <View\n        style={[\n          styles.box,\n          thirdBoxPosition === \"left\" ? null : styles.moveRight\n        ]}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"flex-start\",\n    justifyContent: \"center\"\n  },\n  box: {\n    height: 100,\n    width: 100,\n    borderRadius: 5,\n    margin: 8,\n    backgroundColor: \"blue\"\n  },\n  moveRight: {\n    alignSelf: \"flex-end\"\n  },\n  buttonContainer: {\n    alignSelf: \"center\"\n  }\n});\n\nexport default App;\n```\n\n</TabItem>\n<TabItem value=\"classical\">\n\n```SnackPlayer name=LayoutAnimation&supportedPlatforms=android,ios\nimport React, { Component } from \"react\";\nimport {\n  View,\n  Platform,\n  UIManager,\n  LayoutAnimation,\n  StyleSheet,\n  Button\n} from \"react-native\";\n\nif (\n  Platform.OS === \"android\" &&\n  UIManager.setLayoutAnimationEnabledExperimental\n) {\n  UIManager.setLayoutAnimationEnabledExperimental(true);\n}\n\nclass App extends Component {\n  state = {\n    firstBoxPosition: \"left\",\n    secondBoxPosition: \"left\",\n    thirdBoxPosition: \"left\"\n  };\n\n  toggleFirstBox = () => {\n    LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);\n    this.setState({\n      firstBoxPosition:\n        this.state.firstBoxPosition === \"left\" ? \"right\" : \"left\"\n    });\n  };\n\n  toggleSecondBox = () => {\n    LayoutAnimation.configureNext(LayoutAnimation.Presets.linear);\n    this.setState({\n      secondBoxPosition:\n        this.state.secondBoxPosition === \"left\" ? \"right\" : \"left\"\n    });\n  };\n\n  toggleThirdBox = () => {\n    LayoutAnimation.configureNext(LayoutAnimation.Presets.spring);\n    this.setState({\n      thirdBoxPosition:\n        this.state.thirdBoxPosition === \"left\" ? \"right\" : \"left\"\n    });\n  };\n\n  render() {\n    return (\n      <View style={styles.container}>\n        <View style={styles.buttonContainer}>\n          <Button title=\"EaseInEaseOut\" onPress={this.toggleFirstBox} />\n        </View>\n        <View\n          style={[\n            styles.box,\n            this.state.firstBoxPosition === \"left\" ? null : styles.moveRight\n          ]}\n        />\n        <View style={styles.buttonContainer}>\n          <Button title=\"Linear\" onPress={this.toggleSecondBox} />\n        </View>\n        <View\n          style={[\n            styles.box,\n            this.state.secondBoxPosition === \"left\" ? null : styles.moveRight\n          ]}\n        />\n        <View style={styles.buttonContainer}>\n          <Button title=\"Spring\" onPress={this.toggleThirdBox} />\n        </View>\n        <View\n          style={[\n            styles.box,\n            this.state.thirdBoxPosition === \"left\" ? null : styles.moveRight\n          ]}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"flex-start\",\n    justifyContent: \"center\"\n  },\n  box: {\n    height: 100,\n    width: 100,\n    borderRadius: 5,\n    margin: 8,\n    backgroundColor: \"blue\"\n  },\n  moveRight: {\n    alignSelf: \"flex-end\"\n  },\n  buttonContainer: {\n    alignSelf: \"center\"\n  }\n});\n\nexport default App;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "7f43c4f6a903ddb67f5faae874fead6de8f00c4618c15f54dc8917016631a056",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_93270388"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.70/layoutanimation.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.237858+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "4f504046b3cf792f2c1d34f7aeb42bf45a3902c8c5089dc3996f106757a83c19"
  }
}