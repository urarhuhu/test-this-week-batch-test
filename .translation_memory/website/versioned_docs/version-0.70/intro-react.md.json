{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.70/intro-react.md",
  "source_file_content_hash": "fb195b358cd66296055cf9bf412b3412e23792a830de4631508310c3a47b2b79",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: intro-react\ntitle: React Fundamentals\ndescription: To understand React Native fully, you need a solid foundation in React. This short introduction to React can help you get started or get refreshed.\n---",
      "source_content_hash": "a83feae7e9d781eaf0e6d2799d3a9a0abca21eeff50645e9d4cdb1b327f9c7ce",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "10c4cb47",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_10c4cb47"
      }
    },
    {
      "segment_id": "53eaf0e1",
      "source_content": "React Native runs on [React](https://reactjs.org/), a popular open source library for building user interfaces with JavaScript. To make the most of React Native, it helps to understand React itself. This section can get you started or can serve as a refresher course.",
      "source_content_hash": "76c609a345553b0df153027e0f8753336c87f7e432e1b7eb532ab101a13a2ad5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Native 基於 [React](https://reactjs.org/) 運行，這是一個用 JavaScript 構建用戶界面的熱門開源庫。要充分發揮 React Native 的優勢，理解 React 本身至關重要。本節可作為入門指南或複習課程。"
      }
    },
    {
      "segment_id": "8ac585fb",
      "source_content": "We’re going to cover the core concepts behind React:",
      "source_content_hash": "30beadd99b4ed23d45375f6d0b336495d1d91dafaebe3cd463ce4afdb9ff4e8d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們將涵蓋 React 的核心概念："
      }
    },
    {
      "segment_id": "730c423c",
      "source_content": "- components\n- JSX\n- props\n- state",
      "source_content_hash": "5cba449c7905e47e9c1eee0478608dbac2e2777f837b775ca68ce7a1341716f5",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 組件 (components)\n- JSX\n- 屬性 (props)\n- 狀態 (state)"
      }
    },
    {
      "segment_id": "39b3772c",
      "source_content": "If you want to dig deeper, we encourage you to check out [React’s official documentation](https://reactjs.org/docs/getting-started.html).",
      "source_content_hash": "42f33c0b2728ad29fdd8e6c7ee8235d8499ba6b687cf6fa1597964b5699bf60a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若需深入學習，建議查閱 [React 官方文檔](https://reactjs.org/docs/getting-started.html)。"
      }
    },
    {
      "segment_id": "bc633244",
      "source_content": "## Your first component",
      "source_content_hash": "25f4108400b177be89d291928da938bdd93d81f9cdeec82d911200f1297f9a9d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 你的第一個組件"
      }
    },
    {
      "segment_id": "2df4f75f",
      "source_content": "The rest of this introduction to React uses cats in its examples: friendly, approachable creatures that need names and a cafe to work in. Here is your very first Cat component:",
      "source_content_hash": "be4a6f1ae5e5ba6e935c217af14519cfd42e9dd184207ca147cd30e9e26e2ccf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "本篇 React 入門將以貓咪為例：這些友好親人的生物需要名字和工作的咖啡館。以下是你的第一個 Cat 組件："
      }
    },
    {
      "segment_id": "42e34e45",
      "source_content": "<Tabs groupId=\"syntax\" queryString defaultValue={constants.defaultSyntax} values={constants.syntax}>\n<TabItem value=\"functional\">\n\n```SnackPlayer name=Your%20Cat\nimport React from 'react';\nimport { Text } from 'react-native';\n\nconst Cat = () => {\n  return (\n    <Text>Hello, I am your cat!</Text>\n  );\n}\n\nexport default Cat;\n```\n\nHere is how you do it: To define your `Cat` component, first use JavaScript’s [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) to import React and React Native’s [`Text`](/docs/next/text) Core Component:\n\n```jsx\nimport React from 'react';\nimport {Text} from 'react-native';\n```\n\nYour component starts as a function:\n\n```jsx\nconst Cat = () => {};\n```\n\nYou can think of components as blueprints. Whatever a function component returns is rendered as a **React element.** React elements let you describe what you want to see on the screen.\n\nHere the `Cat` component will render a `<Text>` element:\n\n```jsx\nconst Cat = () => {\n  return <Text>Hello, I am your cat!</Text>;\n};\n```\n\nYou can export your function component with JavaScript’s [`export default`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) for use throughout your app like so:\n\n```jsx\nconst Cat = () => {\n  return <Text>Hello, I am your cat!</Text>;\n};\n\nexport default Cat;\n```\n\n</TabItem>\n<TabItem value=\"classical\">\n\nClass components tend to be a bit more verbose than function components.\n\n```SnackPlayer name=Your%20Cat\nimport React, { Component } from 'react';\nimport { Text } from 'react-native';\n\nclass Cat extends Component {\n  render() {\n    return (\n      <Text>Hello, I am your cat!</Text>\n    );\n  }\n}\n\nexport default Cat;\n```\n\nYou additionally import `Component` from React:\n\n```jsx\nimport React, {Component} from 'react';\n```\n\nYour component starts as a class extending `Component` instead of as a function:\n\n```jsx\nclass Cat extends Component {}\n```\n\nClass components have a `render()` function. Whatever is returned inside it is rendered as a React element:\n\n```jsx\nclass Cat extends Component {\n  render() {\n    return <Text>Hello, I am your cat!</Text>;\n  }\n}\n```\n\nAnd as with function components, you can export your class component:\n\n```jsx\nclass Cat extends Component {\n  render() {\n    return <Text>Hello, I am your cat!</Text>;\n  }\n}\n\nexport default Cat;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "deebc3b9589626822bdd0089ccf3102f5674da5414bd0d03702f0e97048dfd6d",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_42e34e45"
      }
    },
    {
      "segment_id": "d459b1e0",
      "source_content": "> This is one of many ways to export your component. This kind of export works well with the Snack Player. However, depending on your app’s file structure, you might need to use a different convention. This [handy cheatsheet on JavaScript imports and exports](https://medium.com/dailyjs/javascript-module-cheatsheet-7bd474f1d829) can help.",
      "source_content_hash": "eb01d08c228c2b775350e040f8e76920f61e514e60690bf33940eda7a6a86dc8",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 這是導出組件的多種方式之一。此類導出方式與 Snack Player 相容性良好。但根據應用文件結構，你可能需要採用其他慣例。這份 [JavaScript 導入導出速查表](https://medium.com/dailyjs/javascript-module-cheatsheet-7bd474f1d829) 可提供協助。"
      }
    },
    {
      "segment_id": "f45239ba",
      "source_content": "Now take a closer look at that `return` statement. `<Text>Hello, I am your cat!</Text>` is using a kind of JavaScript syntax that makes writing elements convenient: JSX.",
      "source_content_hash": "3d58686b6d5d8d097b3009b0c28ca25978fc57e5cafe105ca56dad83bc5d4fcc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在仔細觀察 `return` 語句。`<Text>Hello, I am your cat!</Text>` 使用了一種讓元素編寫更便捷的 JavaScript 語法：JSX。"
      }
    },
    {
      "segment_id": "8f1c1cd6",
      "source_content": "## JSX",
      "source_content_hash": "2b0dc8b879f0e50f62565b07648ba51817dc8b2e049703c5894cba14e272a9f1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## JSX"
      }
    },
    {
      "segment_id": "383fbdd2",
      "source_content": "React and React Native use **JSX,** a syntax that lets you write elements inside JavaScript like so: `<Text>Hello, I am your cat!</Text>`. The React docs have [a comprehensive guide to JSX](https://reactjs.org/docs/jsx-in-depth.html) you can refer to learn even more. Because JSX is JavaScript, you can use variables inside it. Here you are declaring a name for the cat, `name`, and embedding it with curly braces inside `<Text>`.",
      "source_content_hash": "485fb0ff57dc6e608ee593b1a5e6f857314b8274bf0e28581caa3c8e7a12a774",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React 與 React Native 使用 **JSX**，這種語法允許你在 JavaScript 中直接編寫元素：`<Text>Hello, I am your cat!</Text>`。React 文檔提供 [詳盡的 JSX 指南](https://reactjs.org/docs/jsx-in-depth.html) 可供深入學習。由於 JSX 本質是 JavaScript，你可以在其中使用變量。此處我們宣告貓咪的名字 `name`，並用大括號將其嵌入 `<Text>`。"
      }
    },
    {
      "segment_id": "8d1b00fd",
      "source_content": "```SnackPlayer name=Curly%20Braces\nimport React from 'react';\nimport { Text } from 'react-native';\n\nconst Cat = () => {\n  const name = \"Maru\";\n  return (\n    <Text>Hello, I am {name}!</Text>\n  );\n}\n\nexport default Cat;\n```",
      "source_content_hash": "d614e2291191abf85d01548f3d20237c7d1b7496d4cc1f3504ad15936bc58d36",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_8d1b00fd"
      }
    },
    {
      "segment_id": "719d3997",
      "source_content": "Any JavaScript expression will work between curly braces, including function calls like `{getFullName(\"Rum\", \"Tum\", \"Tugger\")}`:",
      "source_content_hash": "3a75fb70d84f202fa4a8a4b88f92f2e89bfad693880532a1237f1f598f1cfb0f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "任何 JavaScript 表達式都可置於大括號內，包括函數調用如 `{getFullName(\"Rum\", \"Tum\", \"Tugger\")}`："
      }
    },
    {
      "segment_id": "5d30fd9b",
      "source_content": "```SnackPlayer name=Curly%20Braces\nimport React from 'react';\nimport { Text } from 'react-native';\n\nconst getFullName = (firstName, secondName, thirdName) => {\n  return firstName + \" \" + secondName + \" \" + thirdName;\n}\n\nconst Cat = () => {\n  return (\n    <Text>\n      Hello, I am {getFullName(\"Rum\", \"Tum\", \"Tugger\")}!\n    </Text>\n  );\n}\n\nexport default Cat;\n```",
      "source_content_hash": "10d76e7fc97f29da02a62066a2689f5bb2c6d9116f34ccd37c73b77d8369853b",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_5d30fd9b"
      }
    },
    {
      "segment_id": "62d066b0",
      "source_content": "You can think of curly braces as creating a portal into JS functionality in your JSX!",
      "source_content_hash": "357159bbdf8f19a8d349e6c6472ffec4438409ef4ce1a9d07a07e91f84830e87",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以將大括號視為通往 JSX 中 JavaScript 功能的傳送門！"
      }
    },
    {
      "segment_id": "fa447120",
      "source_content": "> Because JSX is included in the React library, it won’t work if you don’t have `import React from 'react'` at the top of your file!",
      "source_content_hash": "404ec02ae7120098da0bd7c03e91b6b5e2cf55cd578779c3e26a66b7aac5c300",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 由於 JSX 包含在 React 庫中，若文件頂部沒有 `import React from 'react'`，它將無法工作！"
      }
    },
    {
      "segment_id": "67edbbc4",
      "source_content": "## Custom Components",
      "source_content_hash": "ca6e6c44f9de4f01899effb6b8aee0265f14159227b864335548f4565e52e08c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 自定義組件"
      }
    },
    {
      "segment_id": "61a78cbe",
      "source_content": "You’ve already met [React Native’s Core Components](intro-react-native-components). React lets you nest these components inside each other to create new components. These nestable, reusable components are at the heart of the React paradigm.",
      "source_content_hash": "ac5180b8047b4137c5847f671cae60601a3dee9c569a671508edaa285f830f37",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你已認識 [React Native 核心組件](intro-react-native-components)。React 允許將這些組件相互嵌套以創建新組件，這種可嵌套、可複用的特性正是 React 範式的核心。"
      }
    },
    {
      "segment_id": "39c48ff7",
      "source_content": "For example, you can nest [`Text`](text) and [`TextInput`](textinput) inside a [`View`](view) below, and React Native will render them together:",
      "source_content_hash": "cd46359da6b75f80d467df401e548127f311940d6a6f8a7ffc3cc36f25c0702f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "例如，你可以將 [`Text`](text) 和 [`TextInput`](textinput) 嵌套在 [`View`](view) 中，React Native 會將它們一併渲染："
      }
    },
    {
      "segment_id": "b26685f5",
      "source_content": "```SnackPlayer name=Custom%20Components\nimport React from 'react';\nimport { Text, TextInput, View } from 'react-native';\n\nconst Cat = () => {\n  return (\n    <View>\n      <Text>Hello, I am...</Text>\n      <TextInput\n        style={{\n          height: 40,\n          borderColor: 'gray',\n          borderWidth: 1\n        }}\n        defaultValue=\"Name me!\"\n      />\n    </View>\n  );\n}\n\nexport default Cat;\n```",
      "source_content_hash": "84aa4f092ad371607fda3ece1dd8c56be5fdce880115a203b784f661f72f9a6b",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_b26685f5"
      }
    },
    {
      "segment_id": "a7628008",
      "source_content": "#### Developer notes",
      "source_content_hash": "66e953d4565d4aaa29f8e46c15a35a647c771f450704cb6a726e362a63753246",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### 開發者須知"
      }
    },
    {
      "segment_id": "87307808",
      "source_content": "<Tabs groupId=\"guide\" queryString defaultValue=\"web\" values={constants.getDevNotesTabs([\"android\", \"web\"])}>\n\n<TabItem value=\"web\">\n\n> If you’re familiar with web development, `<View>` and `<Text>` might remind you of HTML! You can think of them as the `<div>` and `<p>` tags of application development.\n\n</TabItem>\n<TabItem value=\"android\">\n\n> On Android, you usually put your views inside `LinearLayout`, `FrameLayout`, `RelativeLayout`, etc. to define how the view’s children will be arranged on the screen. In React Native, `View` uses Flexbox for its children’s layout. You can learn more in [our guide to layout with Flexbox](flexbox).\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "d5f26986fad93cce21b69ebf561d948170c6ebd31c7463ae06e9f0100f33a2cf",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_87307808"
      }
    },
    {
      "segment_id": "833ce577",
      "source_content": "You can render this component multiple times and in multiple places without repeating your code by using `<Cat>`:",
      "source_content_hash": "cedfefab5196e2370fa73aa91718c8e8a71b5b11440388be4ca99b616ba83994",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "通過使用 `<Cat>`，你可以在多處重複渲染此組件而無需重複代碼："
      }
    },
    {
      "segment_id": "3d4d9546",
      "source_content": "```SnackPlayer name=Multiple%20Components\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nconst Cat = () => {\n  return (\n    <View>\n      <Text>I am also a cat!</Text>\n    </View>\n  );\n}\n\nconst Cafe = () => {\n  return (\n    <View>\n      <Text>Welcome!</Text>\n      <Cat />\n      <Cat />\n      <Cat />\n    </View>\n  );\n}\n\nexport default Cafe;\n```",
      "source_content_hash": "ae0ae72058e1add41ec06f9a2857b121a4d90821155f93e69ca304c762ab06ae",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_3d4d9546"
      }
    },
    {
      "segment_id": "e636ba62",
      "source_content": "Any component that renders other components is a **parent component.** Here, `Cafe` is the parent component and each `Cat` is a **child component.**",
      "source_content_hash": "fedb8dab541a2e6694bd24e9a8ad72ba7274a39dcaa95682a8297ef75fa0ee52",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "任何渲染其他組件的組件稱為 **父組件**。此處 `Cafe` 是父組件，每個 `Cat` 則是 **子組件**。"
      }
    },
    {
      "segment_id": "b0c30ab4",
      "source_content": "You can put as many cats in your cafe as you like. Each `<Cat>` renders a unique element—which you can customize with props.",
      "source_content_hash": "b73269b4f03df936c84bf435db77b17e04b9e55bf08c80ec6da91e59d06348aa",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以在咖啡館放置任意數量的貓咪。每個 `<Cat>` 都會渲染獨立的元素——並可通過屬性進行定制。"
      }
    },
    {
      "segment_id": "f7d4d765",
      "source_content": "## Props",
      "source_content_hash": "5b94a6cc928a22f2ff71078f7462cd97dbe259a0c4d1877ab3afc2a92dded915",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 屬性 (Props)"
      }
    },
    {
      "segment_id": "13440cd7",
      "source_content": "**Props** is short for “properties”. Props let you customize React components. For example, here you pass each `<Cat>` a different `name` for `Cat` to render:",
      "source_content_hash": "ec192ff634ff7839d60f1afeef533e8aa5e2643cefe692784287cf4eef20ba04",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**Props** 是 \"properties\" 的簡稱。通過 Props 可定制 React 組件。例如，此處我們為每個 `<Cat>` 傳遞不同的 `name` 供其渲染："
      }
    },
    {
      "segment_id": "9d91602e",
      "source_content": "```SnackPlayer name=Multiple%20Props\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nconst Cat = (props) => {\n  return (\n    <View>\n      <Text>Hello, I am {props.name}!</Text>\n    </View>\n  );\n}\n\nconst Cafe = () => {\n  return (\n    <View>\n      <Cat name=\"Maru\" />\n      <Cat name=\"Jellylorum\" />\n      <Cat name=\"Spot\" />\n    </View>\n  );\n}\n\nexport default Cafe;\n```",
      "source_content_hash": "462ab098169f566efc57c70c72a7ada8bbe1a4242120e245d8bc921aa65d40b2",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_9d91602e"
      }
    },
    {
      "segment_id": "e962484d",
      "source_content": "Most of React Native’s Core Components can be customized with props, too. For example, when using [`Image`](image), you pass it a prop named [`source`](image#source) to define what image it shows:",
      "source_content_hash": "8d8d07a0ad89a1152427cc4e95591b76e9f8099cad70dcaa1ea5cb33fbac7fec",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "大多數 React Native 核心組件也可通過 Props 定制。例如使用 [`Image`](image) 時，可傳遞 [`source`](image#source) 屬性來指定顯示的圖片："
      }
    },
    {
      "segment_id": "9dd29bcd",
      "source_content": "```SnackPlayer name=Props\nimport React from 'react';\nimport { Text, View, Image } from 'react-native';\n\nconst CatApp = () => {\n  return (\n    <View>\n      <Image\n        source={{uri: \"https://reactnative.dev/docs/assets/p_cat1.png\"}}\n        style={{width: 200, height: 200}}\n      />\n      <Text>Hello, I am your cat!</Text>\n    </View>\n  );\n}\n\nexport default CatApp;\n```",
      "source_content_hash": "efb02444554d7ef92bbf051b0100a860ac58e96596444c96db1dc13b1f694844",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_9dd29bcd"
      }
    },
    {
      "segment_id": "8517ac25",
      "source_content": "`Image` has [many different props](image#props), including [`style`](image#style), which accepts a JS object of design and layout related property-value pairs.",
      "source_content_hash": "0ede1b56a885beb2cf17c9393d307f96848ed13342b07ca8eb388e9f60ec356a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`Image` 擁有[許多不同的 props](image#props)，包括 [`style`](image#style)，它接受一個包含設計和佈局相關屬性-值對的 JS 物件。"
      }
    },
    {
      "segment_id": "9d4b10e2",
      "source_content": "> Notice the double curly braces `{{ }}` surrounding `style`‘s width and height. In JSX, JavaScript values are referenced with `{}`. This is handy if you are passing something other than a string as props, like an array or number: `<Cat food={[\"fish\", \"kibble\"]} age={2} />`. However, JS objects are **_also_** denoted with curly braces: `{width: 200, height: 200}`. Therefore, to pass a JS object in JSX, you must wrap the object in **another pair** of curly braces: `{{width: 200, height: 200}}`",
      "source_content_hash": "52ca9931f7ede7324ccd5544f636aba86afa8e91a27f9f376c8f11d5ba1d790d",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 請注意 `style` 的寬度和高度周圍的雙大括號 `{{ }}`。在 JSX 中，JavaScript 值是用 `{}` 來引用的。這在傳遞非字串的 props 時非常方便，比如陣列或數字：`<Cat food={[\"fish\", \"kibble\"]} age={2} />`。然而，JS 物件**也**是用大括號表示的：`{width: 200, height: 200}`。因此，要在 JSX 中傳遞一個 JS 物件，你必須用**另一對**大括號將物件包起來：`{{width: 200, height: 200}}`"
      }
    },
    {
      "segment_id": "d1996877",
      "source_content": "You can build many things with props and the Core Components [`Text`](text), [`Image`](image), and [`View`](view)! But to build something interactive, you’ll need state.",
      "source_content_hash": "20bfc459533908cc876151d4d92b78bff3af76314018c0aa4f3c1a57579e3b66",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以用 props 和核心元件 [`Text`](text)、[`Image`](image) 和 [`View`](view) 來構建許多東西！但要構建互動式的東西，你需要狀態。"
      }
    },
    {
      "segment_id": "d087570f",
      "source_content": "## State",
      "source_content_hash": "b74e9a3ac0450a7fcea9d133952a2ed0f9a731d22c0f07369c92352a6061e691",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 狀態"
      }
    },
    {
      "segment_id": "1f92e934",
      "source_content": "While you can think of props as arguments you use to configure how components render, **state** is like a component’s personal data storage. State is useful for handling data that changes over time or that comes from user interaction. State gives your components memory!",
      "source_content_hash": "36c4c80c2ca4437b8bab88c3edcde99b50291a3dae6e91c616f0a1091b59725e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "雖然你可以將 props 視為配置元件渲染方式的參數，但**狀態**就像是元件的個人數據存儲。狀態對於處理隨時間變化的數據或用戶交互產生的數據非常有用。狀態賦予你的元件記憶！"
      }
    },
    {
      "segment_id": "96f42f1f",
      "source_content": "> As a general rule, use props to configure a component when it renders. Use state to keep track of any component data that you expect to change over time.",
      "source_content_hash": "758cc8c4a177027f1b8c112e3e0a03f00b38b69096723cac0d56e9abc764ce50",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 一般來說，當元件渲染時，使用 props 來配置它。使用狀態來跟踪你預期會隨時間變化的任何元件數據。"
      }
    },
    {
      "segment_id": "83d7d3bc",
      "source_content": "The following example takes place in a cat cafe where two hungry cats are waiting to be fed. Their hunger, which we expect to change over time (unlike their names), is stored as state. To feed the cats, press their buttons—which will update their state.",
      "source_content_hash": "14227502d8fb1c9c6ff5cd3e1554586ad6720585c08aa9ab81b7edcb68fa3085",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "以下示例發生在一家貓咖啡館，兩隻飢餓的貓正在等待餵食。它們的飢餓程度（我們預期會隨時間變化，不像它們的名字）被存儲為狀態。要餵貓，按下它們的按鈕——這將更新它們的狀態。"
      }
    },
    {
      "segment_id": "b27c4113",
      "source_content": "<Tabs groupId=\"syntax\" queryString defaultValue={constants.defaultSyntax} values={constants.syntax}>\n<TabItem value=\"functional\">\n\nYou can add state to a component by calling [React’s `useState` Hook](https://reactjs.org/docs/hooks-state.html). A Hook is a kind of function that lets you “hook into” React features. For example, `useState` is a Hook that lets you add state to function components. You can learn more about [other kinds of Hooks in the React documentation.](https://reactjs.org/docs/hooks-intro.html)\n\n```SnackPlayer name=State\nimport React, { useState } from \"react\";\nimport { Button, Text, View } from \"react-native\";\n\nconst Cat = (props) => {\n  const [isHungry, setIsHungry] = useState(true);\n\n  return (\n    <View>\n      <Text>\n        I am {props.name}, and I am {isHungry ? \"hungry\" : \"full\"}!\n      </Text>\n      <Button\n        onPress={() => {\n          setIsHungry(false);\n        }}\n        disabled={!isHungry}\n        title={isHungry ? \"Pour me some milk, please!\" : \"Thank you!\"}\n      />\n    </View>\n  );\n}\n\nconst Cafe = () => {\n  return (\n    <>\n      <Cat name=\"Munkustrap\" />\n      <Cat name=\"Spot\" />\n    </>\n  );\n}\n\nexport default Cafe;\n```\n\nFirst, you will want to import `useState` from React like so:\n\n```jsx\nimport React, {useState} from 'react';\n```\n\nThen you declare the component’s state by calling `useState` inside its function. In this example, `useState` creates an `isHungry` state variable:\n\n```jsx\nconst Cat = props => {\n  const [isHungry, setIsHungry] = useState(true);\n  // ...\n};\n```\n\n> You can use `useState` to track any kind of data: strings, numbers, Booleans, arrays, objects. For example, you can track the number of times a cat has been petted with `const [timesPetted, setTimesPetted] = useState(0)`!\n\nCalling `useState` does two things:\n\n- it creates a “state variable” with an initial value—in this case the state variable is `isHungry` and its initial value is `true`\n- it creates a function to set that state variable’s value—`setIsHungry`\n\nIt doesn’t matter what names you use. But it can be handy to think of the pattern as `[<getter>, <setter>] = useState(<initialValue>)`.\n\nNext you add the [`Button`](button) Core Component and give it an `onPress` prop:\n\n```jsx\n<Button\n  onPress={() => {\n    setIsHungry(false);\n  }}\n  //..\n/>\n```\n\nNow, when someone presses the button, `onPress` will fire, calling the `setIsHungry(false)`. This sets the state variable `isHungry` to `false`. When `isHungry` is false, the `Button`’s `disabled` prop is set to `true` and its `title` also changes:\n\n```jsx\n<Button\n  //..\n  disabled={!isHungry}\n  title={isHungry ? 'Pour me some milk, please!' : 'Thank you!'}\n/>\n```\n\n> You might’ve noticed that although `isHungry` is a [const](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/const), it is seemingly reassignable! What is happening is when a state-setting function like `setIsHungry` is called, its component will re-render. In this case the `Cat` function will run again—and this time, `useState` will give us the next value of `isHungry`.\n\nFinally, put your cats inside a `Cafe` component:\n\n```jsx\nconst Cafe = () => {\n  return (\n    <>\n      <Cat name=\"Munkustrap\" />\n      <Cat name=\"Spot\" />\n    </>\n  );\n};\n```\n\n</TabItem>\n<TabItem value=\"classical\">\n\nThe older class components approach is a little different when it comes to state.\n\n```SnackPlayer name=State%20and%20Class%20Components\nimport React, { Component } from \"react\";\nimport { Button, Text, View } from \"react-native\";\n\nclass Cat extends Component {\n  state = { isHungry: true };\n\n  render() {\n    return (\n      <View>\n        <Text>\n          I am {this.props.name}, and I am\n          {this.state.isHungry ? \" hungry\" : \" full\"}!\n        </Text>\n        <Button\n          onPress={() => {\n            this.setState({ isHungry: false });\n          }}\n          disabled={!this.state.isHungry}\n          title={\n            this.state.isHungry ? \"Pour me some milk, please!\" : \"Thank you!\"\n          }\n        />\n      </View>\n    );\n  }\n}\n\nclass Cafe extends Component {\n  render() {\n    return (\n      <>\n        <Cat name=\"Munkustrap\" />\n        <Cat name=\"Spot\" />\n      </>\n    );\n  }\n}\n\nexport default Cafe;\n```\n\nAs always with class components, you must import the `Component` class from React:\n\n```jsx\nimport React, {Component} from 'react';\n```\n\nIn class components, state is stored in a state object:\n\n```jsx\nexport class Cat extends Component {\n  state = {isHungry: true};\n  //..\n}\n```\n\nAs with accessing props with `this.props`, you access this object inside your component with `this.state`:\n\n```jsx\n<Text>\n  I am {this.props.name}, and I am\n  {this.state.isHungry ? ' hungry' : ' full'}!\n</Text>\n```\n\nAnd you set individual values inside the state object by passing an object with the key value pair for state and its new value to `this.setState()`:\n\n```jsx\n<Button\n  onPress={() => {\n    this.setState({isHungry: false});\n  }}\n  // ..\n/>\n```\n\n> Do not change your component's state directly by assigning it a new value with `this.state.isHungry = false`. Calling `this.setState()` allows React to track changes made to state that trigger rerendering. Setting state directly can break your app's reactivity!\n\nWhen `this.state.isHungry` is false, the `Button`’s `disabled` prop is set to `true` and its `title` also changes:\n\n```jsx\n<Button\n  // ..\n  disabled={!this.state.isHungry}\n  title={\n    this.state.isHungry\n      ? 'Pour me some milk, please!'\n      : 'Thank you!'\n  }\n/>\n```\n\nFinally, put your cats inside a `Cafe` component:\n\n```jsx\nclass Cafe extends Component {\n  render() {\n    return (\n      <>\n        <Cat name=\"Munkustrap\" />\n        <Cat name=\"Spot\" />\n      </>\n    );\n  }\n}\n\nexport default Cafe;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "802d1dc6404cd5e216e9526a9d318a07d998cd515c76141c29d4acedffcee9b7",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_b27c4113"
      }
    },
    {
      "segment_id": "ef21790d",
      "source_content": "> See the `<>` and `</>` above? These bits of JSX are [fragments](https://reactjs.org/docs/fragments.html). Adjacent JSX elements must be wrapped in an enclosing tag. Fragments let you do that without nesting an extra, unnecessary wrapping element like `View`.",
      "source_content_hash": "51448e52e2990857893b50a0a8332d0347b029cb1b00386e69b904f5221e70ef",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 看到上面的 `<>` 和 `</>` 了嗎？這些 JSX 片段是 [fragments](https://reactjs.org/docs/fragments.html)。相鄰的 JSX 元素必須包裹在一個封閉標籤中。Fragments 讓你可以做到這一點，而無需嵌套一個額外的、不必要的包裹元素，如 `View`。"
      }
    },
    {
      "segment_id": "d3015c28",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "6f54fd35",
      "source_content": "Now that you’ve covered both React and React Native’s Core Components, let’s dive deeper on some of these core components by looking at [handling `<TextInput>`](handling-text-input).",
      "source_content_hash": "271ce4a7febae4c56ab234837a9763c93fcaf788cad5b6a942e810f4b74d91ef",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在你已經涵蓋了 React 和 React Native 的核心元件，讓我們通過查看[處理 `<TextInput>`](handling-text-input) 來更深入地了解其中一些核心元件。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.70/intro-react.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.241399+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "fb195b358cd66296055cf9bf412b3412e23792a830de4631508310c3a47b2b79"
  }
}