{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.70/virtualizedlist.md",
  "source_file_content_hash": "d9e119d5e8bde0862e581f9bdda1ae9edb4c8bb7a59d3a18603933ebdfd95141",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: virtualizedlist\ntitle: VirtualizedList\n---",
      "source_content_hash": "0907e563e17a858dbbc776ca44f67fc6515326143ffbc704e61a58c51c4b9c0e",
      "node_type": "yaml",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "bb42506b",
      "source_content": "Base implementation for the more convenient [`<FlatList>`](flatlist.md) and [`<SectionList>`](sectionlist.md) components, which are also better documented. In general, this should only really be used if you need more flexibility than [`FlatList`](flatlist.md) provides, e.g. for use with immutable data instead of plain arrays.",
      "source_content_hash": "5dbffb75041ab459f9074d9c1c966809191ccb904237a548640ef85ac961da20",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "Virtualization massively improves memory consumption and performance of large lists by maintaining a finite render window of active items and replacing all items outside of the render window with appropriately sized blank space. The window adapts to scrolling behavior, and items are rendered incrementally with low-pri (after any running interactions) if they are far from the visible area, or with hi-pri otherwise to minimize the potential of seeing blank space.",
      "source_content_hash": "42856f1794654d68c66c88755b62bf487491690b3f328c37f821a07f6f009533",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "1cc03ec8",
      "source_content": "## Example",
      "source_content_hash": "9bf34f44c9d1371f4eda569dfa04ff7830aff81cfa81646e680cef087714cdc1",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "ee201347",
      "source_content": "```SnackPlayer name=VirtualizedListExample\nimport React from 'react';\nimport { SafeAreaView, View, VirtualizedList, StyleSheet, Text, StatusBar } from 'react-native';\n\nconst DATA = [];\n\nconst getItem = (data, index) => ({\n  id: Math.random().toString(12).substring(0),\n  title: `Item ${index+1}`\n});\n\nconst getItemCount = (data) => 50;\n\nconst Item = ({ title }) => (\n  <View style={styles.item}>\n    <Text style={styles.title}>{title}</Text>\n  </View>\n);\n\nconst App = () => {\n  return (\n    <SafeAreaView style={styles.container}>\n      <VirtualizedList\n        data={DATA}\n        initialNumToRender={4}\n        renderItem={({ item }) => <Item title={item.title} />}\n        keyExtractor={item => item.key}\n        getItemCount={getItemCount}\n        getItem={getItem}\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight,\n  },\n  item: {\n    backgroundColor: '#f9c2ff',\n    height: 150,\n    justifyContent: 'center',\n    marginVertical: 8,\n    marginHorizontal: 16,\n    padding: 20,\n  },\n  title: {\n    fontSize: 32,\n  },\n});\n\nexport default App;\n```",
      "source_content_hash": "5c101c56d14228d38beb56a1cec40ce9e2312a534e4b121ac7a32f732c9b9029",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "379f9c7b",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "657c2b20",
      "source_content": "Some caveats:",
      "source_content_hash": "7313603ba9d419b21b6c5c5155fce7891ea16b3b09b8498f5fc8c37f7ab93f0d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "af6ca965",
      "source_content": "- Internal state is not preserved when content scrolls out of the render window. Make sure all your data is captured in the item data or external stores like Flux, Redux, or Relay.\n- This is a `PureComponent` which means that it will not re-render if `props` are shallow-equal. Make sure that everything your `renderItem` function depends on is passed as a prop (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on changes. This includes the `data` prop and parent component state.\n- In order to constrain memory and enable smooth scrolling, content is rendered asynchronously offscreen. This means it's possible to scroll faster than the fill rate and momentarily see blank content. This is a tradeoff that can be adjusted to suit the needs of each application, and we are working on improving it behind the scenes.\n- By default, the list looks for a `key` prop on each item and uses that for the React key. Alternatively, you can provide a custom `keyExtractor` prop.",
      "source_content_hash": "eee1b873e835fa613620eb7f792af4b97db54bc28c8337988a545474783169db",
      "node_type": "list",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "fe5fa73a",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "98355e36",
      "source_content": "# Reference",
      "source_content_hash": "7f466000063da6e2b641eee17b52fffbcef1717169b55b58c4543dc0dc23ea11",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "2fd0be2a",
      "source_content": "## Props",
      "source_content_hash": "5b94a6cc928a22f2ff71078f7462cd97dbe259a0c4d1877ab3afc2a92dded915",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "8a9b6c26",
      "source_content": "### [ScrollView Props](scrollview.md#props)",
      "source_content_hash": "3b599483637654d8e119740fddec2d1787a3063e4de51ced40a398a7b72ffbc8",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "a1fa5396",
      "source_content": "Inherits [ScrollView Props](scrollview.md#props).",
      "source_content_hash": "e8ecffbef935056536daf01a05c80c98c9d6c5c458335bced2698cfaa524750c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "c46c3e3d",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "2e771fd0",
      "source_content": "### <div class=\"label required basic\">Required</div> **`data`**",
      "source_content_hash": "f9241c29245a56b65ac30eeecc0352825d8e2971298eb81f15434f2bc08966cc",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "0750bfa1",
      "source_content": "The default accessor functions assume this is an array of objects with shape `{key: string}` but you can override `getItem`, `getItemCount`, and `keyExtractor` to handle any type of index-based data.",
      "source_content_hash": "632e7c099c8d65d3d754a86527d4a7dea552d41d94fbe8be622948e8aa784148",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "3be8d48c",
      "source_content": "| Type |\n| ---- |\n| any  |",
      "source_content_hash": "a501fd64a4634e7eb5eb96b5d3bf9a7d04f3c5db069ef98e370d294238d75e92",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "4f2104fa",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "f8edb6d2",
      "source_content": "### <div class=\"label required basic\">Required</div> **`getItem`**",
      "source_content_hash": "92d1065a772a4fc5c4e57349706cc9af2b4b9d7887ff36d8e74457f9f4938dcf",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "dc73c0d2",
      "source_content": "```jsx\n(data: any, index: number) => object;\n```",
      "source_content_hash": "3f856d0fb4d927da799b1af7e935d5883dd6ef273a151cc8874b02ca0b7721be",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "a2c0166e",
      "source_content": "A generic accessor for extracting an item from any sort of data blob.",
      "source_content_hash": "35167f5df2e57ff6ce272a9bffdaf72fdc7214eecdffbe9deb9a757de3d94dfe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "6dcde01a",
      "source_content": "| Type     |\n| -------- |\n| function |",
      "source_content_hash": "d5891e80e274cd9f9474b68befae24bcabea76d31b7b1d648d334793da075552",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "bc8bc928",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "722e4930",
      "source_content": "### <div class=\"label required basic\">Required</div> **`getItemCount`**",
      "source_content_hash": "4bb9c632be74bf3941dc874949bf31f9f410f4e9a6b959e22fcfca58f65692cf",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "99070903",
      "source_content": "```jsx\n(data: any) => number;\n```",
      "source_content_hash": "e1b2e48648189e7012a82f8921779e84cd3a75ef7b91e68d906d395b65396d45",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "44aaa880",
      "source_content": "Determines how many items are in the data blob.",
      "source_content_hash": "c2dbb3ce3ef2b861172e857ed09f1735f3c68c0b53a51d7c1573fac08d63a83f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "a47b9b70",
      "source_content": "| Type     |\n| -------- |\n| function |",
      "source_content_hash": "d5891e80e274cd9f9474b68befae24bcabea76d31b7b1d648d334793da075552",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "cf53fc07",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "47516512",
      "source_content": "### <div class=\"label required basic\">Required</div> **`renderItem`**",
      "source_content_hash": "9642c9ed0e64327064e19dd4828dd05475085e46c3603c4320b26af2bde33782",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "1ae0b80d",
      "source_content": "```jsx\n(info: any) => ?React.Element<any>\n```",
      "source_content_hash": "4c5806fe52000b41b1e4b68ba7bac4db04cf1135870e40eca5d2da30d01dfdc3",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "f45239ba",
      "source_content": "Takes an item from `data` and renders it into the list",
      "source_content_hash": "5ad4601bd90a68161e337f1f31261e2a16ee1b648c5cb91d5e0eaefc2037f740",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "68b4d184",
      "source_content": "| Type     |\n| -------- |\n| function |",
      "source_content_hash": "d5891e80e274cd9f9474b68befae24bcabea76d31b7b1d648d334793da075552",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "b99d2cf6",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "5dba1427",
      "source_content": "### `CellRendererComponent`",
      "source_content_hash": "264d2741ca75e17d1d0dc4d4f52bbf618d366db50f3b3561dc18686fdc6d8b84",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "534ac82e",
      "source_content": "Each cell is rendered using this element. Can be a React Component Class, or a render function. Defaults to using [`View`](view.md).",
      "source_content_hash": "607b3537c82beabf1a99518cc4e139c48f49915421e2cbedaf412abaa426ef4e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "a016bba9",
      "source_content": "| Type                |\n| ------------------- |\n| component, function |",
      "source_content_hash": "6d0b80c9aecbb9df3fc1eda55739000ac59f0d888d270be3289c6d4815757a65",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "af4523c9",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "35353302",
      "source_content": "### `ItemSeparatorComponent`",
      "source_content_hash": "c01bcb774f1b0233475a2dfb3e30cb2b8eac655b4d46836cd4630b72c41f6570",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "719d3997",
      "source_content": "Rendered in between each item, but not at the top or bottom. By default, `highlighted` and `leadingItem` props are provided. `renderItem` provides `separators.highlight`/`unhighlight` which will update the `highlighted` prop, but you can also add custom props with `separators.updateProps`. Can be a React Component (e.g. `SomeComponent`), or a React element (e.g. `<SomeComponent />`).",
      "source_content_hash": "f7fbe3ab78a98238b81ea2a5df6003b49f2613e74ae223d110a1cad9fb619e76",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "10808a54",
      "source_content": "| Type                         |\n| ---------------------------- |\n| component, function, element |",
      "source_content_hash": "b40bfb78778bee147e0727424be5b269e55295be0901ccb3c116fdf51f12d70c",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "a19e2d81",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "531ec0bb",
      "source_content": "### `ListEmptyComponent`",
      "source_content_hash": "42feebf6caf9b4d0c6d479b28651905eaa05b6d7e3392cf400bcc0655bf1a48d",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "d2a3d4c7",
      "source_content": "Rendered when the list is empty. Can be a React Component (e.g. `SomeComponent`), or a React element (e.g. `<SomeComponent />`).",
      "source_content_hash": "74e94392a7f4e8235e47653c155df16a43a2460788abfe30ea0291fb0e0ac5ff",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "a4f04ae6",
      "source_content": "| Type               |\n| ------------------ |\n| component, element |",
      "source_content_hash": "df5a548ec49cf7f31dddedda745586f85a7e4d4cfb0b31e087357232f1ab8b4a",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "cb3e8b91",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "58f98d22",
      "source_content": "### `ListItemComponent`",
      "source_content_hash": "99087db8d6ab300440cee779b6353eceb5005be59e2628ff8d6be8ff9c3c6eb1",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "d636abf8",
      "source_content": "Each data item is rendered using this element. Can be a React Component Class, or a render function.",
      "source_content_hash": "b600900f9e0ef63f42d3fdbf5d3b1b5ffe9ce78f04d6e8bb4f06010dc8bb8978",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "28fc1cfd",
      "source_content": "| Type                |\n| ------------------- |\n| component, function |",
      "source_content_hash": "6d0b80c9aecbb9df3fc1eda55739000ac59f0d888d270be3289c6d4815757a65",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "158ce243",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "445c72bd",
      "source_content": "### `ListFooterComponent`",
      "source_content_hash": "276a308660e88f918f554cd3ec3a439457a0a9555ff5b423b0e06093f5d30d55",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "9ef42155",
      "source_content": "Rendered at the bottom of all the items. Can be a React Component (e.g. `SomeComponent`), or a React element (e.g. `<SomeComponent />`).",
      "source_content_hash": "7433dfaa242f1fd3664003063a68941cee96a352f02315b1144a2c79a5d9cec8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "db238cbc",
      "source_content": "| Type               |\n| ------------------ |\n| component, element |",
      "source_content_hash": "df5a548ec49cf7f31dddedda745586f85a7e4d4cfb0b31e087357232f1ab8b4a",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "a5c10d06",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "4b62f7d8",
      "source_content": "### `ListFooterComponentStyle`",
      "source_content_hash": "ddc384df963603a55432d0c937c33735bce1166419e86538a577b0db3d577bba",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "4899bc54",
      "source_content": "Styling for internal View for `ListFooterComponent`.",
      "source_content_hash": "b0356c98498bb981f9d792bb222f0c06123bd9a130dde5701fa6d959b186c641",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "6f7967ab",
      "source_content": "| Type          | Required |\n| ------------- | -------- |\n| ViewStyleProp | No       |",
      "source_content_hash": "98b0f6375fafa8af21cff8bc19e48c4e78e30707d755005de4fadffa448188a4",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "ff3b26d5",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "8159e12a",
      "source_content": "### `ListHeaderComponent`",
      "source_content_hash": "552fe951b17d8172907781c2da3ecd98144868df8b5d52cf67663c52271de7e0",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "6e5d54a8",
      "source_content": "Rendered at the top of all the items. Can be a React Component (e.g. `SomeComponent`), or a React element (e.g. `<SomeComponent />`).",
      "source_content_hash": "3f34cf4eb0616f6051052cb2bca5bef8d6e99894016c15f02b41c58fabfec041",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "d251d5be",
      "source_content": "| Type               |\n| ------------------ |\n| component, element |",
      "source_content_hash": "df5a548ec49cf7f31dddedda745586f85a7e4d4cfb0b31e087357232f1ab8b4a",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "ba014c2d",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "bf3eb388",
      "source_content": "### `ListHeaderComponentStyle`",
      "source_content_hash": "461b22d9bb8938a0ee9977240fd89e36bb9bd4a8cddeb31e056c460b137b285d",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "1f9058cd",
      "source_content": "Styling for internal View for `ListHeaderComponent`.",
      "source_content_hash": "b5ed298830f73b8b4e3b6a807cd0acd5a94f8e1c8c520578121a08b722bcb548",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "ce712201",
      "source_content": "| Type                           |\n| ------------------------------ |\n| [View Style](view-style-props) |",
      "source_content_hash": "3f5e7d47ed5fe1549f22190a423f07653ab9e06b85ac74a7d5143036b57ac753",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "c60fccc8",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "dc825187",
      "source_content": "### `debug`",
      "source_content_hash": "aa685c0a970e326fe1cb8e2ad2e4142926f88cb322814df4be5d52485bacb6ad",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "833ce577",
      "source_content": "`debug` will turn on extra logging and visual overlays to aid with debugging both usage and implementation, but with a significant perf hit.",
      "source_content_hash": "ff1c36ff73ca2fee4633107cca36c1aa05cfe25ab4287005456439d9c1bf2839",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "f41bd436",
      "source_content": "| Type    |\n| ------- |\n| boolean |",
      "source_content_hash": "afc5252fe97c3b4645cc839e72fb23555baeef211698715abd6b5ac8ee57a841",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "fd182f8e",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "63daebc9",
      "source_content": "### `disableVirtualization`",
      "source_content_hash": "94785d0b99dc70ec72c775b88cc8db99a5e931300909d48f68b9fffabd5b3ab1",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "0e3dd5af",
      "source_content": "> **Deprecated.** Virtualization provides significant performance and memory optimizations, but fully unmounts react instances that are outside of the render window. You should only need to disable this for debugging purposes.",
      "source_content_hash": "7ba78ea49b5a9aad6b4f37b39f272796ff699dbcb57f7c356a9e49c0697284a6",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "427ca3fc",
      "source_content": "| Type    |\n| ------- |\n| boolean |",
      "source_content_hash": "afc5252fe97c3b4645cc839e72fb23555baeef211698715abd6b5ac8ee57a841",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "4b45c59d",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "ad8a5f54",
      "source_content": "### `extraData`",
      "source_content_hash": "428a428fbe21448b8fb390f01a1b0a65cbcb88fa2972abb7d5143b962f1754f3",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "4033c370",
      "source_content": "A marker property for telling the list to re-render (since it implements `PureComponent`). If any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the `data` prop, stick it here and treat it immutably.",
      "source_content_hash": "e7bcc29ce4555057bd9876cae145f33a35a84ea27d45f0582b3062eefeed75d3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "6c82acb3",
      "source_content": "| Type |\n| ---- |\n| any  |",
      "source_content_hash": "a501fd64a4634e7eb5eb96b5d3bf9a7d04f3c5db069ef98e370d294238d75e92",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "14781855",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "13095ea3",
      "source_content": "### `getItemLayout`",
      "source_content_hash": "23afd4900f39f87f7b285da9de0e53278750f195a906f0dc6cd59a3b0144f345",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "7f3d1f07",
      "source_content": "```jsx\n(\n    data: any,\n    index: number,\n  ) => {length: number, offset: number, index: number}\n```",
      "source_content_hash": "b1e0a215767fb345c03e4f1b274011fb32ed01eb27ff0c270d9745e1f05c4abd",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "09d95d42",
      "source_content": "| Type     |\n| -------- |\n| function |",
      "source_content_hash": "d5891e80e274cd9f9474b68befae24bcabea76d31b7b1d648d334793da075552",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "e4121395",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "4cb3b0aa",
      "source_content": "### `horizontal`",
      "source_content_hash": "18badbaf70807da2ad88c29abe1ae1e5f988160baa044f61424ce714d5455ab6",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "2153a2fa",
      "source_content": "If `true`, renders items next to each other horizontally instead of stacked vertically.",
      "source_content_hash": "9be13dd83d8c31f69da9ffe39e937245bd98d2199f8b5e991c707b4d95ad8efe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "68caee40",
      "source_content": "| Type    |\n| ------- |\n| boolean |",
      "source_content_hash": "afc5252fe97c3b4645cc839e72fb23555baeef211698715abd6b5ac8ee57a841",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "e26d82ac",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "2b20caf3",
      "source_content": "### `initialNumToRender`",
      "source_content_hash": "f68dffca60078bc985094813abb5c2f213e9f31c842839f6d9f9f1d1203a8060",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "52d45a2c",
      "source_content": "How many items to render in the initial batch. This should be enough to fill the screen but not much more. Note these items will never be unmounted as part of the windowed rendering in order to improve perceived performance of scroll-to-top actions.",
      "source_content_hash": "73b56a16e5221fe31b606129c67a4ebe9d9e4f623f94fd3cdf118d46e95db071",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "869bf7e2",
      "source_content": "| Type   | Default |\n| ------ | ------- |\n| number | `10`    |",
      "source_content_hash": "a96c1a3c92e9b5be076a1dd9b27b0dad30f1d3cb39e6ee796c61fb71ea5a42aa",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "b3c73593",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "0495d9eb",
      "source_content": "### `initialScrollIndex`",
      "source_content_hash": "a4b304e63b60703bad5ede340c398f2b15ab6ab906acd046116db2e1f5d8730d",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "e3bf03eb",
      "source_content": "Instead of starting at the top with the first item, start at `initialScrollIndex`. This disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items always rendered and immediately renders the items starting at this initial index. Requires `getItemLayout` to be implemented.",
      "source_content_hash": "0f8febd45017f534586a049c536c1e169ca1064ef67372293dfd520718e7ae8b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "67cb77d0",
      "source_content": "| Type   |\n| ------ |\n| number |",
      "source_content_hash": "12a4bc83fc82b49dfcc764424343d9e37b3518d61961aafe9875795611a48eab",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "a49874ee",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "f8d1807a",
      "source_content": "### `inverted`",
      "source_content_hash": "f8b1b2a3f4429a5ab8b4b4b7407cbba217215f7e99b4c10a3f6621d26ffbbe1a",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "c95293b9",
      "source_content": "Reverses the direction of scroll. Uses scale transforms of `-1`.",
      "source_content_hash": "22020459351b2206cc85c973cdc7af5d8c6c317a89220a6781230553433cb8ba",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "290a1a57",
      "source_content": "| Type    |\n| ------- |\n| boolean |",
      "source_content_hash": "afc5252fe97c3b4645cc839e72fb23555baeef211698715abd6b5ac8ee57a841",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "f08346f7",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "7f0accbb",
      "source_content": "### `listKey`",
      "source_content_hash": "c492824c65dfdf0d66f941db297ca34299436852480b14412c051b0ca1f0c063",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "130e2dfb",
      "source_content": "A unique identifier for this list. If there are multiple VirtualizedLists at the same level of nesting within another VirtualizedList, this key is necessary for virtualization to work properly.",
      "source_content_hash": "8d1e018a953cec3728735f6a1f62d1906538b3cae1783e2e7a82dd504bf6f769",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "be040f81",
      "source_content": "| Type   | Required |\n| ------ | -------- |\n| string | True     |",
      "source_content_hash": "0f02ce19afbce7628c19be7ed2b2f95725e12a631acbc7a4a0ac2e7f145f1905",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "35e25e10",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "2567fe3c",
      "source_content": "### `keyExtractor`",
      "source_content_hash": "2716fa5d92409804f4eb857234d14a4a69d270b6e4c253c710317108d643d2b9",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "d7bc17bf",
      "source_content": "```jsx\n(item: object, index: number) => string;\n```",
      "source_content_hash": "c4656c0619c5171025a590fdf54a041f8477d67eabcef18c94070633991aa498",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "9929329e",
      "source_content": "Used to extract a unique key for a given item at the specified index. Key is used for caching and as the react key to track item re-ordering. The default extractor checks `item.key`, then `item.id`, and then falls back to using the index, like React does.",
      "source_content_hash": "a58cc2c13635910413e6a4c2cb7a4066fe0d543f88720058175f35da1aec7d88",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "675b1482",
      "source_content": "| Type     |\n| -------- |\n| function |",
      "source_content_hash": "d5891e80e274cd9f9474b68befae24bcabea76d31b7b1d648d334793da075552",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "1e1e3aef",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "8dfbc79d",
      "source_content": "### `maxToRenderPerBatch`",
      "source_content_hash": "bf1aa2f70816bcb241110b69e0cb372b58ac6854b690446bedc9d147d7403706",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "0302cdc1",
      "source_content": "The maximum number of items to render in each incremental render batch. The more rendered at once, the better the fill rate, but responsiveness may suffer because rendering content may interfere with responding to button taps or other interactions.",
      "source_content_hash": "2f09152abb9d1c018e1513ce6bfe49c58f48bdbb431ae7b589b18173b1afc15d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "0518bd1c",
      "source_content": "| Type   |\n| ------ |\n| number |",
      "source_content_hash": "12a4bc83fc82b49dfcc764424343d9e37b3518d61961aafe9875795611a48eab",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "05e0a97d",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "42a9e250",
      "source_content": "### `onEndReached`",
      "source_content_hash": "73dec08e81477b19567a07f0730b1d9c2d24ea1c6de8080755d83a1d1e459f97",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "88b052dd",
      "source_content": "```jsx\n(info: {distanceFromEnd: number}) => void\n```",
      "source_content_hash": "443a7ada3186ce8981642d407abdd42a22350af65422a1b266316ad14a3d13b9",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "d70ad719",
      "source_content": "Called once when the scroll position gets within `onEndReachedThreshold` of the rendered content.",
      "source_content_hash": "737b8b4b7d5740046ce3a781b1b3d6ddcad1dc941df26a3b05774870c22d4f26",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "71e7940f",
      "source_content": "| Type     |\n| -------- |\n| function |",
      "source_content_hash": "d5891e80e274cd9f9474b68befae24bcabea76d31b7b1d648d334793da075552",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "b2f29dc4",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "b8884e3b",
      "source_content": "### `onEndReachedThreshold`",
      "source_content_hash": "649a5f4540f544f537b749b25b667ff767ea25a4e38f9e9e23c8e69e73054050",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "c419a086",
      "source_content": "How far from the end (in units of visible length of the list) the bottom edge of the list must be from the end of the content to trigger the `onEndReached` callback. Thus a value of 0.5 will trigger `onEndReached` when the end of the content is within half the visible length of the list.",
      "source_content_hash": "1219bb3e62d81ff5a741a224635c42d86d26f576dacd7d7cd215bff57196a2a8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "b6a2624c",
      "source_content": "| Type   |\n| ------ |\n| number |",
      "source_content_hash": "12a4bc83fc82b49dfcc764424343d9e37b3518d61961aafe9875795611a48eab",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "77b413c2",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "6558c87d",
      "source_content": "### `onRefresh`",
      "source_content_hash": "dd02ac7b8c18a4504e015b27f0629f01c4a2e59ba05618b34e5ecaf124280856",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "950ee0de",
      "source_content": "```jsx\n() => void\n```",
      "source_content_hash": "03acdc434674e075f19982de6e96fda4f9d8a0bc7f4c7bb22cb13a3d59cd4b8a",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "56f32447",
      "source_content": "If provided, a standard `RefreshControl` will be added for \"Pull to Refresh\" functionality. Make sure to also set the `refreshing` prop correctly.",
      "source_content_hash": "b843d634bcef97bde7df110ee9c43f95b61af17e1b7e84495da3b3a4970e0d21",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "bb2149a1",
      "source_content": "| Type     |\n| -------- |\n| function |",
      "source_content_hash": "d5891e80e274cd9f9474b68befae24bcabea76d31b7b1d648d334793da075552",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "98cb6e40",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "cdf3379b",
      "source_content": "### `onScrollToIndexFailed`",
      "source_content_hash": "bec468ea083d803c806b063e173d383150dedd75799d2444e7a943b82d4157e1",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "d965316f",
      "source_content": "```jsx\n(info: {\n    index: number,\n    highestMeasuredFrameIndex: number,\n    averageItemLength: number,\n  }) => void\n```",
      "source_content_hash": "128dbdbf5dd45f210af0ede3e8baa036bfadfe13571c3ab76047427b8adab961",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "1697776c",
      "source_content": "Used to handle failures when scrolling to an index that has not been measured yet. Recommended action is to either compute your own offset and `scrollTo` it, or scroll as far as possible and then try again after more items have been rendered.",
      "source_content_hash": "b46b5ca828bca59779bff66f0edb6a38a1df0856bfe47b83ba5b97d576a9cd71",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "215e2e55",
      "source_content": "| Type     |\n| -------- |\n| function |",
      "source_content_hash": "d5891e80e274cd9f9474b68befae24bcabea76d31b7b1d648d334793da075552",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "e92e733c",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "bbee8ddc",
      "source_content": "### `onViewableItemsChanged`",
      "source_content_hash": "7bd3f2da1d7b35dbd00ed88b2cc3a916125e6f3149d7984f39c6b5470bfd8319",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "e3f3475c",
      "source_content": "Called when the viewability of rows changes, as defined by the `viewabilityConfig` prop.",
      "source_content_hash": "6def93913222051cae593c97429a06af9b800be6e78877a137884a0a3d43e99b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "79080520",
      "source_content": "| Type                                                                                                  |\n| ----------------------------------------------------------------------------------------------------- |\n| `md (callback: {changed: [ViewToken](viewtoken)[], viewableItems: [ViewToken](viewtoken)[]}) => void` |",
      "source_content_hash": "6cafc4df8d5945abb111fb499ea2305d7ff67469d1b8c86f7b357b890a53b59d",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "285bfc58",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "fa8c4ad8",
      "source_content": "### `persistentScrollbar`",
      "source_content_hash": "7b1b2c2b3596cbffceb628d499443a27b97a218438b9b2bb294e48e358b88549",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "71985cbd",
      "source_content": "| Type |\n| ---- |\n| bool |",
      "source_content_hash": "dde128476af9a278c49a64d4b450194db8f22fe794b18e24b1901bfc0c125e63",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "14cd6bc9",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "3391a56e",
      "source_content": "### `progressViewOffset`",
      "source_content_hash": "39fd2a8f1930d64fa3e0f2ca9d4a48651440554497b88d10348cba8f1430d540",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "69acbca3",
      "source_content": "Set this when offset is needed for the loading indicator to show correctly.",
      "source_content_hash": "606fc0202f867266c9188619ae8332d019231065ebb48f6867835bf025fe5ecd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "ab375b4b",
      "source_content": "| Type   |\n| ------ |\n| number |",
      "source_content_hash": "12a4bc83fc82b49dfcc764424343d9e37b3518d61961aafe9875795611a48eab",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "fd5a314d",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "3405442c",
      "source_content": "### `refreshControl`",
      "source_content_hash": "ec021dcbd3c69d7786b82b7801a0ee0063ee810910e7bf69905c1a03de3fee96",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "2fc2d2cf",
      "source_content": "A custom refresh control element. When set, it overrides the default `<RefreshControl>` component built internally. The onRefresh and refreshing props are also ignored. Only works for vertical VirtualizedList.",
      "source_content_hash": "0640978db3489aa30b694686f42568d8ba7dad85b4fa4abb7d7bade5cbd3649a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "c07ea623",
      "source_content": "| Type    |\n| ------- |\n| element |",
      "source_content_hash": "570fdbb0ab508500a457d147a6e5a7ad7c19f3e90d5c40cc588dab0cd1a0bd2f",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "e8ba3209",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "ff14ba36",
      "source_content": "### `refreshing`",
      "source_content_hash": "1bc2b55a5da9a24a73ceb6606770e04084d1cc586e025e8f640f63878cb5deb6",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "b79c3482",
      "source_content": "Set this true while waiting for new data from a refresh.",
      "source_content_hash": "f4a9731dac1a6070d089c160fb6b6ff270d14bb5d9936f06dd90ce04781370f2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "e3afb457",
      "source_content": "| Type    |\n| ------- |\n| boolean |",
      "source_content_hash": "afc5252fe97c3b4645cc839e72fb23555baeef211698715abd6b5ac8ee57a841",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "10afb48a",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "625dc480",
      "source_content": "### `removeClippedSubviews`",
      "source_content_hash": "d2b01d5ab6351cea3ad1de31e0a03694c1e6f6ced6db1eea925e53d9c6a9c545",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "f894b163",
      "source_content": "This may improve scroll performance for large lists.",
      "source_content_hash": "4bef19f9726c3c3c4cc816aa50efd90146e0bc8bcd88727b54c8652073242cc5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "15735fcc",
      "source_content": "> Note: May have bugs (missing content) in some circumstances - use at your own risk.",
      "source_content_hash": "2ce15d344f422fef3992346bd6351c741b75e8855119115a2213b9fcbc321cda",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "ae80c4b1",
      "source_content": "| Type    |\n| ------- |\n| boolean |",
      "source_content_hash": "afc5252fe97c3b4645cc839e72fb23555baeef211698715abd6b5ac8ee57a841",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "5f49d849",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "db5f7de0",
      "source_content": "### `renderScrollComponent`",
      "source_content_hash": "0d7a0eeb069253647689fff66d285af1122dd84063bef0488ee96d93f4a7a574",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "7b35d7c6",
      "source_content": "```jsx\n(props: object) => element;\n```",
      "source_content_hash": "17488d8ec2baf4c4f0249582c0a49307e4e2496baf0743f6c603935fde1679da",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "24d24e6d",
      "source_content": "Render a custom scroll component, e.g. with a differently styled `RefreshControl`.",
      "source_content_hash": "65b39a2381ef490b8f65ba9a4b08615b01d82df84e8c6ccf084aa0e3d34a5e0b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "655a55d4",
      "source_content": "| Type     |\n| -------- |\n| function |",
      "source_content_hash": "d5891e80e274cd9f9474b68befae24bcabea76d31b7b1d648d334793da075552",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "1ab826e8",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "54b0eaca",
      "source_content": "### `viewabilityConfig`",
      "source_content_hash": "9c164c7e8b57e2d49a317ead405556b4fb81d263ee84ab7cbd1e3e7a705e53ad",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "c829cc4b",
      "source_content": "See `ViewabilityHelper.js` for flow type and further documentation.",
      "source_content_hash": "2a9e51fc998150235100944b1fd7f344d68671df8d5e4b4424799d46459d1227",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "10b1e233",
      "source_content": "| Type              |\n| ----------------- |\n| ViewabilityConfig |",
      "source_content_hash": "4c6fe24469a6671f60eb09c8b49e900cbbce3ac0914ccbffd3515ba1eb7d2dc2",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "0b40d2cf",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "841204f6",
      "source_content": "### `viewabilityConfigCallbackPairs`",
      "source_content_hash": "0a7a6130749abace2ab2a3103d1dc5d4f33c4652455ff9660f097eceee44f34f",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "ae95f665",
      "source_content": "List of `ViewabilityConfig`/`onViewableItemsChanged` pairs. A specific `onViewableItemsChanged` will be called when its corresponding `ViewabilityConfig`'s conditions are met. See `ViewabilityHelper.js` for flow type and further documentation.",
      "source_content_hash": "a0596bcada15140b73380190833efd46e6a47885026106ef3ba719c77bf57237",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "bcfed60e",
      "source_content": "| Type                                   |\n| -------------------------------------- |\n| array of ViewabilityConfigCallbackPair |",
      "source_content_hash": "6dfa54f69b105be6977a52c9cb11b7559e6ff0f357ac842dfc32fb4b9474a39c",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "9470b91c",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "e9a5149c",
      "source_content": "### `updateCellsBatchingPeriod`",
      "source_content_hash": "884c38e360d1fe815d738db1aac40af6fb05f029ccb7a1f7bd2a46e5f92e725c",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "cbbdf094",
      "source_content": "Amount of time between low-pri item render batches, e.g. for rendering items quite a ways off screen. Similar fill rate/responsiveness tradeoff as `maxToRenderPerBatch`.",
      "source_content_hash": "619910b04ef07f489624bfc750711f94a9f0c1d90f54ae25b65a7823dee33f6a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "25885e50",
      "source_content": "| Type   |\n| ------ |\n| number |",
      "source_content_hash": "12a4bc83fc82b49dfcc764424343d9e37b3518d61961aafe9875795611a48eab",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "add35b99",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "d44c41e4",
      "source_content": "### `windowSize`",
      "source_content_hash": "c602827736213dcc1cc13180019f8731a4cfd2e68d20cd879639b66d62f91f46",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "3441f612",
      "source_content": "Determines the maximum number of items rendered outside of the visible area, in units of visible lengths. So if your list fills the screen, then `windowSize={21}` (the default) will render the visible screen area plus up to 10 screens above and 10 below the viewport. Reducing this number will reduce memory consumption and may improve performance, but will increase the chance that fast scrolling may reveal momentary blank areas of unrendered content.",
      "source_content_hash": "8955ca71340b9b9a4bf30447ae780f7406cd26655d4d37af6051dbf0e78de67d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "d95806d2",
      "source_content": "| Type   |\n| ------ |\n| number |",
      "source_content_hash": "12a4bc83fc82b49dfcc764424343d9e37b3518d61961aafe9875795611a48eab",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "5d1627b0",
      "source_content": "## Methods",
      "source_content_hash": "f10f482f08112298a7b6d3090f1ea9c2254688471ce31e5da64ed9631f177b5d",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "4439f5f5",
      "source_content": "### `flashScrollIndicators()`",
      "source_content_hash": "8221c0b097c283bbf09fc1bda0d28641a1fb54dd256ea070499e8ac497e9a3ba",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "64e83027",
      "source_content": "```jsx\nflashScrollIndicators();\n```",
      "source_content_hash": "5be08bad7ae11cb1f80ac9d80fbe144c25cce412fd98df8fbfd807b4c29594f1",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "c84f6fc7",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "18813374",
      "source_content": "### `getChildContext()`",
      "source_content_hash": "24e0c4d63d2e476d5f81471444d86b2011ba588cce6d7293bbec020b95f75c26",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "12615310",
      "source_content": "```jsx\ngetChildContext () => Object;\n```",
      "source_content_hash": "13331cb3e3052b529f64065a4ed74a52b4ecaaede79f50ea4dbeb37d5c928a3a",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "0ac62679",
      "source_content": "The `Object` returned consist of:",
      "source_content_hash": "f759ffe9e8ad3501d858d10e0f8324881ab080ea7c025d4e6e45443bdf1adf28",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "08c6d485",
      "source_content": "- 'virtualizedList' (Object). This object consist of the following\n  - getScrollMetrics' (Function). Returns an object with following properties: `{ contentLength: number, dOffset: number, dt: number, offset: number, timestamp: number, velocity: number, visibleLength: number }`.\n  - 'horizontal' (boolean) - Optional.\n  - 'getOutermostParentListRef' (Function).\n  - 'getNestedChildState' (Function) - Returns ChildListState .\n  - 'registerAsNestedChild' (Function). This accept an object with following properties `{ cellKey: string, key: string, ref: VirtualizedList, parentDebugInfo: ListDebugInfo }`. It returns a ChildListState\n  - 'unregisterAsNestedChild' (Function). This takes an object with following properties, `{ key: string, state: ChildListState }`\n  - 'debugInfo' (ListDebugInfo).",
      "source_content_hash": "08feb541a298bc8e6d7929a99a809fa39cd53d179b059b858206302ec82c3e72",
      "node_type": "list",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "5cec9452",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "bb7f44f4",
      "source_content": "### `getScrollableNode()`",
      "source_content_hash": "89db6f4b7e24b097716e713f37845bf950a6bce22c954ccf9d81573e83b58801",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "a901450f",
      "source_content": "```jsx\ngetScrollableNode () => ?number;\n```",
      "source_content_hash": "dea92357a920baf0bff8389a7f25a4de6011b89d9d385773add471a6a82fea8c",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "da5fdd71",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "d7ca1d9e",
      "source_content": "### `getScrollRef()`",
      "source_content_hash": "2be2cdee2a144559d93a428de922ee5948543a01e1e7693c584cfc106eac4bed",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "af14a6ad",
      "source_content": "```jsx\ngetScrollRef () => | ?React.ElementRef<typeof ScrollView>\n    | ?React.ElementRef<typeof View>;\n```",
      "source_content_hash": "1de438f51084ef9d269790853b5469409051b24e72df4405bc1c8c6bbac52ea1",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "ad048904",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "d0642328",
      "source_content": "### `getScrollResponder()`",
      "source_content_hash": "23acbffbd88dfda8d073d96c33474ae32b2242ff5a95b031fa7f8ed5c84b16a9",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "c4172b2b",
      "source_content": "```jsx\ngetScrollResponder () => ?ScrollResponderType;\n```",
      "source_content_hash": "7fe667f6ca578c13e81bc0bf9aa7f071e110d2a4e34a7b74423b24295aa18c96",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "9bf300ec",
      "source_content": "Provides a handle to the underlying scroll responder. Note that `this._scrollRef` might not be a `ScrollView`, so we need to check that it responds to `getScrollResponder` before calling it.",
      "source_content_hash": "7fb57781375ce2544d00b5deb057876f4ec111912ac0d67e61a1cd81c709c7fd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "e67796b0",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "ae699a3d",
      "source_content": "### `hasMore()`",
      "source_content_hash": "d7debc3f9776abde80d9063eab81865ca990fbfc236af2fe7ef244043647196a",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "ccd57899",
      "source_content": "```jsx\nhasMore () => boolean;\n```",
      "source_content_hash": "b7e4b58a68b886fea9cb393bcf1a46c255ed9ebb7ebe5bc73af46eb04480087f",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "cb89be29",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "0a59a777",
      "source_content": "### `scrollToEnd()`",
      "source_content_hash": "eccf8af1ffef17331eb176ef79162a132d59ca5117619cafcfeb7aaf071b922f",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "7c969fa1",
      "source_content": "```jsx\nscrollToEnd(([options]: {animated: boolean}));\n```",
      "source_content_hash": "3f30b55e561cd77b4a5f5200013915e4fcddf6a45ff9aa88494b95a30975ac90",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "14d50a1d",
      "source_content": "Scrolls to the end of the content. May be janky without `getItemLayout` prop.",
      "source_content_hash": "8515e603882d9432ad236a24f5fecc685e490efc2a1c1ca36a384283d84620ed",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "cff30da4",
      "source_content": "**Parameters:**",
      "source_content_hash": "4cffbfc0f3f64ea67829f54830a99f6c1f41f61e25dba76d3216babd93239d28",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "482ada83",
      "source_content": "| Name   | Type   |\n| ------ | ------ |\n| params | object |",
      "source_content_hash": "ba3df00bf0350c02b2a0f0be8365daebdd33a239846daa8fb30d015f54cb6210",
      "node_type": "table",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "5e9040ec",
      "source_content": "Valid `params` keys are:",
      "source_content_hash": "3a47ff88af562cb637f5a1c62778f1acf49b126f92fd66c8bc4952c6c7ba3f50",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "2812106d",
      "source_content": "- `'animated'` (boolean) - Whether the list should do an animation while scrolling. Defaults to `true`.",
      "source_content_hash": "93cda1000fc8d8b6fd5138e2970bf58f7441b6a8e2906996e73a6ce97b12cfbc",
      "node_type": "list",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "04948850",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "c56d504f",
      "source_content": "### `scrollToIndex()`",
      "source_content_hash": "c38f27a198fbe85a7181857242b63c72f3916744bd7fd260f58a9284cef7dd51",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "778ec23a",
      "source_content": "```jsx\nscrollToIndex((params: object));\n```",
      "source_content_hash": "c6c744b1b2220c039ee9fdcaa754cf512e903858fdb1f80977eebd648480e3ca",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "7753928b",
      "source_content": "Valid `params` consist of:",
      "source_content_hash": "4366338faa1e6d8807b36ee4773f0297360dcfafcbb26944d6fea631a49d0758",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "43446b0c",
      "source_content": "- 'animated' (boolean). Optional.\n- 'index' (number). Required.\n- 'viewOffset' (number). Optional.\n- 'viewPosition' (number). Optional.",
      "source_content_hash": "9606af244763e7a69cff518cd5f50cecaaae7a8f8d681fadf0940d96df5425a1",
      "node_type": "list",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "bd6fb12b",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "9adb76e5",
      "source_content": "### `scrollToItem()`",
      "source_content_hash": "75a8f3ccf28e6f0673551848499465e5e67aa671fbcf110872309345f666dc70",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "67621fcf",
      "source_content": "```jsx\nscrollToItem((params: object));\n```",
      "source_content_hash": "4a187ac1d31fce1a91ea078f63b4182977e982402f5c980f9bcd15e3dfa3be58",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "79dbe3da",
      "source_content": "Valid `params` consist of:",
      "source_content_hash": "4366338faa1e6d8807b36ee4773f0297360dcfafcbb26944d6fea631a49d0758",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "e1c9dace",
      "source_content": "- 'animated' (boolean). Optional.\n- 'item' (Item). Required.\n- 'viewPosition' (number). Optional.",
      "source_content_hash": "4211cf693a125fc0bef986a49b4a4a978547ca968808fd31615b999c56205617",
      "node_type": "list",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "f33273af",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "d2e9b3bc",
      "source_content": "### `scrollToOffset()`",
      "source_content_hash": "945e6b062c13d6a72258391f82a2771b7b0de0c005b35fc8f9fa8cd1c81505d9",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "c893809b",
      "source_content": "```jsx\nscrollToOffset((params: object));\n```",
      "source_content_hash": "ae537d0b4ca7a9246c08c73f6bfae88d6404eda5cd1180568bc48a343d5c729c",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "929f4d2d",
      "source_content": "Scroll to a specific content pixel offset in the list.",
      "source_content_hash": "233f08d07b3353755673e79ae47930f953e99f759b1881eb9d4c142f191a68b8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "57163c70",
      "source_content": "Param `offset` expects the offset to scroll to. In case of `horizontal` is true, the offset is the x-value, in any other case the offset is the y-value.",
      "source_content_hash": "1124cd32dcb8d54e478e029b0bc7867184f854cfbf74b57ce3688864110c9ebf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "0756e68c",
      "source_content": "Param `animated` (`true` by default) defines whether the list should do an animation while scrolling.",
      "source_content_hash": "d784f12258691668aa13f42425d74a58bc46eeff65b84d45337f570b63857264",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "c94a134a",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "8602463b",
      "source_content": "### `recordInteraction()`",
      "source_content_hash": "7022612590be9be5bd1d2e5f965628e9d69bffbb94e2e76528e0e94b7513cd84",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "d747548c",
      "source_content": "```jsx\nrecordInteraction();\n```",
      "source_content_hash": "6dff1a76ba0ac5fa91d5247d1c7f1296d9094d110c82fec6d65ff28ba6be6fa5",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "d4c20ea2",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "2f2cc7ab",
      "source_content": "### `setNativeProps()`",
      "source_content_hash": "5719a1cf439b662c240b8450d4b736d7ec8845b9776963312ed1cf41004f37e2",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "025bc303",
      "source_content": "```jsx\nsetNativeProps((props: Object));\n```",
      "source_content_hash": "b653c3d7b47823d1c44119e5881d8446596dcbd488fc7d5e928cd7cd125ad6cc",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.70/virtualizedlist.md",
  "last_updated_timestamp": "2025-06-18T09:36:13.419866+00:00",
  "schema_version": "1.0",
  "translated_versions": {}
}