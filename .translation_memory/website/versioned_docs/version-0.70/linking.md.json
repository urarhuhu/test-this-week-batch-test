{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.70/linking.md",
  "source_file_content_hash": "480fd6004bf55a89e502ade128e140d6d31380200dd3d2d09f4af27fe91b1db7",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: linking\ntitle: Linking\n---",
      "source_content_hash": "d4107b366051c2dddbab90f86c241869be35f3570283fa4e4715457c7b420673",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4d1292be"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "`Linking` gives you a general interface to interact with both incoming and outgoing app links.",
      "source_content_hash": "ddc4f86ead5f7729c87d9b1d6d2512a8a4b2895a52c1408bcff45243012d2a40",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`Linking` 提供了一個通用介面來處理傳入和傳出的應用程式連結。"
      }
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "Every Link (URL) has a URL Scheme, some websites are prefixed with `https://` or `http://` and the `http` is the URL Scheme. Let's call it scheme for short.",
      "source_content_hash": "f4f6427e0c9c4158c0ca91cf9eba1c4de917a6237d081237c824cc8924d42057",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "每個連結 (URL) 都有一個 URL Scheme，有些網址以 `https://` 或 `http://` 開頭，其中的 `http` 就是 URL Scheme。我們簡稱它為 scheme。"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "In addition to `https`, you're likely also familiar with the `mailto` scheme. When you open a link with the mailto scheme, your operating system will open an installed mail application. Similarly, there are schemes for making phone calls and sending SMS. Read more about [built-in URL](#built-in-url-schemes) schemes below.",
      "source_content_hash": "01970767a486a9d8691d7a531f74df0b62dac03a274b6b4b3dc41ab3b49a2bc7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "除了 `https`，你可能也熟悉 `mailto` scheme。當你開啟一個帶有 mailto scheme 的連結時，你的作業系統會開啟已安裝的郵件應用程式。同樣地，也有用於撥打電話和發送簡訊的 scheme。更多關於[內建 URL](#built-in-url-schemes) scheme 的資訊請見下文。"
      }
    },
    {
      "segment_id": "ad8fd492",
      "source_content": "Like using the mailto scheme, it's possible to link to other applications by using custom url schemes. For example, when you get a **Magic Link** email from Slack, the **Launch Slack** button is an anchor tag with an href that looks something like: `slack://secret/magic-login/other-secret`. Like with Slack, you can tell the operating system that you want to handle a custom scheme. When the Slack app opens, it receives the URL that was used to open it. This is often referred to as deep linking. Read more about how to [get the deep link](#get-the-deep-link) into your app.",
      "source_content_hash": "c60bbc3669834472285f4d1d56cd1fa7a0308fdb6fd300c2fa80a6285cf04672",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "就像使用 mailto scheme 一樣，也可以透過自訂的 url scheme 來連結到其他應用程式。例如，當你收到 Slack 的 **Magic Link** 電子郵件時，**Launch Slack** 按鈕是一個錨點標籤，其 href 看起來像這樣：`slack://secret/magic-login/other-secret`。與 Slack 類似，你可以告訴作業系統你想要處理一個自訂的 scheme。當 Slack 應用程式開啟時，它會接收到用來開啟它的 URL。這通常被稱為深度連結。更多關於如何[獲取深度連結](#get-the-deep-link)到你的應用程式的資訊請見下文。"
      }
    },
    {
      "segment_id": "86b54d44",
      "source_content": "Custom URL scheme isn't the only way to open your application on mobile. You don't want to use a custom URL scheme in links in the email because then the links would be broken on desktop. Instead, you want to use a regular `https` links such as `https://www.myapp.io/records/1234546`. and on mobile you want that link open your app. Android calls it **Deep Links** (Universal Links - iOS).",
      "source_content_hash": "811f3a40d30af6df56b7d33f3b80cda71504226ee99b21c7024448d46beced1b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "自訂 URL scheme 並不是在行動裝置上開啟應用程式的唯一方式。你不希望在電子郵件中的連結使用自訂 URL scheme，因為這樣在桌機上連結會失效。相反地，你希望使用常規的 `https` 連結，例如 `https://www.myapp.io/records/1234546`，並在行動裝置上讓該連結開啟你的應用程式。Android 稱之為 **Deep Links** (Universal Links - iOS)。"
      }
    },
    {
      "segment_id": "d350c018",
      "source_content": "### Built-in URL Schemes",
      "source_content_hash": "ebc4264fb3b5763982b68f8b467e0767a4554fab509db91b21bfd3d224c9668a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 內建 URL Schemes"
      }
    },
    {
      "segment_id": "1acb9a05",
      "source_content": "As mentioned in the introduction, there are some URL schemes for core functionality that exist on every platform. The following is a non-exhaustive list, but covers the most commonly used schemes.",
      "source_content_hash": "eba87b29ec79c195319d53179015ca299d3df7c5f5ce3679be6f1f3d1313f1bd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如引言所述，有一些用於核心功能的 URL scheme 存在於每個平台上。以下是一個非詳盡的清單，但涵蓋了最常用的 scheme。"
      }
    },
    {
      "segment_id": "e1ffabf9",
      "source_content": "| Scheme           | Description                                | iOS | Android |\n| ---------------- | ------------------------------------------ | --- | ------- |\n| `mailto`         | Open mail app, eg: mailto: support@expo.io | ✅  | ✅      |\n| `tel`            | Open phone app, eg: tel:+123456789         | ✅  | ✅      |\n| `sms`            | Open SMS app, eg: sms:+123456789           | ✅  | ✅      |\n| `https` / `http` | Open web browser app, eg: https://expo.io  | ✅  | ✅      |",
      "source_content_hash": "0dc0efcefd4863a7257b33dea891c0f25e02753c3c3a871d8b1946940a0e56f9",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_e1ffabf9"
      }
    },
    {
      "segment_id": "f2f30ae8",
      "source_content": "### Enabling Deep Links",
      "source_content_hash": "9785527bea987dfa04eba04d915603a6bff1392ec853d383e2017a9fcd9011a3",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 啟用深度連結"
      }
    },
    {
      "segment_id": "ea37d64a",
      "source_content": "<div className=\"banner-native-code-required\">\n  <h3>Projects with Native Code Only</h3>\n  <p>The following section only applies to projects with native code exposed. If you are using the managed Expo workflow, see the guide on <a href=\"https://docs.expo.dev/guides/linking/\">Linking</a> in the Expo documentation for the appropriate alternative.</p>\n</div>",
      "source_content_hash": "aec4f4887a5e3886a392a875ee4df2a2cfa85a96586823d11323816f9715088e",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_ea37d64a"
      }
    },
    {
      "segment_id": "517051a7",
      "source_content": "If you want to enable deep links in your app, please read the below guide:",
      "source_content_hash": "9f6c5fc7b0eb0992c4f81312cf915ae11da69cf6e46d12755b55b4fe5afd91d7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果你想在應用程式中啟用深度連結，請閱讀以下指南："
      }
    },
    {
      "segment_id": "720d606f",
      "source_content": "<Tabs groupId=\"syntax\" queryString defaultValue={constants.defaultPlatform} values={constants.platforms}>\n<TabItem value=\"android\">\n\n> For instructions on how to add support for deep linking on Android, refer to [Enabling Deep Links for App Content - Add Intent Filters for Your Deep Links](http://developer.android.com/training/app-indexing/deep-linking.html#adding-filters).\n\nIf you wish to receive the intent in an existing instance of MainActivity, you may set the `launchMode` of MainActivity to `singleTask` in `AndroidManifest.xml`. See [`<activity>`](http://developer.android.com/guide/topics/manifest/activity-element.html) documentation for more information.\n\n```xml\n<activity\n  android:name=\".MainActivity\"\n  android:launchMode=\"singleTask\">\n```\n\n</TabItem>\n<TabItem value=\"ios\">\n\n> **NOTE:** On iOS, you'll need to add the `LinkingIOS` folder into your header search paths as described in step 3 [here](linking-libraries-ios#step-3). If you also want to listen to incoming app links during your app's execution, you'll need to add the following lines to your `*AppDelegate.m`:\n\n```objectivec\n// iOS 9.x or newer\n#import <React/RCTLinkingManager.h>\n\n- (BOOL)application:(UIApplication *)application\n   openURL:(NSURL *)url\n   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n{\n  return [RCTLinkingManager application:application openURL:url options:options];\n}\n```\n\nIf you're targeting iOS 8.x or older, you can use the following code instead:\n\n```objectivec\n// iOS 8.x or older\n#import <React/RCTLinkingManager.h>\n\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url\n  sourceApplication:(NSString *)sourceApplication annotation:(id)annotation\n{\n  return [RCTLinkingManager application:application openURL:url\n                      sourceApplication:sourceApplication annotation:annotation];\n}\n```\n\nIf your app is using [Universal Links](https://developer.apple.com/ios/universal-links/), you'll need to add the following code as well:\n\n```objectivec\n- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity\n restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler\n{\n return [RCTLinkingManager application:application\n                  continueUserActivity:userActivity\n                    restorationHandler:restorationHandler];\n}\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "41d5d2390c3f44e52e424a3920f0a290747ecf5c1efa8ac0efcbd56297f3f02c",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_720d606f"
      }
    },
    {
      "segment_id": "b10963d7",
      "source_content": "### Handling Deep Links",
      "source_content_hash": "1a678605098f6c125181f717a19ac16c031f64557758a20dc63e84cbfd7d60f7",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 處理深度連結"
      }
    },
    {
      "segment_id": "2822251a",
      "source_content": "There are two ways to handle URLs that open your app.",
      "source_content_hash": "be8c36d03ec001a5c56ffb258c8608f9b3d576c8c82c6d20fab716727b57c686",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "有兩種方式可以處理開啟你應用程式的 URL。"
      }
    },
    {
      "segment_id": "99d0dd9b",
      "source_content": "#### 1. If the app is already open, the app is foregrounded and a Linking 'url' event is fired",
      "source_content_hash": "3cea7f900c8ab2f3e36c26e2b8f5ba19acac344bf98e3eefafc7ca52c8affdf3",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### 1. 如果應用程式已經開啟，應用程式會被帶到前景並觸發一個 Linking 'url' 事件"
      }
    },
    {
      "segment_id": "d79a4831",
      "source_content": "You can handle these events with `Linking.addEventListener('url', callback)` - it calls `callback({ url })` with the linked URL",
      "source_content_hash": "d3f4992d9c05f92773f8e742e665376cf900960159a18d0202997e16cfa76614",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以使用 `Linking.addEventListener('url', callback)` 來處理這些事件 - 它會呼叫 `callback({ url })` 並傳入連結的 URL"
      }
    },
    {
      "segment_id": "54bafb10",
      "source_content": "#### 2. If the app is not already open, it is opened and the url is passed in as the initialURL",
      "source_content_hash": "1291365be0a64431fa45426168e0bbb7cb7f6c58e9b8ad0e195fef69b2b54ef7",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### 2. 如果應用程式尚未開啟，它會被開啟並且 URL 會作為 initialURL 傳入"
      }
    },
    {
      "segment_id": "4be28ed1",
      "source_content": "You can handle these events with `Linking.getInitialURL()` - it returns a Promise that resolves to the URL, if there is one.",
      "source_content_hash": "610da2414601cdc23591860246090aaf3ba00fc9abda9d643c1100660a32155c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以使用 `Linking.getInitialURL()` 來處理這些事件 - 它會回傳一個 Promise，該 Promise 會解析為 URL（如果有的話）。"
      }
    },
    {
      "segment_id": "04837130",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "d1f76d04",
      "source_content": "## Example",
      "source_content_hash": "9bf34f44c9d1371f4eda569dfa04ff7830aff81cfa81646e680cef087714cdc1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 範例"
      }
    },
    {
      "segment_id": "8574d51c",
      "source_content": "### Open Links and Deep Links (Universal Links)",
      "source_content_hash": "e8b5181bd5d09fd96ba01f274a047f3ba65743df1a76a652eca34206cdbad13a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 開啟連結和深度連結 (Universal Links)"
      }
    },
    {
      "segment_id": "83537d8d",
      "source_content": "```SnackPlayer name=Linking%20Function%20Component%20Example&supportedPlatforms=ios,android\nimport React, { useCallback } from \"react\";\nimport { Alert, Button, Linking, StyleSheet, View } from \"react-native\";\n\nconst supportedURL = \"https://google.com\";\n\nconst unsupportedURL = \"slack://open?team=123456\";\n\nconst OpenURLButton = ({ url, children }) => {\n  const handlePress = useCallback(async () => {\n    // Checking if the link is supported for links with custom URL scheme.\n    const supported = await Linking.canOpenURL(url);\n\n    if (supported) {\n      // Opening the link with some app, if the URL scheme is \"http\" the web link should be opened\n      // by some browser in the mobile\n      await Linking.openURL(url);\n    } else {\n      Alert.alert(`Don't know how to open this URL: ${url}`);\n    }\n  }, [url]);\n\n  return <Button title={children} onPress={handlePress} />;\n};\n\nconst App = () => {\n  return (\n    <View style={styles.container}>\n      <OpenURLButton url={supportedURL}>Open Supported URL</OpenURLButton>\n      <OpenURLButton url={unsupportedURL}>Open Unsupported URL</OpenURLButton>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, justifyContent: \"center\", alignItems: \"center\" },\n});\n\nexport default App;\n```",
      "source_content_hash": "8373cf30630a86ec5424a0a9c15682187257cb8502857f06acec68d3397a3f94",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_83537d8d"
      }
    },
    {
      "segment_id": "2f2d5f01",
      "source_content": "### Open Custom Settings",
      "source_content_hash": "f2dc945b78ecaf65651586c5385d6530c5e606246f3b4ee4ce1287dc0c4dd4ef",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 開啟自訂設定"
      }
    },
    {
      "segment_id": "9129c0c5",
      "source_content": "```SnackPlayer name=Linking%20Function%20Component%20Example&supportedPlatforms=ios,android\nimport React, { useCallback } from \"react\";\nimport { Button, Linking, StyleSheet, View } from \"react-native\";\n\nconst OpenSettingsButton = ({ children }) => {\n  const handlePress = useCallback(async () => {\n    // Open the custom settings if the app has one\n    await Linking.openSettings();\n  }, []);\n\n  return <Button title={children} onPress={handlePress} />;\n};\n\nconst App = () => {\n  return (\n    <View style={styles.container}>\n      <OpenSettingsButton>Open Settings</OpenSettingsButton>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, justifyContent: \"center\", alignItems: \"center\" },\n});\n\nexport default App;\n```",
      "source_content_hash": "cb2abfe49c3be41e611a2f8f739a59d5c24c23494f707adbb082c74fea6d10ff",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_9129c0c5"
      }
    },
    {
      "segment_id": "188a0310",
      "source_content": "### Get the Deep Link",
      "source_content_hash": "aaf68cd078846d824f996400708c254bb7cbbc4a44aad68db0995fdeaea70f48",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 獲取深度連結"
      }
    },
    {
      "segment_id": "f02969e0",
      "source_content": "```SnackPlayer name=Linking%20Function%20Component%20Example&supportedPlatforms=ios,android\nimport React, { useState, useEffect } from \"react\";\nimport { Linking, StyleSheet, Text, View } from \"react-native\";\n\nconst useMount = func => useEffect(() => func(), []);\n\nconst useInitialURL = () => {\n  const [url, setUrl] = useState(null);\n  const [processing, setProcessing] = useState(true);\n\n  useMount(() => {\n    const getUrlAsync = async () => {\n      // Get the deep link used to open the app\n      const initialUrl = await Linking.getInitialURL();\n\n      // The setTimeout is just for testing purpose\n      setTimeout(() => {\n        setUrl(initialUrl);\n        setProcessing(false);\n      }, 1000);\n    };\n\n    getUrlAsync();\n  });\n\n  return { url, processing };\n};\n\nconst App = () => {\n  const { url: initialUrl, processing } = useInitialURL();\n\n  return (\n    <View style={styles.container}>\n      <Text>\n        {processing\n          ? `Processing the initial url from a deep link`\n          : `The deep link is: ${initialUrl || \"None\"}`}\n      </Text>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, justifyContent: \"center\", alignItems: \"center\" },\n});\n\nexport default App;\n```",
      "source_content_hash": "375f0e0f84e28dfdab150a20e098cfb57fdada94029de5b4e71154f6059c4fda",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_f02969e0"
      }
    },
    {
      "segment_id": "263073b1",
      "source_content": "### Send Intents (Android)",
      "source_content_hash": "46a41af19c9b6f68d4f781190b61bcdcdea2fa33fba1de930a31d16a1bfa3f4f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 發送 Intent (Android)"
      }
    },
    {
      "segment_id": "0883e35a",
      "source_content": "```SnackPlayer name=Linking%20Function%20Component%20Example&supportedPlatforms=android\nimport React, { useCallback } from \"react\";\nimport { Alert, Button, Linking, StyleSheet, View } from \"react-native\";\n\nconst SendIntentButton = ({ action, extras, children }) => {\n  const handlePress = useCallback(async () => {\n    try {\n      await Linking.sendIntent(action, extras);\n    } catch (e) {\n      Alert.alert(e.message);\n    }\n  }, [action, extras]);\n\n  return <Button title={children} onPress={handlePress} />;\n};\n\nconst App = () => {\n  return (\n    <View style={styles.container}>\n      <SendIntentButton action=\"android.intent.action.POWER_USAGE_SUMMARY\">\n        Power Usage Summary\n      </SendIntentButton>\n      <SendIntentButton\n        action=\"android.settings.APP_NOTIFICATION_SETTINGS\"\n        extras={[\n          { \"android.provider.extra.APP_PACKAGE\": \"com.facebook.katana\" },\n        ]}\n      >\n        App Notification Settings\n      </SendIntentButton>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: { flex: 1, justifyContent: \"center\", alignItems: \"center\" },\n});\n\nexport default App;\n```",
      "source_content_hash": "bc9c7155abf714f23af3559a0f0b3c17fbbe4b3aa4abbe4830f7bba5c57e7780",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_0883e35a"
      }
    },
    {
      "segment_id": "04f25754",
      "source_content": "# Reference",
      "source_content_hash": "7f466000063da6e2b641eee17b52fffbcef1717169b55b58c4543dc0dc23ea11",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "# 參考"
      }
    },
    {
      "segment_id": "9a53bcb1",
      "source_content": "## Methods",
      "source_content_hash": "f10f482f08112298a7b6d3090f1ea9c2254688471ce31e5da64ed9631f177b5d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 方法"
      }
    },
    {
      "segment_id": "38115c9a",
      "source_content": "### `addEventListener()`",
      "source_content_hash": "c14ee61a90cacc6adff71fa9f1ff675bde58b04df64bfe24a80a9a4a21f7ced0",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `addEventListener()`"
      }
    },
    {
      "segment_id": "34dd1969",
      "source_content": "```jsx\naddEventListener(type, handler);\n```",
      "source_content_hash": "75fed68f5edc10c8a354bf97dba3b4b6e8dc1fce2772a6248a4981d042a30494",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_34dd1969"
      }
    },
    {
      "segment_id": "aa705b4d",
      "source_content": "Add a handler to Linking changes by listening to the `url` event type and providing the handler.",
      "source_content_hash": "e99ae8459fd80a025605331f97568ba6d2a94e8b44ad130b840d93bdda0282b8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "透過監聽 `url` 事件類型並提供處理程序，來為 Linking 的變更添加一個處理程序。"
      }
    },
    {
      "segment_id": "516c4835",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "f3fc8281",
      "source_content": "### `canOpenURL()`",
      "source_content_hash": "54c34e69bb4de2b4afce6206fe624f6fcb2ef988538e55498cef28ae91b9536a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `canOpenURL()`"
      }
    },
    {
      "segment_id": "45bc4861",
      "source_content": "```jsx\ncanOpenURL(url);\n```",
      "source_content_hash": "03666afb5b85baca9bda8c0993456194d3249825487dc62997879084911810d4",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_45bc4861"
      }
    },
    {
      "segment_id": "c9e08343",
      "source_content": "Determine whether or not an installed app can handle a given URL.",
      "source_content_hash": "66035fb741d7583a0c380804eb9d0c704fd794403574512fb9947a7a47e6fc49",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "判斷已安裝的應用程式是否可以處理給定的 URL。"
      }
    },
    {
      "segment_id": "4786f22b",
      "source_content": "The method returns a `Promise` object. When it is determined whether or not the given URL can be handled, the promise is resolved and the first parameter is whether or not it can be opened.",
      "source_content_hash": "c65d5634a2fed7ddf866a0d28931b3886d314baed0f7b8dcc7d62acc9110993c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "該方法返回一個 `Promise` 物件。當確定給定的 URL 是否能被處理時，Promise 會被解析，第一個參數表示該 URL 是否能被打開。"
      }
    },
    {
      "segment_id": "8517ac25",
      "source_content": "The `Promise` will reject on Android if it was impossible to check if the URL can be opened or when targeting Android 11 (SDK 30) if you didn't specify the relevant intent queries in `AndroidManifest.xml`. Similarly on iOS, the promise will reject if you didn't add the specific scheme in the `LSApplicationQueriesSchemes` key inside `Info.plist` (see bellow).",
      "source_content_hash": "bffb4cbc26d09d0bfbf228bec9323b690e270a558f5b0121455de66715ed5943",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在 Android 上，如果無法檢查 URL 是否能被打開，或者當目標為 Android 11 (SDK 30) 時未在 `AndroidManifest.xml` 中指定相關的意圖查詢，`Promise` 會被拒絕。同樣在 iOS 上，如果未在 `Info.plist` 的 `LSApplicationQueriesSchemes` 鍵中添加特定方案（見下文），Promise 也會被拒絕。"
      }
    },
    {
      "segment_id": "5e0ab881",
      "source_content": "**Parameters:**",
      "source_content_hash": "4cffbfc0f3f64ea67829f54830a99f6c1f41f61e25dba76d3216babd93239d28",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**參數：**"
      }
    },
    {
      "segment_id": "beee08cc",
      "source_content": "| Name                                                     | Type   | Description      |\n| -------------------------------------------------------- | ------ | ---------------- |\n| url <div className=\"label basic required\">Required</div> | string | The URL to open. |",
      "source_content_hash": "efafb54b7a1e14fad43db76cea68670d5274d903312c8a1c09c966c9a281e085",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_beee08cc"
      }
    },
    {
      "segment_id": "96ccb775",
      "source_content": "> For web URLs, the protocol (`\"http://\"`, `\"https://\"`) must be set accordingly!",
      "source_content_hash": "a636b0428c8b6ef472b9989141ed382d92f72e6cf980f50ff55e363095a040b9",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 對於網頁 URL，必須正確設置協議（`\"http://\"`、`\"https://\"`）！"
      }
    },
    {
      "segment_id": "96f42f1f",
      "source_content": "> This method has limitations on iOS 9+. From [the official Apple documentation](https://developer.apple.com/documentation/uikit/uiapplication/1622952-canopenurl):\n>\n> - If your app is linked against an earlier version of iOS but is running in iOS 9.0 or later, you can call this method up to 50 times. After reaching that limit, subsequent calls always resolve to `false`. If the user reinstalls or upgrades the app, iOS resets the limit.\n>\n> As of iOS 9, your app also needs to provide the `LSApplicationQueriesSchemes` key inside `Info.plist` or `canOpenURL()` will always resolve to `false`.",
      "source_content_hash": "cf6f265aab567e2251ca205929b6427c168ca26e900f91ac499c2b1aec2d46ed",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 此方法在 iOS 9+ 上有限制。根據[官方 Apple 文檔](https://developer.apple.com/documentation/uikit/uiapplication/1622952-canopenurl)：\n>\n> - 如果你的應用程式是針對較早版本的 iOS 鏈接，但在 iOS 9.0 或更高版本上運行，你可以調用此方法最多 50 次。達到限制後，後續調用總是會解析為 `false`。如果用戶重新安裝或升級應用程式，iOS 會重置此限制。\n>\n> 從 iOS 9 開始，你的應用程式還需要在 `Info.plist` 中提供 `LSApplicationQueriesSchemes` 鍵，否則 `canOpenURL()` 總是會解析為 `false`。"
      }
    },
    {
      "segment_id": "5d956528",
      "source_content": "> When targeting Android 11 (SDK 30) you must specify the intents for the schemes you want to handle in `AndroidManifest.xml`. A list of common intents can be found [here](https://developer.android.com/guide/components/intents-common).\n>\n> For example to handle `https` schemes the following needs to be added to your manifest:\n>\n> ```\n> <manifest ...>\n>     <queries>\n>         <intent>\n>             <action android:name=\"android.intent.action.VIEW\" />\n>             <data android:scheme=\"https\"/>\n>         </intent>\n>     </queries>\n> </manifest>\n> ```",
      "source_content_hash": "e66601426d057435cdf3a435f14d5cf386cfd8a27eb1da15a181dcc2d44a1094",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 當目標為 Android 11 (SDK 30) 時，你必須在 `AndroidManifest.xml` 中指定要處理的方案意圖。常見意圖列表可以在[這裡](https://developer.android.com/guide/components/intents-common)找到。\n>\n> 例如，要處理 `https` 方案，需要在清單中添加以下內容：\n>\n> ```\n> <manifest ...>\n>     <queries>\n>         <intent>\n>             <action android:name=\"android.intent.action.VIEW\" />\n>             <data android:scheme=\"https\"/>\n>         </intent>\n>     </queries>\n> </manifest>\n> ```"
      }
    },
    {
      "segment_id": "91320bb9",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "6c2c7917",
      "source_content": "### `getInitialURL()`",
      "source_content_hash": "0008f71d0e7f2cd92a2b52589bafba46ffbf3b45fe0ad9f512d9948b836d3bf0",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `getInitialURL()`"
      }
    },
    {
      "segment_id": "ac3ddfe5",
      "source_content": "```jsx\ngetInitialURL();\n```",
      "source_content_hash": "a6c71667ab8f5337f11ff2bbb076cf9b0ea3dd123e8622942dd144fb890282d2",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_ac3ddfe5"
      }
    },
    {
      "segment_id": "6fecc583",
      "source_content": "If the app launch was triggered by an app link, it will give the link url, otherwise it will give `null`.",
      "source_content_hash": "3001037939fb9dde105feb180900d55905d7d8bbd0f0d3192c58e3a812008d0e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果應用程式啟動是由應用程式鏈接觸發的，則會返回該鏈接的 URL，否則返回 `null`。"
      }
    },
    {
      "segment_id": "f721b54f",
      "source_content": "> To support deep linking on Android, refer http://developer.android.com/training/app-indexing/deep-linking.html#handling-intents",
      "source_content_hash": "d65d419dcf91e699729938c84bef3f251dd6c5bad54d30cc26084a3c36c37ffc",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 要在 Android 上支持深度鏈接，請參考 http://developer.android.com/training/app-indexing/deep-linking.html#handling-intents"
      }
    },
    {
      "segment_id": "5a97946b",
      "source_content": "> getInitialURL may return `null` while debugging is enabled. Disable the debugger to ensure it gets passed.",
      "source_content_hash": "01517158b9837d880bfd1645227c7d97ca86f13401ef8f86ee3cab22ca4e1ab6",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 在調試模式啟用時，`getInitialURL` 可能返回 `null`。請禁用調試器以確保能正確獲取。"
      }
    },
    {
      "segment_id": "ea4b87e6",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "4e36860d",
      "source_content": "### `openSettings()`",
      "source_content_hash": "aad10d77b4f6c2143bfe6e79e1392535ab622ecd57ac2e5660c60c0437c7a4e0",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `openSettings()`"
      }
    },
    {
      "segment_id": "606e259f",
      "source_content": "```jsx\nopenSettings();\n```",
      "source_content_hash": "f4ac8fcae8a8acb42cf69a9d8c19b28793248585384bb1f81ed2b8779247b376",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_606e259f"
      }
    },
    {
      "segment_id": "d58af824",
      "source_content": "Open the Settings app and displays the app’s custom settings, if it has any.",
      "source_content_hash": "c2531962bfbe76892932b648bff191b8fa39010ea00c8c78efc3220bc1a8071e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "打開設置應用程式並顯示應用程式的自定義設置（如果有的話）。"
      }
    },
    {
      "segment_id": "38cd0c75",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "d3c1b1bc",
      "source_content": "### `openURL()`",
      "source_content_hash": "e5a3b726370f0ebca3e6b88acdce3e389ceafd982c3c1f68a6d4125cbb99cc9f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `openURL()`"
      }
    },
    {
      "segment_id": "96757ef3",
      "source_content": "```jsx\nopenURL(url);\n```",
      "source_content_hash": "3760b7377ba909974e2e8d9fee1f0a1c9515a442c93b9be0ea69089943018294",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_96757ef3"
      }
    },
    {
      "segment_id": "227b5df5",
      "source_content": "Try to open the given `url` with any of the installed apps.",
      "source_content_hash": "d2edce4f862357d23e469e678a6ef064073b0b833c649254de79627ad1cbbf7a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "嘗試使用任何已安裝的應用程式打開給定的 `url`。"
      }
    },
    {
      "segment_id": "56f32447",
      "source_content": "You can use other URLs, like a location (e.g. \"geo:37.484847,-122.148386\" on Android or \"http://maps.apple.com/?ll=37.484847,-122.148386\" on iOS), a contact, or any other URL that can be opened with the installed apps.",
      "source_content_hash": "4e1495189ca3810a4365f7aceda0c874b43324e5c3360da1ec24f169d9034829",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以使用其他 URL，例如位置（在 Android 上使用 `\"geo:37.484847,-122.148386\"` 或在 iOS 上使用 `\"http://maps.apple.com/?ll=37.484847,-122.148386\"`）、聯繫人，或任何其他可以用已安裝應用程式打開的 URL。"
      }
    },
    {
      "segment_id": "b41b4d77",
      "source_content": "The method returns a `Promise` object. If the user confirms the open dialog or the url automatically opens, the promise is resolved. If the user cancels the open dialog or there are no registered applications for the url, the promise is rejected.",
      "source_content_hash": "046e56cc7a9091e08cc561da8ec7662bc607c3d8f839db943477af6c490ca9bd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "該方法返回一個 `Promise` 物件。如果用戶確認打開對話框或 URL 自動打開，Promise 會被解析。如果用戶取消打開對話框或沒有註冊的應用程式可以處理該 URL，Promise 會被拒絕。"
      }
    },
    {
      "segment_id": "f613e20b",
      "source_content": "**Parameters:**",
      "source_content_hash": "4cffbfc0f3f64ea67829f54830a99f6c1f41f61e25dba76d3216babd93239d28",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**參數：**"
      }
    },
    {
      "segment_id": "5bed7a49",
      "source_content": "| Name                                                     | Type   | Description      |\n| -------------------------------------------------------- | ------ | ---------------- |\n| url <div className=\"label basic required\">Required</div> | string | The URL to open. |",
      "source_content_hash": "efafb54b7a1e14fad43db76cea68670d5274d903312c8a1c09c966c9a281e085",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_5bed7a49"
      }
    },
    {
      "segment_id": "678e5640",
      "source_content": "> This method will fail if the system doesn't know how to open the specified URL. If you're passing in a non-http(s) URL, it's best to check `canOpenURL()` first.",
      "source_content_hash": "ab0eb498df95fbb45acf833cd8a42bbb4380d7f11f221377d7d732282ff8e144",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 如果系統不知道如何打開指定的 URL，此方法會失敗。如果你傳入的是非 http(s) URL，最好先檢查 `canOpenURL()`。"
      }
    },
    {
      "segment_id": "768e8a92",
      "source_content": "> For web URLs, the protocol (`\"http://\"`, `\"https://\"`) must be set accordingly!",
      "source_content_hash": "a636b0428c8b6ef472b9989141ed382d92f72e6cf980f50ff55e363095a040b9",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 對於網頁 URL，必須正確設置協議（`\"http://\"`、`\"https://\"`）！"
      }
    },
    {
      "segment_id": "6ce73925",
      "source_content": "> This method may behave differently in a simulator e.g. `\"tel:\"` links are not able to be handled in the iOS simulator as there's no access to the dialer app.",
      "source_content_hash": "8110ffa1881af3bb0f9ac03c5c08a7320378df44a8f76a7248fdad7660de110d",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 此方法在模擬器中的行為可能有所不同，例如 iOS 模擬器無法處理 `\"tel:\"` 連結，因為無法存取撥號應用程式。"
      }
    },
    {
      "segment_id": "e3b17e2d",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "6b626c2c",
      "source_content": "### `removeEventListener()`",
      "source_content_hash": "580d5f83b079715fc27c51f759bd020e5e7276577bfa7a851e15dd88c9386f43",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `removeEventListener()`"
      }
    },
    {
      "segment_id": "d9fd1522",
      "source_content": "```jsx\nremoveEventListener(type, handler);\n```",
      "source_content_hash": "8dbdc7fd973e91acd49594b74b04ec791d430fffbd5733812890c80132bb6a98",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_d9fd1522"
      }
    },
    {
      "segment_id": "e752a2ca",
      "source_content": "> **Deprecated.** Use the `remove()` method on the event subscription returned by [`addEventListener()`](#addeventlistener).",
      "source_content_hash": "bc823640523f03afc53e3b150b77749dc03aa089a7bf349bef1ff3516ecc908a",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> **已棄用。** 請改用 [`addEventListener()`](#addeventlistener) 返回的事件訂閱物件上的 `remove()` 方法。"
      }
    },
    {
      "segment_id": "672ed619",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "c489a644",
      "source_content": "### `sendIntent()` <div class=\"label android\">Android</div>",
      "source_content_hash": "e6989eec644a5d4ab155d829765a960c43d2de4e3bbe26b8aee828e96648760f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### `sendIntent()` <div class=\"label android\">Android</div>"
      }
    },
    {
      "segment_id": "67d73926",
      "source_content": "```jsx\nsendIntent(action, extras);\n```",
      "source_content_hash": "ed6d8884caf7830e56df52043a2bdb76619833078a08cfdba971fcf4048c27b1",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_67d73926"
      }
    },
    {
      "segment_id": "26b95748",
      "source_content": "Launch an Android intent with extras.",
      "source_content_hash": "6a497fd8d782dcf9f147beaa773cdef46c240d3a80ad12c8371a22aa4edd77b3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "啟動帶有附加資料的 Android intent。"
      }
    },
    {
      "segment_id": "5a6dd931",
      "source_content": "**Parameters:**",
      "source_content_hash": "4cffbfc0f3f64ea67829f54830a99f6c1f41f61e25dba76d3216babd93239d28",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**參數：**"
      }
    },
    {
      "segment_id": "71985cbd",
      "source_content": "| Name                                                        | Type                                                       |\n| ----------------------------------------------------------- | ---------------------------------------------------------- |\n| action <div className=\"label basic required\">Required</div> | string                                                     |\n| extras                                                      | `Array<{key: string, value: string ｜ number ｜ boolean}>` |",
      "source_content_hash": "72e0cc615a8e1a5fbf4f05317156f7b2f671f9d1c1ada161336048d360de5592",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_71985cbd"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.70/linking.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.242495+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "480fd6004bf55a89e502ade128e140d6d31380200dd3d2d09f4af27fe91b1db7"
  }
}