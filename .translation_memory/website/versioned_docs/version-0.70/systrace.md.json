{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.70/systrace.md",
  "source_file_content_hash": "23cfb3fe397e0d16acf438dbe550705ddc7c6b35211334b6a7ef6740958613fb",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: systrace\ntitle: Systrace\n---",
      "source_content_hash": "6e16545cbca2de36ef74eab26b6314caade206a544c6670e9a471d1796c95c15",
      "node_type": "yaml",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "`Systrace` is a standard Android marker-based profiling tool (and is installed when you install the Android platform-tools package). Profiled code blocks are surrounded by start/end markers which are then visualized in a colorful chart format. Both the Android SDK and React Native framework provide standard markers that you can visualize.",
      "source_content_hash": "85437ef53a74b8ee4e80645b8a4e7a92c444ed72ce68efb61363b4cfcc6cae0e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "1cc03ec8",
      "source_content": "## Example",
      "source_content_hash": "9bf34f44c9d1371f4eda569dfa04ff7830aff81cfa81646e680cef087714cdc1",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "8d66f911",
      "source_content": "`Systrace` allows you to mark JavaScript (JS) events with a tag and an integer value. Capture the non-Timed JS events in EasyProfiler.",
      "source_content_hash": "208c39aae41815dfb91c4a1530d6cf239ca3eac898e6f758d4112ed778ecb248",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "899bc9b4",
      "source_content": "<Tabs groupId=\"syntax\" queryString defaultValue={constants.defaultSyntax} values={constants.syntax}>\n<TabItem value=\"functional\">\n\n```SnackPlayer name=Systrace%20Function%20Component%20Example\nimport React from \"react\";\nimport { Button, Text, View, SafeAreaView, StyleSheet, Systrace } from \"react-native\";\n\nconst App = () =>  {\n\n  const enableProfiling = () => {\n    Systrace.setEnabled(true); // Call setEnabled to turn on the profiling.\n    Systrace.beginEvent('event_label')\n    Systrace.counterEvent('event_label', 10);\n  }\n\n  const stopProfiling = () => {\n    Systrace.endEvent()\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Text style={[styles.header, styles.paragraph]}>React Native Systrace API</Text>\n    <View style={styles.buttonRow}>\n      <Button title=\"Capture the non-Timed JS events in EasyProfiler\" onPress={()=> enableProfiling()}/>\n      <Button title=\"Stop capturing\" onPress={()=> stopProfiling()} color=\"#FF0000\"/>\n    </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: 44,\n    padding: 8\n  },\n   header: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  paragraph: {\n    margin: 24,\n    fontSize: 25,\n    textAlign: \"center\"\n  },\n  buttonRow: {\n    flexBasis: 150,\n    marginVertical: 16,\n    justifyContent: 'space-evenly'\n  }\n});\n\nexport default App;\n```\n\n</TabItem>\n<TabItem value=\"classical\">\n\n```SnackPlayer name=Systrace%20Class%20Component%20Example\nimport React, { Component } from \"react\";\nimport { Button, Text, View, SafeAreaView, StyleSheet, Systrace } from \"react-native\";\n\nclass App extends Component {\n\n  enableProfiling = () => {\n    Systrace.setEnabled(true); // Call setEnabled to turn on the profiling.\n    Systrace.beginEvent('event_label')\n    Systrace.counterEvent('event_label', 10);\n  }\n\n  stopProfiling = () => {\n    Systrace.endEvent()\n  }\n\n  render() {\n    return (\n      <SafeAreaView style={styles.container}>\n        <Text style={[styles.header, styles.paragraph]}>React Native Systrace API</Text>\n      <View style={styles.buttonRow}>\n        <Button title=\"Capture the non-Timed JS events in EasyProfiler\" onPress={()=> this.enableProfiling()}/>\n        <Button title=\"Stop capturing\" onPress={()=> this.stopProfiling()} color=\"#FF0000\"/>\n      </View>\n      </SafeAreaView>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: 44,\n    padding: 8\n  },\n   header: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    textAlign: \"center\"\n  },\n  paragraph: {\n    margin: 24,\n    fontSize: 25,\n    textAlign: \"center\"\n  },\n  buttonRow: {\n    flexBasis: 150,\n    marginVertical: 16,\n    justifyContent: 'space-evenly'\n  }\n});\n\nexport default App;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "af87e0a4bf8438a38d385d430a074f79a50e85d9636d708863b1997c32958855",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "efbc76b7",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "c6868a9f",
      "source_content": "# Reference",
      "source_content_hash": "7f466000063da6e2b641eee17b52fffbcef1717169b55b58c4543dc0dc23ea11",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "fff17ff8",
      "source_content": "## Methods",
      "source_content_hash": "f10f482f08112298a7b6d3090f1ea9c2254688471ce31e5da64ed9631f177b5d",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "734d40d8",
      "source_content": "### `installReactHook()`",
      "source_content_hash": "6fbe0f5b858004f937712c6427834608811a0217cf9808ce33dd632a824d833b",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "a6c3f55f",
      "source_content": "```jsx\nstatic installReactHook(useFiber)\n```",
      "source_content_hash": "1a3758db53f06961dcefd31f266d1c8fb650343316f39838bd29ed7696758850",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "f97c407b",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "3cd8185f",
      "source_content": "### `setEnabled()`",
      "source_content_hash": "3909b86c3dbf652a890e6c045cc36dbeb749c81e04f44c8fee19d9e37e3517ff",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "cf5bbc3b",
      "source_content": "```jsx\nstatic setEnabled(enabled)\n```",
      "source_content_hash": "d5d61c31f4e13bfb1d9a27ecd9f219f7d73ece8c22a4a56b7bc2fa14e5e41990",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "c66a3543",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "c6b2ca77",
      "source_content": "### `isEnabled()`",
      "source_content_hash": "a36c2440c4a8bee0c18e0b3d95342d9abfced8c57e689c5892a54b282a3be99b",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "b68d496b",
      "source_content": "```jsx\nstatic isEnabled()\n```",
      "source_content_hash": "17b44b18943cdf1c082d758f91feb7401a5a18cc9d90ac9abb38cbbcfa6366f6",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "1af652fb",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "3f77c6a0",
      "source_content": "### `beginEvent()`",
      "source_content_hash": "3c4cf6815a458a4a1bb495a0e11476dcc4270f1a96319b5cf33775caafb4acb6",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "71969be5",
      "source_content": "```jsx\nstatic beginEvent(profileName?, args?)\n```",
      "source_content_hash": "ce150177f03652d90c2d03366b59ea248782c5ea0b69745f21cad7bc3a5fd998",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "62d066b0",
      "source_content": "beginEvent/endEvent for starting and then ending a profile within the same call stack frame.",
      "source_content_hash": "2cfdbae363d2bb84d832cda5f598134bf7074f8d4d1985fdecbb7b6384ab82c8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "f28724b0",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "67edbbc4",
      "source_content": "### `endEvent()`",
      "source_content_hash": "5904bedb446fe39992a16904fc5291cb222f3cea4e3e7f1ec0d5274ef7818606",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "028bef0a",
      "source_content": "```jsx\nstatic endEvent()\n```",
      "source_content_hash": "28b2c0fa86c93d8330456073a0b5de86ad521c04b913620e2673f0f7ef8bc974",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "7b35e1b7",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "61282bab",
      "source_content": "### `beginAsyncEvent()`",
      "source_content_hash": "6c2b8fec6920924e8adb72105920ba8480f9d69c357f37372bb52ff86d43d3c5",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "1cd1d315",
      "source_content": "```jsx\nstatic beginAsyncEvent(profileName?)\n```",
      "source_content_hash": "b69b1fcddc12a7ccd36fd4a0f3ec9814126d545d85663dc02646671e0d6ac5d5",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "9ebd9d9b",
      "source_content": "beginAsyncEvent/endAsyncEvent for starting and then ending a profile where the end can either occur on another thread or out of the current stack frame, eg await the returned cookie variable should be used as input into the endAsyncEvent call to end the profile.",
      "source_content_hash": "31bf5714b85d968d03d4228892ae2327f62be1f37f401b86bdbbe10319c18732",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "dfdfd869",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "c6d75762",
      "source_content": "### `endAsyncEvent()`",
      "source_content_hash": "45fddbe6f402704c470ccd5533b8ba8100f725aa9b9ca523cc5cd12096869b10",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "d7631ae3",
      "source_content": "```jsx\nstatic endAsyncEvent(profileName?, cookie?)\n```",
      "source_content_hash": "f256908289b49f5df1209f44df7396a7a3a71224222a05f448c02c7889d5e3c1",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "4fa624b2",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "6ac93c98",
      "source_content": "### `counterEvent()`",
      "source_content_hash": "82f3fd4249ba29787472b9050f6f241a7cffa9687d8f94ca148a76ea5a27d98c",
      "node_type": "heading",
      "translatable": true,
      "translations": {}
    },
    {
      "segment_id": "117486ca",
      "source_content": "```jsx\nstatic counterEvent(profileName?, value?)\n```",
      "source_content_hash": "8743f0338611cba7a5c2a5be671a523d68cd58561d64e94cdd23c0ce5dde6165",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "dad05c50",
      "source_content": "Register the value to the profileName on the systrace timeline.",
      "source_content_hash": "187bbe3daa84ffc8312db6f824cf5bc545c85b233fd7c286e6a9d22262e3bb41",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {}
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.70/systrace.md",
  "last_updated_timestamp": "2025-06-18T09:36:13.380362+00:00",
  "schema_version": "1.0",
  "translated_versions": {}
}