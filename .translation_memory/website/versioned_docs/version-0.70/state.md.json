{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.70/state.md",
  "source_file_content_hash": "4c112bfcc59d3e6152f8be3d4a93b598a0cff0b6300b3286a4aa0d9bcdbc616c",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: state\ntitle: State\n---",
      "source_content_hash": "5fcef3b4c74e37e45d3321b3f9574fe0f548e59671d381fb6d0b6e3bc3258650",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "There are two types of data that control a component: `props` and `state`. `props` are set by the parent and they are fixed throughout the lifetime of a component. For data that is going to change, we have to use `state`.",
      "source_content_hash": "812c50d203c1930f50b40605bf12c0edd4885a840633a0d75ba5434c1dbf8550",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "控制元件的資料有兩種型別：`props` 和 `state`。`props` 由父元件設定，且在元件的整個生命週期中固定不變。對於會變動的資料，我們必須使用 `state`。"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "In general, you should initialize `state` in the constructor, and then call `setState` when you want to change it.",
      "source_content_hash": "99e601c9b17b7de571dab106f88e46b7128a4b579b4e14f5eb8cbe483ab45298",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "一般來說，你應該在建構子中初始化 `state`，然後在需要變更時呼叫 `setState`。"
      }
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "For example, let's say we want to make text that blinks all the time. The text itself gets set once when the blinking component gets created, so the text itself is a `prop`. The \"whether the text is currently on or off\" changes over time, so that should be kept in `state`.",
      "source_content_hash": "639d7187796e587e1a8e87f2db337f2431e356c2377a557d8a16c5a0b3436439",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "舉例來說，假設我們想製作一個持續閃爍的文字。文字本身在閃爍元件建立時就被設定一次，因此文字本身是一個 `prop`。而「文字當前是顯示還是隱藏」會隨時間變化，這應該保存在 `state` 中。"
      }
    },
    {
      "segment_id": "ee201347",
      "source_content": "```SnackPlayer name=State\nimport React, { useState, useEffect } from 'react';\nimport { Text, View } from 'react-native';\n\nconst Blink = (props) => {\n  const [isShowingText, setIsShowingText] = useState(true);\n\n  useEffect(() => {\n    const toggle = setInterval(() => {\n      setIsShowingText(!isShowingText);\n    }, 1000);\n\n    return () => clearInterval(toggle);\n  });\n\n  if (!isShowingText) {\n    return null;\n  }\n\n  return <Text>{props.text}</Text>;\n};\n\nconst BlinkApp = () => {\n  return (\n    <View style={{ marginTop: 50 }}>\n      <Blink text=\"I love to blink\" />\n      <Blink text=\"Yes blinking is so great\" />\n      <Blink text=\"Why did they ever take this out of HTML\" />\n      <Blink text=\"Look at me look at me look at me\" />\n    </View>\n  );\n};\n\nexport default BlinkApp;\n```",
      "source_content_hash": "dabb993627f9fa2312deee12e20e58aec7958826dc6efe0ad21a6ea9ca86e708",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_ee201347"
      }
    },
    {
      "segment_id": "a9d49f92",
      "source_content": "In a real application, you probably won't be setting state with a timer. You might set state when you have new data from the server, or from user input. You can also use a state container like [Redux](https://redux.js.org/) or [MobX](https://mobx.js.org/) to control your data flow. In that case you would use Redux or MobX to modify your state rather than calling `setState` directly.",
      "source_content_hash": "6c100cc019a6cf4fd190263f1379e19355641719b0e92db0eab3710f085a1209",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在實際應用中，你可能不會用計時器來設定狀態。你可能會在從伺服器獲得新資料或使用者輸入時設定狀態。你也可以使用狀態容器如 [Redux](https://redux.js.org/) 或 [MobX](https://mobx.js.org/) 來控制資料流。在這種情況下，你會使用 Redux 或 MobX 來修改狀態，而不是直接呼叫 `setState`。"
      }
    },
    {
      "segment_id": "a44047a5",
      "source_content": "When setState is called, BlinkApp will re-render its Component. By calling setState within the Timer, the component will re-render every time the Timer ticks.",
      "source_content_hash": "acaec5b76236bc48632c3f9cbe254c99a9875734b2f9764857285a302a72f4a1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當 setState 被呼叫時，BlinkApp 會重新渲染其元件。透過在計時器中呼叫 setState，元件會在每次計時器觸發時重新渲染。"
      }
    },
    {
      "segment_id": "f7ef78f9",
      "source_content": "State works the same way as it does in React, so for more details on handling state, you can look at the [React.Component API](https://reactjs.org/docs/react-component.html#setstate). At this point, you may have noticed that most of our examples use the default text color. To customize the text color, you will have to [learn about Style](style.md).",
      "source_content_hash": "f82ee2f74c354648e241412b41f7b63bbd379124dc32e3623cbf0a24cfa1a48a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "State 的工作方式與 React 中相同，因此有關處理狀態的更多細節，你可以參考 [React.Component API](https://reactjs.org/docs/react-component.html#setstate)。此時，你可能已經注意到我們的大多數範例都使用預設的文字顏色。要自訂文字顏色，你必須 [學習樣式](style.md)。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.70/state.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.252342+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "4c112bfcc59d3e6152f8be3d4a93b598a0cff0b6300b3286a4aa0d9bcdbc616c"
  }
}