{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.70/native-modules-intro.md",
  "source_file_content_hash": "9157e8a1459f341be0da7661e2ec8b417c3be5006db0639f81e6892a40215725",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: native-modules-intro\ntitle: Native Modules Intro\n---",
      "source_content_hash": "83e310cde63bdc0c7e88502322f3c5a84493899c40ce06333ac96e9cd3456827",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import NativeDeprecated from './the-new-architecture/\\_markdown_native_deprecation.mdx'",
      "source_content_hash": "0e53d2663ca7ee44056ad6b215d06a3e68169fbc99f17fbeb99e4507b2894124",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4d1292be"
      }
    },
    {
      "segment_id": "37387e33",
      "source_content": "<NativeDeprecated />",
      "source_content_hash": "1680a0727658899157f198b9f9f0a950c884554cdfaa045c2229262db270638c",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_37387e33"
      }
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "Sometimes a React Native app needs to access a native platform API that is not available by default in JavaScript, for example the native APIs to access Apple or Google Pay. Maybe you want to reuse some existing Objective-C, Swift, Java or C++ libraries without having to reimplement it in JavaScript, or write some high performance, multi-threaded code for things like image processing.",
      "source_content_hash": "2b9af41d56d16ab584715518f4763f555ee641d9951541af55031b52fa9d26d6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "有時 React Native 應用需要存取 JavaScript 預設未提供的原生平台 API，例如存取 Apple Pay 或 Google Pay 的原生 API。或許您想重用現有的 Objective-C、Swift、Java 或 C++ 程式庫，而不必用 JavaScript 重新實作，或是為影像處理等任務編寫高效能的多執行緒程式碼。"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "The NativeModule system exposes instances of Java/Objective-C/C++ (native) classes to JavaScript (JS) as JS objects, thereby allowing you to execute arbitrary native code from within JS. While we don't expect this feature to be part of the usual development process, it is essential that it exists. If React Native doesn't export a native API that your JS app needs you should be able to export it yourself!",
      "source_content_hash": "1c57f12aa731fdf88ce6354155e00530cb74225c59e59007a322ebd61a15cf46",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "NativeModule 系統將 Java/Objective-C/C++（原生）類別的實例暴露給 JavaScript（JS）作為 JS 物件，從而允許您在 JS 中執行任意的原生程式碼。雖然我們不預期此功能會成為常規開發流程的一部分，但其存在至關重要。如果 React Native 未匯出您的 JS 應用所需的原生 API，您應該能夠自行匯出！"
      }
    },
    {
      "segment_id": "70153c6e",
      "source_content": "## Native Module Setup",
      "source_content_hash": "08210eec19941e262f6da5412217aea0183e60d84f96143dce7d17c550a9d57d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 原生模組設定"
      }
    },
    {
      "segment_id": "86b54d44",
      "source_content": "There are two ways to write a native module for your React Native application:",
      "source_content_hash": "57f48bcc28c453fc719c4c50cc46a6630c84146aa0b31c448adaedcffbefc676",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "為您的 React Native 應用編寫原生模組有兩種方式："
      }
    },
    {
      "segment_id": "11c829ab",
      "source_content": "1. Directly within your React Native application’s iOS/Android projects\n2. As an NPM package that can be installed as a dependency by your/other React Native applications",
      "source_content_hash": "6620781034ccdb4f084bd46ecf4c1d3bdd821e50e8d4216988689fe802874430",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "1. 直接在您的 React Native 應用 iOS/Android 專案中\n2. 作為一個 NPM 套件，可被您的/其他 React Native 應用安裝為依賴項"
      }
    },
    {
      "segment_id": "f5f6d2ce",
      "source_content": "This guide will first walk you through implementing a native module directly within a React Native application. However the native module you build in the following guide can be distributed as an NPM package. Check out the [Setting Up a Native Module as an NPM Package](native-modules-setup) guide if you are interested in doing so.",
      "source_content_hash": "3ad2c4aa356b90d884a0c71bb6918531f6fa79b2816eabbfd0282ab6d0202ba5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "本指南將首先引導您直接在 React Native 應用中實作原生模組。然而，您在以下指南中建置的原生模組可以作為 NPM 套件分發。如果您有興趣這樣做，請參閱[將原生模組設定為 NPM 套件](native-modules-setup)指南。"
      }
    },
    {
      "segment_id": "40f9552a",
      "source_content": "## Getting Started",
      "source_content_hash": "c6144136c5fdde00c066bed01a81aecaf8f239036f9ecabc432e5386d5b7a49a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 開始使用"
      }
    },
    {
      "segment_id": "f2c2bdd0",
      "source_content": "In the following sections we will walk you through guides on how to build a native module directly within a React Native application. As a prerequisite, you will need a React Native application to work within. You can follow the steps [here](getting-started) to setup a React Native application if you do not already have one.",
      "source_content_hash": "70dc4b81162a9177e26720e0c3ec975b32de23a5c3ae28e6644c3781af9ec6c1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在以下章節中，我們將引導您完成直接在 React Native 應用中建置原生模組的指南。作為先決條件，您需要一個 React Native 應用來進行操作。如果您還沒有，可以按照[這裡](getting-started)的步驟設定一個 React Native 應用。"
      }
    },
    {
      "segment_id": "a76548f8",
      "source_content": "Imagine that you want to access the iOS/Android native calendar APIs from JavaScript within a React Native application in order to create calendar events. React Native does not expose a JavaScript API to communicate with the native calendar libraries. However, through native modules, you can write native code that communicates with native calendar APIs. Then you can invoke that native code through JavaScript in your React Native application.",
      "source_content_hash": "0bbbb964fd6b9f9a715ba7721f97bfa65f915ab4f5188e9531cfd8f284a3f87b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "想像您想在 React Native 應用中透過 JavaScript 存取 iOS/Android 的原生日曆 API 以建立日曆事件。React Native 並未暴露一個 JavaScript API 來與原生日曆程式庫通訊。然而，透過原生模組，您可以編寫與原生日曆 API 通訊的原生程式碼。然後，您可以在 React Native 應用中透過 JavaScript 呼叫該原生程式碼。"
      }
    },
    {
      "segment_id": "4b1d2d7d",
      "source_content": "In the following sections you will create such a Calendar native module for both [Android](native-modules-android) and [iOS](native-modules-ios).",
      "source_content_hash": "90d2a0e23e38055aba5905467815ab70d88d97cbf82d31b440f8633e1ae0b7a6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在以下章節中，您將為 [Android](native-modules-android) 和 [iOS](native-modules-ios) 建立這樣一個日曆原生模組。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.70/native-modules-intro.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.248695+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "9157e8a1459f341be0da7661e2ec8b417c3be5006db0639f81e6892a40215725"
  }
}