{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.76/fabric-native-components.md",
  "source_file_content_hash": "b70be537cf39369b28fe88279fdd21aeb58b3537f59e55d1c1eb1c6b100c74e7",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: fabric-native-components-introduction\ntitle: Fabric Native Components Introduction\n---",
      "source_content_hash": "563bd0189b22a65d5253710bca4e3dce7e781f0791a7bc51e3c6d8bc3a5f89a0",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport constants from '@site/core/TabsConstants';\nimport {FabricNativeComponentsAndroid,FabricNativeComponentsIOS} from './\\_fabric-native-components';",
      "source_content_hash": "a836ffc59ab10d47c7edb19de9a43fdd31695b0f47bdd03d4fac076a6c079462",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4d1292be"
      }
    },
    {
      "segment_id": "8a5f6a7b",
      "source_content": "# Native Components",
      "source_content_hash": "8229e7eff19d71d5040346e8f0fcbb16763d065346821b7c7c0b8f1f4bf6e274",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "# 原生元件"
      }
    },
    {
      "segment_id": "180bddb1",
      "source_content": "If you want to build _new_ React Native Components that wraps around a [Host Component](https://reactnative.dev/architecture/glossary#host-view-tree-and-host-view) like a unique kind of [CheckBox](https://developer.android.com/reference/androidx/appcompat/widget/AppCompatCheckBox) on Android, or a [UIButton](https://developer.apple.com/documentation/uikit/uibutton?language=objc) on iOS, you should use a Fabric Native Component.",
      "source_content_hash": "ddd932d190069771b9faeb71f90b0b8b7696d0b876f34131acfe4db5a178a7a6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若您想建立_全新_的 React Native 元件來封裝[宿主元件](https://reactnative.dev/architecture/glossary#host-view-tree-and-host-view)，例如 Android 上特殊的[核取方塊](https://developer.android.com/reference/androidx/appcompat/widget/AppCompatCheckBox)或 iOS 的[UI按鈕](https://developer.apple.com/documentation/uikit/uibutton?language=objc)，您應使用 Fabric 原生元件。"
      }
    },
    {
      "segment_id": "cf898102",
      "source_content": "This guide will show you how to build Fabric Native Component, by implementing a web view component. The steps to doing this are:",
      "source_content_hash": "c6703382242ae32cf4b0ac69a048cb9da649f0650e3ddad814db33fd35bf8e0c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "本指南將示範如何透過實作網頁檢視元件來建構 Fabric 原生元件，步驟如下："
      }
    },
    {
      "segment_id": "84758135",
      "source_content": "1. Define a JavaScript specification using Flow or TypeScript.\n2. Configure the dependencies management system to generate code from the provided spec and to be auto-linked.\n3. Implement the Native code.\n4. Use the Component in an App.",
      "source_content_hash": "beabf4be69408d6a73fd46bb4af11d238ee06c1d7b73e0ecc4800318978accc3",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "1. 使用 Flow 或 TypeScript 定義 JavaScript 規格。\n2. 設定依賴管理系統以根據規格自動生成程式碼並進行自動連結。\n3. 實作原生程式碼。\n4. 在應用程式中使用該元件。"
      }
    },
    {
      "segment_id": "2df4f75f",
      "source_content": "You're going to need a plain template generated application to use the component:",
      "source_content_hash": "c2116ee769d67f72b3aaaaba8237f01fab9774ab78c1760fd7e6dc779a0faad4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您需要一個基礎模板生成的應用程式來使用此元件："
      }
    },
    {
      "segment_id": "f2b711c6",
      "source_content": "```bash\nnpx @react-native-community/cli@latest init Demo --install-pods false\n```",
      "source_content_hash": "a1d580b0942d8e9c0010712db5ed11f310bfe5c0397ae85c4a21d4329b23f151",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_f2b711c6"
      }
    },
    {
      "segment_id": "3c36424c",
      "source_content": "## Creating a WebView Component",
      "source_content_hash": "50d8d4b5a464a64c29a233d1e88e2e135094b9d70d6d37c3358882fcd0c502ae",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 建立網頁檢視元件"
      }
    },
    {
      "segment_id": "26524352",
      "source_content": "This guide will show you how to create a Web View component. We will be creating the component by using the Android's [`WebView`](https://developer.android.com/reference/android/webkit/WebView) component, and the iOS' [`WKWebView`](https://developer.apple.com/documentation/webkit/wkwebview?language=objc) component.",
      "source_content_hash": "1943b640a8a2d534063954dd8cddc7edeb90c4a4044376b16595d375e4a4c0d3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "本指南將展示如何建立網頁檢視元件。我們將使用 Android 的[`WebView`](https://developer.android.com/reference/android/webkit/WebView)元件與 iOS 的[`WKWebView`](https://developer.apple.com/documentation/webkit/wkwebview?language=objc)元件來實作。"
      }
    },
    {
      "segment_id": "73ab96a3",
      "source_content": "Let's start by creating the folders structure to hold our component's code:",
      "source_content_hash": "86d722a33e62c086162b81b0058e8444c54eb68c1ed96c9a250e6b7e1013185e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "首先建立存放元件程式碼的資料夾結構："
      }
    },
    {
      "segment_id": "6543a19e",
      "source_content": "```bash\nmkdir -p Demo/{specs,android/app/src/main/java/com/webview}\n```",
      "source_content_hash": "4d9ad4c7b07934341ab0cc40b6a2ca236388888f2bbbf52705d1dd75fc0105bc",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_6543a19e"
      }
    },
    {
      "segment_id": "135468ee",
      "source_content": "This gives you the following layout where you'll working:",
      "source_content_hash": "b782f951f576ed6b1f6b5282d0d57778f70702104f3a0a9ed6df5efb71ef1041",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您將在此結構中進行開發："
      }
    },
    {
      "segment_id": "a11df754",
      "source_content": "```\nDemo\n├── android/app/src/main/java/com/webview\n└── ios\n└── spec\n```",
      "source_content_hash": "d1f31d5505163dcc062506c52bc253dbf03673d4287f235a4493c0fad841e7f2",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_a11df754"
      }
    },
    {
      "segment_id": "b93ddfac",
      "source_content": "- The `android/app/src/main/java/com/webview` folder is the folder that will contain our Android code.\n- The `ios` folder is the folder that will contain our iOS code.\n- The `spec` folder is the folder that will contain the Codegen's specification file.",
      "source_content_hash": "3bd91dc80ebd5df5521564823d29e1e28528ceced03f254763b17f32e9358d7e",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `android/app/src/main/java/com/webview` 資料夾存放 Android 程式碼\n- `ios` 資料夾存放 iOS 程式碼\n- `spec` 資料夾存放 Codegen 規格檔案"
      }
    },
    {
      "segment_id": "11c76fcc",
      "source_content": "## 1. Define Specification for Codegen",
      "source_content_hash": "a1c9fc9307e84839a2d4c980dbaaa33f3b40c833003611e8cc05005932e8cc62",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 1. 為 Codegen 定義規格"
      }
    },
    {
      "segment_id": "98d26038",
      "source_content": "Your specification must be defined in either [TypeScript](https://www.typescriptlang.org/) or [Flow](https://flow.org/) (see [Codegen](the-new-architecture/what-is-codegen) documentation for more details). This is used by Codegen to generate the C++, Objective-C++ and Java to connect your platform code to the JavaScript runtime that React runs in.",
      "source_content_hash": "a993794b12564bcf84c58890756ffcd32dd36a66889af24272a8068a6065dc65",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您的規格必須以 [TypeScript](https://www.typescriptlang.org/) 或 [Flow](https://flow.org/) 定義（詳見 [Codegen](the-new-architecture/what-is-codegen) 文件）。Codegen 將據此生成 C++、Objective-C++ 和 Java 程式碼，連接平台程式碼與 React 運行的 JavaScript 執行環境。"
      }
    },
    {
      "segment_id": "d3649a1e",
      "source_content": "The specification file must be named `<MODULE_NAME>NativeComponent.{ts|js}` to work with Codegen. The suffix `NativeComponent` is not only a convention, it is actually used by Codegen to detect a spec file.",
      "source_content_hash": "98df832b000812b7de93840d75b5712d1c4a8365901bb704b31e48382671907e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "規格檔案必須命名為 `<模組名稱>NativeComponent.{ts|js}` 才能與 Codegen 配合運作。後綴 `NativeComponent` 不僅是慣例，更是 Codegen 識別規格檔案的關鍵字。"
      }
    },
    {
      "segment_id": "4d52a261",
      "source_content": "Use this specification for our WebView Component:",
      "source_content_hash": "21fe2516278e4c1483ea163f780a9fa34cc2b378e447a9810ad8d43f861b2fc6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "以下是我們的網頁檢視元件規格："
      }
    },
    {
      "segment_id": "ce33792e",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultJavaScriptSpecLanguage} values={constants.javaScriptSpecLanguages}>\n<TabItem value=\"typescript\">\n\n```typescript title=\"Demo/specs/WebViewNativeComponent.ts\"\nimport type {HostComponent, ViewProps} from 'react-native';\nimport type {BubblingEventHandler} from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\ntype WebViewScriptLoadedEvent = {\n  result: 'success' | 'error';\n};\n\nexport interface NativeProps extends ViewProps {\n  sourceURL?: string;\n  onScriptLoaded?: BubblingEventHandler<WebViewScriptLoadedEvent> | null;\n}\n\nexport default codegenNativeComponent<NativeProps>(\n  'CustomWebView',\n) as HostComponent<NativeProps>;\n```\n\n</TabItem>\n<TabItem value=\"flow\">\n\n```ts title=\"Demo/RCTWebView/js/RCTWebViewNativeComponent.js\":\n// @flow strict-local\n\nimport type {HostComponent, ViewProps} from 'react-native';\nimport type {BubblingEventHandler} from 'react-native/Libraries/Types/CodegenTypes';\nimport codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';\n\ntype WebViewScriptLoadedEvent = $ReadOnly<{|\n  result: \"success\" | \"error\",\n|}>;\n\ntype NativeProps = $ReadOnly<{|\n  ...ViewProps,\n  sourceURL?: string;\n  onScriptLoaded?: BubblingEventHandler<WebViewScriptLoadedEvent>?;\n|}>;\n\nexport default (codegenNativeComponent<NativeProps>(\n  'CustomWebView',\n): HostComponent<NativeProps>);\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "71982f6e3e22678c70532d1fdb0b42293517360e74791c1e3fdda9e72a4ebcfe",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_ce33792e"
      }
    },
    {
      "segment_id": "0e80209e",
      "source_content": "This specification is composed of three main parts, excluding the imports:",
      "source_content_hash": "7619223935e7ee148bbcb68f3c5fe7a5f41bf122b46a6aa79985627b1d5f297a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "此規格主要包含三個部分（不含導入語句）："
      }
    },
    {
      "segment_id": "38417f80",
      "source_content": "- The `WebViewScriptLoadedEvent` is a supporting data type for the data the event needs to pass from native to JavaScript.\n- The `NativeProps` is a definitions of the props that we can set on the component.\n- The `codegenNativeComponent` statement allows us to codegenerate the code for the custom component and that defines a name for the component used to match the native implementations.",
      "source_content_hash": "b42d50cf5de77e049ecb8cd184ab7e720da67678b4c6484d19fd132109f426eb",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- `WebViewScriptLoadedEvent` 是事件從原生端傳遞至 JavaScript 所需的支援資料型別\n- `NativeProps` 定義元件可設定的屬性\n- `codegenNativeComponent` 語句允許我們為自訂元件生成程式碼，並定義用於匹配原生實作的名稱"
      }
    },
    {
      "segment_id": "e9313fef",
      "source_content": "As with Native Modules, you can have multiple specification files in the `specs/` directory. For more information about the types you can use, and the platform types these map to see the [appendix](appendix.md#codegen-typings).",
      "source_content_hash": "747dc79af1236fc417a27cb7cd61a31b73fdbce945992c3a045346055446207c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "與原生模組相同，您可在 `specs/` 目錄放置多個規格檔案。有關可用型別及其對應平台型別的詳細資訊，請參閱[附錄](appendix.md#codegen-typings)。"
      }
    },
    {
      "segment_id": "48155948",
      "source_content": "## 2. Configure Codegen to run",
      "source_content_hash": "75dea030623d06728e7c03a772e91727de1c668d756e2b639ac7c49e744884b9",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 2. 設定 Codegen 執行環境"
      }
    },
    {
      "segment_id": "1958bc43",
      "source_content": "The specification is used by the React Native's Codegen tools to generate platform specific interfaces and boilerplate for us. To do this, Codegen needs to know where to find our specification and what to do with it. Update your `package.json` to include:",
      "source_content_hash": "1645418783a9ed5516badd421cdc28c8ff131d22d9692958c2cb544e2dfb1d47",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Native 的 Codegen 工具會根據規格生成平台特定介面與樣板程式碼。為此，Codegen 需要知道規格位置與處理方式。請更新您的 `package.json` 包含："
      }
    },
    {
      "segment_id": "1a63b635",
      "source_content": "```json package.json\n     \"start\": \"react-native start\",\n     \"test\": \"jest\"\n   },\n   // highlight-start\n   \"codegenConfig\": {\n     \"name\": \"AppSpec\",\n     \"type\": \"components\",\n     \"jsSrcsDir\": \"specs\",\n     \"android\": {\n       \"javaPackageName\": \"com.nativelocalstorage\"\n     }\n   },\n   // highlight-end\n   \"dependencies\": {\n```",
      "source_content_hash": "1f2d1301b3e02ece4ab28c94df8f2faa4d5784efee7eb569a79f2187bfff5174",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_1a63b635"
      }
    },
    {
      "segment_id": "14bc6b75",
      "source_content": "With everything wired up for Codegen, we need to prepare our native code to hook into our generated code.",
      "source_content_hash": "720f084c91dedbe3bd9c6bd813257dfc0ad21896b3ac61524794bfd07ed6acee",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "完成 Codegen 的基礎配置後，我們需要準備原生程式碼來銜接生成的程式碼。"
      }
    },
    {
      "segment_id": "5dba1427",
      "source_content": "## 2. Building your Native Code",
      "source_content_hash": "279062e3e435e8b39a6b7a148db42df455d10e8c221b3ccec358100eb510b1be",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 2. 建構您的原生程式碼"
      }
    },
    {
      "segment_id": "534ac82e",
      "source_content": "Now it's time to write the native platform code so that when React requires to render a view, the platform can create the right native view and can render it on screen.",
      "source_content_hash": "9541e406429f58ae1d1cfae430e1ead09929ea2c93b57543e77cdd139069974d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在是時候編寫原生平台代碼，以便當 React 需要渲染視圖時，平台能夠創建正確的原生視圖並將其渲染到螢幕上。"
      }
    },
    {
      "segment_id": "a9c2a503",
      "source_content": "You should work through both the Android and iOS platforms.",
      "source_content_hash": "119886defe3acc2a5d2e90a5a560768caadb9adcaa7d330a716e8e3a7e28d576",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "您需要同時處理 Android 和 iOS 平台。"
      }
    },
    {
      "segment_id": "8f285cf5",
      "source_content": ":::note\nThis guide shows you how to create a Native Component that only works with the New Architecture. If you need to support both the New Architecture and the Legacy Architecture, please refer to our [backwards compatibility guide](https://github.com/reactwg/react-native-new-architecture/blob/main/docs/backwards-compat.md).\n\n:::",
      "source_content_hash": "84d9e9a8dd359fb0d97b209a623b42f504af828c4c0bf8dd23015134e5cb4414",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::note\n本指南展示如何創建僅適用於新架構的原生元件。如果您需要同時支援新架構和舊架構，請參考我們的[向後相容性指南](https://github.com/reactwg/react-native-new-architecture/blob/main/docs/backwards-compat.md)。\n\n:::"
      }
    },
    {
      "segment_id": "ec1057e4",
      "source_content": "<Tabs groupId=\"platforms\" queryString defaultValue={constants.defaultPlatform}>\n    <TabItem value=\"android\" label=\"Android\">\n        <FabricNativeComponentsAndroid />\n    </TabItem>\n    <TabItem value=\"ios\" label=\"iOS\">\n        <FabricNativeComponentsIOS />\n    </TabItem>\n</Tabs>",
      "source_content_hash": "1f2b7a0f2de373e414a7bbe2c7cfb8bff38430d58533fadb15e22e48578f6b6e",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_ec1057e4"
      }
    },
    {
      "segment_id": "531ec0bb",
      "source_content": "## 3. Use your Native Component",
      "source_content_hash": "bfedff93a218b23599af289fd0e91315bc7c95c2c73a62e53291bf065104a97a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 3. 使用您的原生元件"
      }
    },
    {
      "segment_id": "d2a3d4c7",
      "source_content": "Finally, you can use the new component in your app. Update your generated `App.tsx` to:",
      "source_content_hash": "bab80dbbb6d0702143dcb0541258a5ec5deeb61dacbd46a4bb300aef20bc6acf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "最後，您可以在應用程式中使用新元件。更新生成的 `App.tsx` 為："
      }
    },
    {
      "segment_id": "75daf40d",
      "source_content": "```javascript title=\"Demo/App.tsx\"\nimport React from 'react';\nimport {Alert, StyleSheet, View} from 'react-native';\nimport WebView from './specs/WebViewNativeComponent';\n\nfunction App(): React.JSX.Element {\n  return (\n    <View style={styles.container}>\n      <WebView\n        sourceURL=\"https://react.dev/\"\n        style={styles.webview}\n        onScriptLoaded={() => {\n          Alert.alert('Page Loaded');\n        }}\n      />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    alignContent: 'center',\n  },\n  webview: {\n    width: '100%',\n    height: '100%',\n  },\n});\n\nexport default App;\n```",
      "source_content_hash": "8f11c758087061af8941bc4b37873e9fd7868391a4619b6789402608a50a28a3",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_75daf40d"
      }
    },
    {
      "segment_id": "3799844b",
      "source_content": "This code creates an app that uses the new `WebView` component we created to load the `react.dev` website.",
      "source_content_hash": "2580600871d8a1c8b7d0e6f136f6b61e1a3a735a9b92ac59832eecec89b9dfb6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這段程式碼創建了一個使用我們新建的 `WebView` 元件來加載 `react.dev` 網站的應用程式。"
      }
    },
    {
      "segment_id": "015c0c6e",
      "source_content": "The app also shows an alert when the web page is loaded.",
      "source_content_hash": "c0127e15c5a0137f532f8eff0c60896169a80cfa73afdd79c33ea1e1c8218b83",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "當網頁加載完成時，應用程式還會顯示一個提示框。"
      }
    },
    {
      "segment_id": "b7d7a8d8",
      "source_content": "## 4. Run your App using the WebView Component",
      "source_content_hash": "7e6438ec0f417e4b958ab4874303b2a68839247dd783fb9fb84959863dcc3774",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 4. 使用 WebView 元件運行您的應用程式"
      }
    },
    {
      "segment_id": "d7cf3ad8",
      "source_content": "<Tabs groupId=\"platforms\" queryString defaultValue={constants.defaultPlatform}>\n<TabItem value=\"android\" label=\"Android\">\n```bash\nyarn run android\n```\n</TabItem>\n<TabItem value=\"ios\" label=\"iOS\">\n```bash\nyarn run ios\n```\n</TabItem>\n</Tabs>",
      "source_content_hash": "3d657984daeedd14a1b0f0d8208a0c5febb35e97bb7796867ac770c6f5befd4d",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_d7cf3ad8"
      }
    },
    {
      "segment_id": "faa7ba96",
      "source_content": "|                                      Android                                      |                                     iOS                                      |\n| :-------------------------------------------------------------------------------: | :--------------------------------------------------------------------------: |\n| <img style={{ \"max-height\": \"600px\" }} src=\"/docs/assets/webview-android.webp\" /> | <img style={{\"max-height\": \"600px\" }} src=\"/docs/assets/webview-ios.webp\" /> |",
      "source_content_hash": "3ab0024a21629484d319ec79fd0673921db3ccfdd4be9efd2ab48e77cb861279",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_faa7ba96"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.76/fabric-native-components.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.508348+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "b70be537cf39369b28fe88279fdd21aeb58b3537f59e55d1c1eb1c6b100c74e7"
  }
}