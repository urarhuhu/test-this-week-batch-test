{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.76/intro-react.md",
  "source_file_content_hash": "f652f1d6681f6ee54b2d6fe4a6a70df20d5a5192f4a5ddb900173597c9b687f2",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: intro-react\ntitle: React Fundamentals\ndescription: To understand React Native fully, you need a solid foundation in React. This short introduction to React can help you get started or get refreshed.\n---",
      "source_content_hash": "a83feae7e9d781eaf0e6d2799d3a9a0abca21eeff50645e9d4cdb1b327f9c7ce",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "10c4cb47",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_10c4cb47"
      }
    },
    {
      "segment_id": "53eaf0e1",
      "source_content": "React Native runs on [React](https://react.dev/), a popular open source library for building user interfaces with JavaScript. To make the most of React Native, it helps to understand React itself. This section can get you started or can serve as a refresher course.",
      "source_content_hash": "c4bb3e0371f915f300ae2308185a2eb8d8656a9d22e933a33a95a7bf5b73d28b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Native 基於 [React](https://react.dev/) 開發，這是一個使用 JavaScript 構建用戶界面的熱門開源庫。要充分掌握 React Native，理解 React 本身至關重要。本節內容既可作為入門指南，也可作為複習課程。"
      }
    },
    {
      "segment_id": "8ac585fb",
      "source_content": "We’re going to cover the core concepts behind React:",
      "source_content_hash": "30beadd99b4ed23d45375f6d0b336495d1d91dafaebe3cd463ce4afdb9ff4e8d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "我們將涵蓋 React 的核心概念："
      }
    },
    {
      "segment_id": "730c423c",
      "source_content": "- components\n- JSX\n- props\n- state",
      "source_content_hash": "5cba449c7905e47e9c1eee0478608dbac2e2777f837b775ca68ce7a1341716f5",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 組件 (components)\n- JSX 語法\n- 屬性 (props)\n- 狀態 (state)"
      }
    },
    {
      "segment_id": "39b3772c",
      "source_content": "If you want to dig deeper, we encourage you to check out [React’s official documentation](https://react.dev/learn).",
      "source_content_hash": "dce73d3ce200b9b8c37b02f8847b784dbf4f50728273950450da2093b3fabfe3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "若需深入學習，建議查閱 [React 官方文檔](https://react.dev/learn)。"
      }
    },
    {
      "segment_id": "bc633244",
      "source_content": "## Your first component",
      "source_content_hash": "25f4108400b177be89d291928da938bdd93d81f9cdeec82d911200f1297f9a9d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 第一個組件"
      }
    },
    {
      "segment_id": "2df4f75f",
      "source_content": "The rest of this introduction to React uses cats in its examples: friendly, approachable creatures that need names and a cafe to work in. Here is your very first Cat component:",
      "source_content_hash": "be4a6f1ae5e5ba6e935c217af14519cfd42e9dd184207ca147cd30e9e26e2ccf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "本 React 入門指南將以貓咪為例——這些友好親人的生物需要名字和工作的咖啡館。以下是你的第一個 Cat 組件："
      }
    },
    {
      "segment_id": "f2b711c6",
      "source_content": "```SnackPlayer name=Your%20Cat\nimport React from 'react';\nimport {Text} from 'react-native';\n\nconst Cat = () => {\n  return <Text>Hello, I am your cat!</Text>;\n};\n\nexport default Cat;\n```",
      "source_content_hash": "10a309a4bb1721cac60938b49fc4a904a3a82f13a45a957dc045bfaf8be8aace",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_f2b711c6"
      }
    },
    {
      "segment_id": "bdc231b1",
      "source_content": "Here is how you do it: To define your `Cat` component, first use JavaScript’s [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) to import React and React Native’s [`Text`](/docs/next/text) Core Component:",
      "source_content_hash": "a2ab7f5d850411e77a18bf141f214e18a20e44f1880ac1b32d055d4920d572c5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "具體實現方式：要定義 `Cat` 組件，首先使用 JavaScript 的 [`import`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) 語句導入 React 和 React Native 的 [`Text`](/docs/next/text) 核心組件："
      }
    },
    {
      "segment_id": "be2d5397",
      "source_content": "```tsx\nimport React from 'react';\nimport {Text} from 'react-native';\n```",
      "source_content_hash": "c3076d0f90c5c54827d9eed574a65d4cc9e2cd59872ebc1cd46019986aa649cc",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_be2d5397"
      }
    },
    {
      "segment_id": "50746522",
      "source_content": "Your component starts as a function:",
      "source_content_hash": "91a6233e86fe76b80048956f9cf16548c109e3d18e8f436448b23457f3bb882c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "組件以函數形式開始："
      }
    },
    {
      "segment_id": "45022e4f",
      "source_content": "```tsx\nconst Cat = () => {};\n```",
      "source_content_hash": "335836a1fcde6e1296b93b30422d375b7f2f95cb69807ee81a1bbe214a1977be",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_45022e4f"
      }
    },
    {
      "segment_id": "a9d49f92",
      "source_content": "You can think of components as blueprints. Whatever a function component returns is rendered as a **React element.** React elements let you describe what you want to see on the screen.",
      "source_content_hash": "5601ec0090e3cc61508c7164f20fb10c58b2926d68d2e2f2d4dc7e1c22c63835",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "可將組件視為藍圖。函數組件返回的內容會被渲染為 **React 元素**，這些元素用於描述屏幕上顯示的內容。"
      }
    },
    {
      "segment_id": "a44047a5",
      "source_content": "Here the `Cat` component will render a `<Text>` element:",
      "source_content_hash": "691ea0feaa257a47501d841f61f33711a46851f95ce3525c9093f942b37f74ca",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這裡 `Cat` 組件將渲染一個 `<Text>` 元素："
      }
    },
    {
      "segment_id": "64b6f348",
      "source_content": "```tsx\nconst Cat = () => {\n  return <Text>Hello, I am your cat!</Text>;\n};\n```",
      "source_content_hash": "bb8c2ff6317131d06c1adfd70698bd5cb2886c6cc2370576877c07ddd359f434",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_64b6f348"
      }
    },
    {
      "segment_id": "e536ea0d",
      "source_content": "You can export your function component with JavaScript’s [`export default`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) for use throughout your app like so:",
      "source_content_hash": "a198f14aea26a8370983b4a1cba86f65e38bed10cf94a820b8e10e7d437046b0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "可以使用 JavaScript 的 [`export default`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export) 導出函數組件，以便在整個應用中使用："
      }
    },
    {
      "segment_id": "3c08ed05",
      "source_content": "```tsx\nconst Cat = () => {\n  return <Text>Hello, I am your cat!</Text>;\n};\n\nexport default Cat;\n```",
      "source_content_hash": "481093d2af95855fba488ccf3b4c4c72c3b75fdbb58859d84b54e115fc38c116",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_3c08ed05"
      }
    },
    {
      "segment_id": "01f0fa9f",
      "source_content": "> This is one of many ways to export your component. This kind of export works well with the Snack Player. However, depending on your app’s file structure, you might need to use a different convention. This [handy cheatsheet on JavaScript imports and exports](https://medium.com/dailyjs/javascript-module-cheatsheet-7bd474f1d829) can help.",
      "source_content_hash": "eb01d08c228c2b775350e040f8e76920f61e514e60690bf33940eda7a6a86dc8",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 這是導出組件的多種方式之一。此類導出方式與 Snack Player 兼容良好。但根據應用的文件結構，可能需要採用其他約定。可參考這份 [JavaScript 導入導出速查表](https://medium.com/dailyjs/javascript-module-cheatsheet-7bd474f1d829)。"
      }
    },
    {
      "segment_id": "7f71ff2a",
      "source_content": "Now take a closer look at that `return` statement. `<Text>Hello, I am your cat!</Text>` is using a kind of JavaScript syntax that makes writing elements convenient: JSX.",
      "source_content_hash": "3d58686b6d5d8d097b3009b0c28ca25978fc57e5cafe105ca56dad83bc5d4fcc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在仔細觀察這個 `return` 語句。`<Text>Hello, I am your cat!</Text>` 使用了某種 JavaScript 語法來簡化元素編寫：JSX。"
      }
    },
    {
      "segment_id": "047c2395",
      "source_content": "## JSX",
      "source_content_hash": "2b0dc8b879f0e50f62565b07648ba51817dc8b2e049703c5894cba14e272a9f1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## JSX"
      }
    },
    {
      "segment_id": "883231d4",
      "source_content": "React and React Native use **JSX,** a syntax that lets you write elements inside JavaScript like so: `<Text>Hello, I am your cat!</Text>`. The React docs have [a comprehensive guide to JSX](https://react.dev/learn/writing-markup-with-jsx) you can refer to learn even more. Because JSX is JavaScript, you can use variables inside it. Here you are declaring a name for the cat, `name`, and embedding it with curly braces inside `<Text>`.",
      "source_content_hash": "623d5d15b756877d8bf3b0b3cbad2044ce9d82e52a49f4003f52eb20bf728ba4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React 和 React Native 使用 **JSX** 語法，允許在 JavaScript 中直接編寫元素：`<Text>Hello, I am your cat!</Text>`。React 文檔提供 [完整的 JSX 指南](https://react.dev/learn/writing-markup-with-jsx) 可供深入學習。由於 JSX 本質是 JavaScript，因此可以在其中使用變量。這裡我們聲明了貓的名字 `name`，並用花括號將其嵌入 `<Text>`。"
      }
    },
    {
      "segment_id": "468b36ba",
      "source_content": "```SnackPlayer name=Curly%20Braces\nimport React from 'react';\nimport {Text} from 'react-native';\n\nconst Cat = () => {\n  const name = 'Maru';\n  return <Text>Hello, I am {name}!</Text>;\n};\n\nexport default Cat;\n```",
      "source_content_hash": "80f16eeedc60b36222cfd15ccd01621c741fbba8163c18f2f9fb7e6803389bd5",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_468b36ba"
      }
    },
    {
      "segment_id": "2547a6bb",
      "source_content": "Any JavaScript expression will work between curly braces, including function calls like `{getFullName(\"Rum\", \"Tum\", \"Tugger\")}`:",
      "source_content_hash": "3a75fb70d84f202fa4a8a4b88f92f2e89bfad693880532a1237f1f598f1cfb0f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "花括號內可包含任何 JavaScript 表達式，包括函數調用如 `{getFullName(\"Rum\", \"Tum\", \"Tugger\")}`："
      }
    },
    {
      "segment_id": "c625a102",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Curly%20Braces&ext=js\nimport React from 'react';\nimport {Text} from 'react-native';\n\nconst getFullName = (firstName, secondName, thirdName) => {\n  return firstName + ' ' + secondName + ' ' + thirdName;\n};\n\nconst Cat = () => {\n  return <Text>Hello, I am {getFullName('Rum', 'Tum', 'Tugger')}!</Text>;\n};\n\nexport default Cat;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Curly%20Braces&ext=tsx\nimport React from 'react';\nimport {Text} from 'react-native';\n\nconst getFullName = (\n  firstName: string,\n  secondName: string,\n  thirdName: string,\n) => {\n  return firstName + ' ' + secondName + ' ' + thirdName;\n};\n\nconst Cat = () => {\n  return <Text>Hello, I am {getFullName('Rum', 'Tum', 'Tugger')}!</Text>;\n};\n\nexport default Cat;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "7594132e720e2aaf08f40c4314108cb8637e3f64bdbe96cd394e0c40510b0e80",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_c625a102"
      }
    },
    {
      "segment_id": "9c9e2b64",
      "source_content": "You can think of curly braces as creating a portal into JS functionality in your JSX!",
      "source_content_hash": "357159bbdf8f19a8d349e6c6472ffec4438409ef4ce1a9d07a07e91f84830e87",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "可以將花括號視為通往 JSX 中 JavaScript 功能的傳送門！"
      }
    },
    {
      "segment_id": "7abf650f",
      "source_content": "> Because JSX is included in the React library, it won’t work if you don’t have `import React from 'react'` at the top of your file!",
      "source_content_hash": "404ec02ae7120098da0bd7c03e91b6b5e2cf55cd578779c3e26a66b7aac5c300",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 由於 JSX 包含在 React 庫中，若文件頂部沒有 `import React from 'react'` 導入語句，JSX 將無法工作！"
      }
    },
    {
      "segment_id": "a461a67b",
      "source_content": "## Custom Components",
      "source_content_hash": "ca6e6c44f9de4f01899effb6b8aee0265f14159227b864335548f4565e52e08c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 自定義組件"
      }
    },
    {
      "segment_id": "e77cf7c6",
      "source_content": "You’ve already met [React Native’s Core Components](intro-react-native-components). React lets you nest these components inside each other to create new components. These nestable, reusable components are at the heart of the React paradigm.",
      "source_content_hash": "ac5180b8047b4137c5847f671cae60601a3dee9c569a671508edaa285f830f37",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你已接觸過 [React Native 核心組件](intro-react-native-components)。React 允許將這些組件相互嵌套以創建新組件，這種可嵌套、可復用的組件是 React 範式的核心。"
      }
    },
    {
      "segment_id": "bb1346b6",
      "source_content": "For example, you can nest [`Text`](text) and [`TextInput`](textinput) inside a [`View`](view) below, and React Native will render them together:",
      "source_content_hash": "cd46359da6b75f80d467df401e548127f311940d6a6f8a7ffc3cc36f25c0702f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "例如，可以將 [`Text`](text) 和 [`TextInput`](textinput) 嵌套在 [`View`](view) 中，React Native 會將它們一併渲染："
      }
    },
    {
      "segment_id": "8a061704",
      "source_content": "```SnackPlayer name=Custom%20Components\nimport React from 'react';\nimport {Text, TextInput, View} from 'react-native';\n\nconst Cat = () => {\n  return (\n    <View>\n      <Text>Hello, I am...</Text>\n      <TextInput\n        style={{\n          height: 40,\n          borderColor: 'gray',\n          borderWidth: 1,\n        }}\n        defaultValue=\"Name me!\"\n      />\n    </View>\n  );\n};\n\nexport default Cat;\n```",
      "source_content_hash": "6f982916fc40ddeb75fa17bcc2c27a56f2408b7e9e03cf612165fd193130f373",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_8a061704"
      }
    },
    {
      "segment_id": "a5905b07",
      "source_content": "#### Developer notes",
      "source_content_hash": "66e953d4565d4aaa29f8e46c15a35a647c771f450704cb6a726e362a63753246",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "#### 開發者須知"
      }
    },
    {
      "segment_id": "8f6fa9f3",
      "source_content": "<Tabs groupId=\"guide\" queryString defaultValue=\"web\" values={constants.getDevNotesTabs([\"android\", \"web\"])}>\n\n<TabItem value=\"web\">\n\n> If you’re familiar with web development, `<View>` and `<Text>` might remind you of HTML! You can think of them as the `<div>` and `<p>` tags of application development.\n\n</TabItem>\n<TabItem value=\"android\">\n\n> On Android, you usually put your views inside `LinearLayout`, `FrameLayout`, `RelativeLayout`, etc. to define how the view’s children will be arranged on the screen. In React Native, `View` uses Flexbox for its children’s layout. You can learn more in [our guide to layout with Flexbox](flexbox).\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "d5f26986fad93cce21b69ebf561d948170c6ebd31c7463ae06e9f0100f33a2cf",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_8f6fa9f3"
      }
    },
    {
      "segment_id": "9ef42155",
      "source_content": "You can render this component multiple times and in multiple places without repeating your code by using `<Cat>`:",
      "source_content_hash": "cedfefab5196e2370fa73aa91718c8e8a71b5b11440388be4ca99b616ba83994",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以透過使用 `<Cat>` 來多次渲染這個元件，且無需重複程式碼："
      }
    },
    {
      "segment_id": "8185786b",
      "source_content": "```SnackPlayer name=Multiple%20Components\nimport React from 'react';\nimport {Text, View} from 'react-native';\n\nconst Cat = () => {\n  return (\n    <View>\n      <Text>I am also a cat!</Text>\n    </View>\n  );\n};\n\nconst Cafe = () => {\n  return (\n    <View>\n      <Text>Welcome!</Text>\n      <Cat />\n      <Cat />\n      <Cat />\n    </View>\n  );\n};\n\nexport default Cafe;\n```",
      "source_content_hash": "5412d1daf84b03ef9ea7b3c601029f2a61e96e854cd8dd8c086d74cdce895b81",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_8185786b"
      }
    },
    {
      "segment_id": "90c4b96b",
      "source_content": "Any component that renders other components is a **parent component.** Here, `Cafe` is the parent component and each `Cat` is a **child component.**",
      "source_content_hash": "fedb8dab541a2e6694bd24e9a8ad72ba7274a39dcaa95682a8297ef75fa0ee52",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "任何渲染其他元件的元件都稱為**父元件**。在此範例中，`Cafe` 是父元件，而每個 `Cat` 則是**子元件**。"
      }
    },
    {
      "segment_id": "1f9058cd",
      "source_content": "You can put as many cats in your cafe as you like. Each `<Cat>` renders a unique element—which you can customize with props.",
      "source_content_hash": "b73269b4f03df936c84bf435db77b17e04b9e55bf08c80ec6da91e59d06348aa",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以在咖啡館中放入任意數量的貓咪。每個 `<Cat>` 都會渲染一個獨特的元素——你可以透過 props 來客製化它們。"
      }
    },
    {
      "segment_id": "dd21637d",
      "source_content": "## Props",
      "source_content_hash": "5b94a6cc928a22f2ff71078f7462cd97dbe259a0c4d1877ab3afc2a92dded915",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## Props"
      }
    },
    {
      "segment_id": "09f901c3",
      "source_content": "**Props** is short for “properties”. Props let you customize React components. For example, here you pass each `<Cat>` a different `name` for `Cat` to render:",
      "source_content_hash": "ec192ff634ff7839d60f1afeef533e8aa5e2643cefe692784287cf4eef20ba04",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "**Props** 是「屬性」(properties) 的簡稱。Props 讓你能夠客製化 React 元件。例如，這裡你為每個 `<Cat>` 傳遞不同的 `name`，讓 `Cat` 渲染時使用："
      }
    },
    {
      "segment_id": "b150092b",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=Multiple%20Props&ext=js\nimport React from 'react';\nimport {Text, View} from 'react-native';\n\nconst Cat = props => {\n  return (\n    <View>\n      <Text>Hello, I am {props.name}!</Text>\n    </View>\n  );\n};\n\nconst Cafe = () => {\n  return (\n    <View>\n      <Cat name=\"Maru\" />\n      <Cat name=\"Jellylorum\" />\n      <Cat name=\"Spot\" />\n    </View>\n  );\n};\n\nexport default Cafe;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=Multiple%20Props&ext=tsx\nimport React from 'react';\nimport {Text, View} from 'react-native';\n\ntype CatProps = {\n  name: string;\n};\n\nconst Cat = (props: CatProps) => {\n  return (\n    <View>\n      <Text>Hello, I am {props.name}!</Text>\n    </View>\n  );\n};\n\nconst Cafe = () => {\n  return (\n    <View>\n      <Cat name=\"Maru\" />\n      <Cat name=\"Jellylorum\" />\n      <Cat name=\"Spot\" />\n    </View>\n  );\n};\n\nexport default Cafe;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "c7e816e3101a191e953e601c97fded54384973bad369f891d33b226d8ac4ffd5",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_b150092b"
      }
    },
    {
      "segment_id": "5014d30c",
      "source_content": "Most of React Native’s Core Components can be customized with props, too. For example, when using [`Image`](image), you pass it a prop named [`source`](image#source) to define what image it shows:",
      "source_content_hash": "8d8d07a0ad89a1152427cc4e95591b76e9f8099cad70dcaa1ea5cb33fbac7fec",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Native 的大多數核心元件也可以透過 props 來客製化。舉例來說，使用 [`Image`](image) 時，你可以傳遞一個名為 [`source`](image#source) 的 prop 來定義它顯示的圖片："
      }
    },
    {
      "segment_id": "a54efbd2",
      "source_content": "```SnackPlayer name=Props\nimport React from 'react';\nimport {Text, View, Image} from 'react-native';\n\nconst CatApp = () => {\n  return (\n    <View>\n      <Image\n        source={{\n          uri: 'https://reactnative.dev/docs/assets/p_cat1.png',\n        }}\n        style={{width: 200, height: 200}}\n      />\n      <Text>Hello, I am your cat!</Text>\n    </View>\n  );\n};\n\nexport default CatApp;\n```",
      "source_content_hash": "0c5e522f38d6747f8c3938ac98c513c077de672704836680a4826454b738a21d",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_a54efbd2"
      }
    },
    {
      "segment_id": "8517ac25",
      "source_content": "`Image` has [many different props](image#props), including [`style`](image#style), which accepts a JS object of design and layout related property-value pairs.",
      "source_content_hash": "0ede1b56a885beb2cf17c9393d307f96848ed13342b07ca8eb388e9f60ec356a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "`Image` 有[許多不同的 props](image#props)，包括 [`style`](image#style)，它接受一個包含設計與佈局相關屬性值對的 JS 物件。"
      }
    },
    {
      "segment_id": "9d4b10e2",
      "source_content": "> Notice the double curly braces `{{ }}` surrounding `style`‘s width and height. In JSX, JavaScript values are referenced with `{}`. This is handy if you are passing something other than a string as props, like an array or number: `<Cat food={[\"fish\", \"kibble\"]} age={2} />`. However, JS objects are **_also_** denoted with curly braces: `{width: 200, height: 200}`. Therefore, to pass a JS object in JSX, you must wrap the object in **another pair** of curly braces: `{{width: 200, height: 200}}`",
      "source_content_hash": "52ca9931f7ede7324ccd5544f636aba86afa8e91a27f9f376c8f11d5ba1d790d",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 注意 `style` 的寬度和高度周圍的雙大括號 `{{ }}`。在 JSX 中，JavaScript 值是用 `{}` 來引用的。這在傳遞非字串的 props 時非常方便，例如陣列或數字：`<Cat food={[\"魚\", \"乾糧\"]} age={2} />`。然而，JS 物件**同樣**使用大括號表示：`{width: 200, height: 200}`。因此，要在 JSX 中傳遞一個 JS 物件，你必須**再包裹一層**大括號：`{{width: 200, height: 200}}`。"
      }
    },
    {
      "segment_id": "d1996877",
      "source_content": "You can build many things with props and the Core Components [`Text`](text), [`Image`](image), and [`View`](view)! But to build something interactive, you’ll need state.",
      "source_content_hash": "20bfc459533908cc876151d4d92b78bff3af76314018c0aa4f3c1a57579e3b66",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以透過 props 和核心元件 [`Text`](text)、[`Image`](image) 和 [`View`](view) 來建構許多東西！但要建構互動式的內容，你需要狀態。"
      }
    },
    {
      "segment_id": "d087570f",
      "source_content": "## State",
      "source_content_hash": "b74e9a3ac0450a7fcea9d133952a2ed0f9a731d22c0f07369c92352a6061e691",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## State"
      }
    },
    {
      "segment_id": "1f92e934",
      "source_content": "While you can think of props as arguments you use to configure how components render, **state** is like a component’s personal data storage. State is useful for handling data that changes over time or that comes from user interaction. State gives your components memory!",
      "source_content_hash": "36c4c80c2ca4437b8bab88c3edcde99b50291a3dae6e91c616f0a1091b59725e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以將 props 視為用來配置元件渲染的參數，而**state** 則是元件的個人資料儲存空間。State 適合用來處理隨時間變化的資料或來自使用者互動的資料。State 賦予你的元件記憶力！"
      }
    },
    {
      "segment_id": "96f42f1f",
      "source_content": "> As a general rule, use props to configure a component when it renders. Use state to keep track of any component data that you expect to change over time.",
      "source_content_hash": "758cc8c4a177027f1b8c112e3e0a03f00b38b69096723cac0d56e9abc764ce50",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 一般來說，當元件渲染時，使用 props 來配置它。使用 state 來追蹤任何你預期會隨時間變化的元件資料。"
      }
    },
    {
      "segment_id": "83d7d3bc",
      "source_content": "The following example takes place in a cat cafe where two hungry cats are waiting to be fed. Their hunger, which we expect to change over time (unlike their names), is stored as state. To feed the cats, press their buttons—which will update their state.",
      "source_content_hash": "14227502d8fb1c9c6ff5cd3e1554586ad6720585c08aa9ab81b7edcb68fa3085",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "以下範例發生在一家貓咪咖啡館中，兩隻飢餓的貓咪等待被餵食。牠們的飢餓狀態（我們預期會隨時間變化，與牠們的名字不同）被儲存為 state。要餵食貓咪，請按下牠們的按鈕——這將更新牠們的狀態。"
      }
    },
    {
      "segment_id": "2e76bd58",
      "source_content": "You can add state to a component by calling [React’s `useState` Hook](https://react.dev/learn/state-a-components-memory). A Hook is a kind of function that lets you “hook into” React features. For example, `useState` is a Hook that lets you add state to function components. You can learn more about [other kinds of Hooks in the React documentation.](https://react.dev/reference/react)",
      "source_content_hash": "095c7582ff7632517be38771e031719cad12971da290989433fd6c63d99980b1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以透過呼叫 [React 的 `useState` Hook](https://react.dev/learn/state-a-components-memory) 來為元件添加 state。Hook 是一種函數，讓你能夠「鉤入」React 的功能。例如，`useState` 是一個 Hook，讓你能夠為函數元件添加 state。你可以在 [React 文件](https://react.dev/reference/react) 中了解更多關於其他種類的 Hook。"
      }
    },
    {
      "segment_id": "9318b2c6",
      "source_content": "<Tabs groupId=\"language\" queryString defaultValue={constants.defaultSnackLanguage} values={constants.snackLanguages}>\n<TabItem value=\"javascript\">\n\n```SnackPlayer name=State&ext=js\nimport React, {useState} from 'react';\nimport {Button, Text, View} from 'react-native';\n\nconst Cat = props => {\n  const [isHungry, setIsHungry] = useState(true);\n\n  return (\n    <View>\n      <Text>\n        I am {props.name}, and I am {isHungry ? 'hungry' : 'full'}!\n      </Text>\n      <Button\n        onPress={() => {\n          setIsHungry(false);\n        }}\n        disabled={!isHungry}\n        title={isHungry ? 'Give me some food, please!' : 'Thank you!'}\n      />\n    </View>\n  );\n};\n\nconst Cafe = () => {\n  return (\n    <>\n      <Cat name=\"Munkustrap\" />\n      <Cat name=\"Spot\" />\n    </>\n  );\n};\n\nexport default Cafe;\n```\n\n</TabItem>\n<TabItem value=\"typescript\">\n\n```SnackPlayer name=State&ext=tsx\nimport React, {useState} from 'react';\nimport {Button, Text, View} from 'react-native';\n\ntype CatProps = {\n  name: string;\n};\n\nconst Cat = (props: CatProps) => {\n  const [isHungry, setIsHungry] = useState(true);\n\n  return (\n    <View>\n      <Text>\n        I am {props.name}, and I am {isHungry ? 'hungry' : 'full'}!\n      </Text>\n      <Button\n        onPress={() => {\n          setIsHungry(false);\n        }}\n        disabled={!isHungry}\n        title={isHungry ? 'Give me some food, please!' : 'Thank you!'}\n      />\n    </View>\n  );\n};\n\nconst Cafe = () => {\n  return (\n    <>\n      <Cat name=\"Munkustrap\" />\n      <Cat name=\"Spot\" />\n    </>\n  );\n};\n\nexport default Cafe;\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "3d4eed9acb79855ae4d0e3dd85341800fd372fee575c48979b7c4ddd65e6c4bc",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_9318b2c6"
      }
    },
    {
      "segment_id": "26b95748",
      "source_content": "First, you will want to import `useState` from React like so:",
      "source_content_hash": "676829e4e6b71d3ece9b78fa5fa924a304f578da954418beeb34ebd589a2b204",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "首先，你需要從 React 導入 `useState`："
      }
    },
    {
      "segment_id": "947da5d7",
      "source_content": "```tsx\nimport React, {useState} from 'react';\n```",
      "source_content_hash": "695abf5eada83ceb49db8632de71fe979af82ce871805595dc33bcd6ad1263d6",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_947da5d7"
      }
    },
    {
      "segment_id": "158df793",
      "source_content": "Then you declare the component’s state by calling `useState` inside its function. In this example, `useState` creates an `isHungry` state variable:",
      "source_content_hash": "1f4d5ed5ad5b6272444dbea8ba93cd7bf701ee7fa39b13518d8af89a6078d1fe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "然後，在元件的函數內部呼叫 `useState` 來宣告元件的 state。在此範例中，`useState` 創建了一個 `isHungry` 狀態變數："
      }
    },
    {
      "segment_id": "d68d5d0e",
      "source_content": "```tsx\nconst Cat = (props: CatProps) => {\n  const [isHungry, setIsHungry] = useState(true);\n  // ...\n};\n```",
      "source_content_hash": "cf42a746e25844299fd122bdc9e8f1d8b3fd984d5d218ae5e15ff243e1b97c11",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_d68d5d0e"
      }
    },
    {
      "segment_id": "0acb3bd9",
      "source_content": "> You can use `useState` to track any kind of data: strings, numbers, Booleans, arrays, objects. For example, you can track the number of times a cat has been petted with `const [timesPetted, setTimesPetted] = useState(0)`!",
      "source_content_hash": "f1f827d62348cc367d38829bd1867fb0da3d11f900afd4e9f2895adcfd6130fd",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 你可以使用 `useState` 來追蹤任何類型的資料：字串、數字、布林值、陣列、物件。例如，你可以用 `const [timesPetted, setTimesPetted] = useState(0)` 來追蹤貓咪被撫摸的次數！"
      }
    },
    {
      "segment_id": "3bb26da2",
      "source_content": "Calling `useState` does two things:",
      "source_content_hash": "4c54fcd1e5a09f7dbb86c026d1a26949cdeef7344cf4069a294dcc4412daa1be",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "呼叫 `useState` 會做兩件事："
      }
    },
    {
      "segment_id": "09aad98b",
      "source_content": "- it creates a “state variable” with an initial value—in this case the state variable is `isHungry` and its initial value is `true`\n- it creates a function to set that state variable’s value—`setIsHungry`",
      "source_content_hash": "7a5dece800a1a7952324a6ba590c641c517f01f07dc804bee32cce2e3929feee",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 它創建一個帶有初始值的「狀態變數」——在此範例中，狀態變數是 `isHungry`，其初始值為 `true`\n- 它創建一個函數來設定該狀態變數的值——`setIsHungry`"
      }
    },
    {
      "segment_id": "2fc2d2cf",
      "source_content": "It doesn’t matter what names you use. But it can be handy to think of the pattern as `[<getter>, <setter>] = useState(<initialValue>)`.",
      "source_content_hash": "ca10db2950edd08a90f7164fc601a4390ac7f38d5a57d19a399739b43b133c88",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "命名方式並不重要，但將模式理解為 `[<getter>, <setter>] = useState(<initialValue>)` 會很有幫助。"
      }
    },
    {
      "segment_id": "a2532daf",
      "source_content": "Next you add the [`Button`](button) Core Component and give it an `onPress` prop:",
      "source_content_hash": "0a19ab8002dc62d07924cd6d291fb2bda78828e2f20ffa8afc6a2a07f6a51772",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "接著加入 [`Button`](button) 核心元件並賦予其 `onPress` 屬性："
      }
    },
    {
      "segment_id": "4de0f839",
      "source_content": "```tsx\n<Button\n  onPress={() => {\n    setIsHungry(false);\n  }}\n  //..\n/>\n```",
      "source_content_hash": "3f177f51106ee3a93ff50bc9ace53d8940b74c4fc231b037eaac4c75ac3ca5c1",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4de0f839"
      }
    },
    {
      "segment_id": "1e0d7fbe",
      "source_content": "Now, when someone presses the button, `onPress` will fire, calling the `setIsHungry(false)`. This sets the state variable `isHungry` to `false`. When `isHungry` is false, the `Button`’s `disabled` prop is set to `true` and its `title` also changes:",
      "source_content_hash": "c4baba3840e3cfeee2f9351ebece6e24af7fae72df1ec3054551846d093c4753",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在，當有人按下按鈕時，`onPress` 會觸發並呼叫 `setIsHungry(false)`。這會將狀態變數 `isHungry` 設為 `false`。當 `isHungry` 為 false 時，`Button` 的 `disabled` 屬性會被設為 `true`，其 `title` 也會隨之改變："
      }
    },
    {
      "segment_id": "7b02faf5",
      "source_content": "```tsx\n<Button\n  //..\n  disabled={!isHungry}\n  title={isHungry ? 'Give me some food, please!' : 'Thank you!'}\n/>\n```",
      "source_content_hash": "c945c3eacc6d6142074ec9a58b7a4f4c5fde1f2b76c88e05d343be49cf6c74a0",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_7b02faf5"
      }
    },
    {
      "segment_id": "c7c0acc4",
      "source_content": "> You might’ve noticed that although `isHungry` is a [const](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/const), it is seemingly reassignable! What is happening is when a state-setting function like `setIsHungry` is called, its component will re-render. In this case the `Cat` function will run again—and this time, `useState` will give us the next value of `isHungry`.",
      "source_content_hash": "e7bdca7f6345042a724f8fcc0d354744d064db6c23b638a8730ed501754f7b0a",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 你可能注意到，儘管 `isHungry` 是 [const](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Statements/const)，它卻看似可被重新賦值！實際上，當像 `setIsHungry` 這樣的狀態設定函數被呼叫時，其元件會重新渲染。在此情況下，`Cat` 函數會再次執行——而這次 `useState` 會給我們 `isHungry` 的下一個值。"
      }
    },
    {
      "segment_id": "bfa178cb",
      "source_content": "Finally, put your cats inside a `Cafe` component:",
      "source_content_hash": "9ff72ba9b9cf78b8a6480cf20b98bc14f4e78bb68205b798068d985382dc9d5d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "最後，將你的貓咪們放入 `Cafe` 元件中："
      }
    },
    {
      "segment_id": "60c648f4",
      "source_content": "```tsx\nconst Cafe = () => {\n  return (\n    <>\n      <Cat name=\"Munkustrap\" />\n      <Cat name=\"Spot\" />\n    </>\n  );\n};\n```",
      "source_content_hash": "487ff1445a9a17842936d7a63ef6a33843fddd650a3c52c7376708d3091776ae",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_60c648f4"
      }
    },
    {
      "segment_id": "7db175fe",
      "source_content": "> See the `<>` and `</>` above? These bits of JSX are [fragments](https://react.dev/reference/react/Fragment). Adjacent JSX elements must be wrapped in an enclosing tag. Fragments let you do that without nesting an extra, unnecessary wrapping element like `View`.",
      "source_content_hash": "05f219d40b6c32056b090888910d9c22c3ff52051c5ed80767f0d28dc11f0604",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 看到上面的 `<>` 和 `</>` 了嗎？這些 JSX 片段稱為 [fragments](https://react.dev/reference/react/Fragment)。相鄰的 JSX 元素必須包裹在一個封閉標籤中。Fragments 讓你可以做到這點，而無需嵌套額外不必要的包裹元素如 `View`。"
      }
    },
    {
      "segment_id": "e0574ff6",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-hant": "---"
      }
    },
    {
      "segment_id": "ceff655b",
      "source_content": "Now that you’ve covered both React and React Native’s Core Components, let’s dive deeper on some of these core components by looking at [handling `<TextInput>`](handling-text-input).",
      "source_content_hash": "271ce4a7febae4c56ab234837a9763c93fcaf788cad5b6a942e810f4b74d91ef",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在你已經涵蓋了 React 和 React Native 的核心元件，讓我們更深入探討其中一些核心元件，看看如何 [處理 `<TextInput>`](handling-text-input)。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.76/intro-react.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.564838+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "f652f1d6681f6ee54b2d6fe4a6a70df20d5a5192f4a5ddb900173597c9b687f2"
  }
}