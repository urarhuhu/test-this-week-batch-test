{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.76/navigation.md",
  "source_file_content_hash": "9ac3c03d6ae0b7441dfa4054b1aee5d759a214401e75440c99aa326f68c377b1",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: navigation\ntitle: Navigating Between Screens\n---",
      "source_content_hash": "ddcf563e82eb0ed48af638b1926fe4eb246bab60b3d20c0ce5f71ee0be1b055b",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "Mobile apps are rarely made up of a single screen. Managing the presentation of, and transition between, multiple screens is typically handled by what is known as a navigator.",
      "source_content_hash": "804d2af6b59e4a25cd2ee32cf3e5f545a7c1eeba489035e91411a10e5859f1fe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "行動應用程式很少由單一畫面組成。管理多個畫面的呈現與轉場，通常由所謂的「導航器」來處理。"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "This guide covers the various navigation components available in React Native. If you are getting started with navigation, you will probably want to use [React Navigation](navigation.md#react-navigation). React Navigation provides a straightforward navigation solution, with the ability to present common stack navigation and tabbed navigation patterns on both Android and iOS.",
      "source_content_hash": "53f17f0a92bd3c2ed340e9ab3d4a24c11067f7b9c07727a9beb7a8e229ce8eb9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "本指南涵蓋 React Native 中提供的各種導航元件。如果你是導航功能的新手，可能會想使用 [React Navigation](navigation.md#react-navigation)。React Navigation 提供直觀的導航解決方案，能夠在 Android 和 iOS 上呈現常見的堆疊導航和分頁導航模式。"
      }
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "If you're integrating React Native into an app that already manages navigation natively, or looking for an alternative to React Navigation, the following library provides native navigation on both platforms: [react-native-navigation](https://github.com/wix/react-native-navigation).",
      "source_content_hash": "739af63f8c6137299bebb7d4a14bacbc2e3ba188b75cd09e6b509b7b361fca09",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "如果你正在將 React Native 整合到一個已經原生管理導航的應用程式中，或者正在尋找 React Navigation 的替代方案，以下函式庫在兩個平台上提供原生導航功能：[react-native-navigation](https://github.com/wix/react-native-navigation)。"
      }
    },
    {
      "segment_id": "9fcbdce9",
      "source_content": "## React Navigation",
      "source_content_hash": "a2789cc18fcc88d3ca1996ecffb8ace5ffbe119b9ed895b5572b648442ac7e65",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## React Navigation"
      }
    },
    {
      "segment_id": "ad8fd492",
      "source_content": "The community solution to navigation is a standalone library that allows developers to set up the screens of an app with a few lines of code.",
      "source_content_hash": "33dbb5aa7eb8e466764a747234c780013ba8dfb65cc09551ad6d68cba5e0e5f7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這個由社群提供的導航解決方案是一個獨立的函式庫，開發者只需幾行程式碼就能設定應用程式的畫面。"
      }
    },
    {
      "segment_id": "cbe57f9d",
      "source_content": "### Installation and setup",
      "source_content_hash": "8807327059232678c49f3373d06e430c6db59b7b010434a80434142d851f87b4",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 安裝與設定"
      }
    },
    {
      "segment_id": "39b3772c",
      "source_content": "First, you need to install them in your project:",
      "source_content_hash": "93a9a8379f2a69b5cee5100b9f39a86d7f2694bdb9295e0bb31777971301fa7b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "首先，你需要在專案中安裝它們："
      }
    },
    {
      "segment_id": "166426c2",
      "source_content": "```shell\nnpm install @react-navigation/native @react-navigation/native-stack\n```",
      "source_content_hash": "4eb7e4c60630ad359d093d769231cd1313ff034b125e51fb9a649658300e54cf",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_166426c2"
      }
    },
    {
      "segment_id": "98cfbd53",
      "source_content": "Next, install the required peer dependencies. You need to run different commands depending on whether your project is an Expo managed project or a bare React Native project.",
      "source_content_hash": "103a7f7a5dc80c0dda80eaf40de9f7b980f173fdf0e5a3aae216e8d176428769",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "接著，安裝必要的 peer dependencies。根據你的專案是 Expo 託管專案還是純 React Native 專案，你需要執行不同的指令。"
      }
    },
    {
      "segment_id": "0cc488ed",
      "source_content": "- If you have an Expo managed project, install the dependencies with `expo`:\n\n  ```shell\n  npx expo install react-native-screens react-native-safe-area-context\n  ```\n\n- If you have a bare React Native project, install the dependencies with `npm`:\n\n  ```shell\n  npm install react-native-screens react-native-safe-area-context\n  ```\n\n  For iOS with bare React Native project, make sure you have [CocoaPods](https://cocoapods.org/) installed. Then install the pods to complete the installation:\n\n  ```shell\n  cd ios\n  pod install\n  cd ..\n  ```",
      "source_content_hash": "4a5942bed970ea1e16566c45942015d6b01cb9d9f93d38f45a0eddd946c80f18",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- 如果你的專案是 Expo 託管專案，請使用 `expo` 安裝相依套件：\n\n  ```shell\n  npx expo install react-native-screens react-native-safe-area-context\n  ```\n\n- 如果你的專案是純 React Native 專案，請使用 `npm` 安裝相依套件：\n\n  ```shell\n  npm install react-native-screens react-native-safe-area-context\n  ```\n\n  對於純 React Native 專案的 iOS 部分，請確保已安裝 [CocoaPods](https://cocoapods.org/)。然後安裝 pods 以完成安裝：\n\n  ```shell\n  cd ios\n  pod install\n  cd ..\n  ```"
      }
    },
    {
      "segment_id": "80e5ac71",
      "source_content": ":::note\nYou might get warnings related to peer dependencies after installation. They are usually caused by incorrect version ranges specified in some packages. You can safely ignore most warnings as long as your app builds.\n:::",
      "source_content_hash": "ef84ceb3894a9c623891344cb69cf5d09b48648046ee705d424218c2e60874e2",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::note\n安裝後你可能會看到與 peer dependencies 相關的警告。這些警告通常是由某些套件中指定的版本範圍不正確所引起。只要你的應用程式能夠建構，大多數警告可以安全忽略。\n:::"
      }
    },
    {
      "segment_id": "a44047a5",
      "source_content": "Now, you need to wrap the whole app in `NavigationContainer`. Usually you'd do this in your entry file, such as `index.js` or `App.js`:",
      "source_content_hash": "20850f777e2bc0650e6b91071ec26ac72929c393a7fe37092f21eabd11a7b5bc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在，你需要將整個應用程式包裹在 `NavigationContainer` 中。通常你會在入口檔案（如 `index.js` 或 `App.js`）中進行此操作："
      }
    },
    {
      "segment_id": "64b6f348",
      "source_content": "```tsx\nimport * as React from 'react';\nimport {NavigationContainer} from '@react-navigation/native';\n\nconst App = () => {\n  return (\n    <NavigationContainer>\n      {/* Rest of your app code */}\n    </NavigationContainer>\n  );\n};\n\nexport default App;\n```",
      "source_content_hash": "45b22f5da803f35cbddfa0096367e3f8b3194d6404608c3dc4503cd3e70e020b",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_64b6f348"
      }
    },
    {
      "segment_id": "0bb95128",
      "source_content": "Now you are ready to build and run your app on the device/simulator.",
      "source_content_hash": "b46be3dc494cabd29402010eba6d7a3fcf615c7cd809fd1d96874b648fa76d54",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在你已經準備好在裝置或模擬器上建構並執行你的應用程式。"
      }
    },
    {
      "segment_id": "3ef18741",
      "source_content": "### Usage",
      "source_content_hash": "7a5b2d87044217ebeda4e071a80585106bae705217da72a3ec329261002e16ff",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "### 使用方法"
      }
    },
    {
      "segment_id": "e7772088",
      "source_content": "Now you can create an app with a home screen and a profile screen:",
      "source_content_hash": "d7ecdc635c1cf7206ec6a5242c2825b5dcd019d54586a2626d560c9c09b91db0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "現在你可以建立一個包含主畫面和个人資料畫面的應用程式："
      }
    },
    {
      "segment_id": "bc137a19",
      "source_content": "```tsx\nimport * as React from 'react';\nimport {NavigationContainer} from '@react-navigation/native';\nimport {createNativeStackNavigator} from '@react-navigation/native-stack';\n\nconst Stack = createNativeStackNavigator();\n\nconst MyStack = () => {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        <Stack.Screen\n          name=\"Home\"\n          component={HomeScreen}\n          options={{title: 'Welcome'}}\n        />\n        <Stack.Screen name=\"Profile\" component={ProfileScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n};\n```",
      "source_content_hash": "1bf26bec7452268c28a4d644e26bb7c58585b5dc0d89eaf10b8d668740cf1527",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_bc137a19"
      }
    },
    {
      "segment_id": "a311e967",
      "source_content": "In this example, there are 2 screens (`Home` and `Profile`) defined using the `Stack.Screen` component. Similarly, you can define as many screens as you like.",
      "source_content_hash": "ebdcfe70677c4da19ef3841b446bb905132680630379835ee558a01524dc19d4",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "在這個範例中，使用 `Stack.Screen` 元件定義了兩個畫面（`Home` 和 `Profile`）。同樣地，你可以定義任意數量的畫面。"
      }
    },
    {
      "segment_id": "eb51d107",
      "source_content": "You can set options such as the screen title for each screen in the `options` prop of `Stack.Screen`.",
      "source_content_hash": "528ccfa36fa08e213f3bf609ba907f14d3612db299837c7fc4ae98dedbddde2b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以透過 `Stack.Screen` 的 `options` 屬性為每個畫面設定選項，例如畫面標題。"
      }
    },
    {
      "segment_id": "1862c5fe",
      "source_content": "Each screen takes a `component` prop that is a React component. Those components receive a prop called `navigation` which has various methods to link to other screens. For example, you can use `navigation.navigate` to go to the `Profile` screen:",
      "source_content_hash": "cdfb450293851520482fbaa8c67404bce4d70028ea401ea901f20d748c1994af",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "每個畫面接受一個 `component` 屬性，該屬性是一個 React 元件。這些元件會接收到一個名為 `navigation` 的屬性，其中包含連結到其他畫面的各種方法。例如，你可以使用 `navigation.navigate` 前往 `Profile` 畫面："
      }
    },
    {
      "segment_id": "a476a172",
      "source_content": "```tsx\nconst HomeScreen = ({navigation}) => {\n  return (\n    <Button\n      title=\"Go to Jane's profile\"\n      onPress={() =>\n        navigation.navigate('Profile', {name: 'Jane'})\n      }\n    />\n  );\n};\nconst ProfileScreen = ({navigation, route}) => {\n  return <Text>This is {route.params.name}'s profile</Text>;\n};\n```",
      "source_content_hash": "2bab2caf8bca55abed51f970e3ef8d008e086f534803e8d866364d627abaf50d",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_a476a172"
      }
    },
    {
      "segment_id": "44aaa880",
      "source_content": "This `native-stack` navigator uses the native APIs: `UINavigationController` on iOS and `Fragment` on Android so that navigation built with `createNativeStackNavigator` will behave the same and have the same performance characteristics as apps built natively on top of those APIs.",
      "source_content_hash": "2dcbe74290aa3cac0616dd803d5a1b35c44e7973a84c1c4f116738fc2e1f412f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "這個 `native-stack` 導航器使用原生 API：iOS 上的 `UINavigationController` 和 Android 上的 `Fragment`，因此使用 `createNativeStackNavigator` 建構的導航行為將與基於這些 API 原生建構的應用程式相同，並具有相同的效能特性。"
      }
    },
    {
      "segment_id": "396efb28",
      "source_content": "React Navigation also has packages for different kind of navigators such as tabs and drawer. You can use them to implement various patterns in your app.",
      "source_content_hash": "4858362a6a1424f2b334d0fe62f20fa09fd4c0a7524e0abacf9a21fb48e00737",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Navigation 還提供了不同類型導航器的套件，例如分頁和抽屜。你可以使用它們在應用程式中實現各種模式。"
      }
    },
    {
      "segment_id": "558df877",
      "source_content": "For a complete intro to React Navigation, follow the [React Navigation Getting Started Guide](https://reactnavigation.org/docs/getting-started).",
      "source_content_hash": "ed748a1c5e3cb3d95c3033bc92b4921e00bfa06d3891f832521aaaeb295f6aa7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "有關 React Navigation 的完整介紹，請參閱 [React Navigation 入門指南](https://reactnavigation.org/docs/getting-started)。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.76/navigation.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.623893+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "9ac3c03d6ae0b7441dfa4054b1aee5d759a214401e75440c99aa326f68c377b1"
  }
}