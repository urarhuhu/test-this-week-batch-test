{
  "source_file_path_relative_to_docusaurus_root": "versioned_docs/version-0.76/typescript.md",
  "source_file_content_hash": "30139c81a07aec1f72c0f5dfc90aae552415925dc4b7aa0f1ccb7a4b4413fad6",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: typescript\ntitle: Using TypeScript\n---",
      "source_content_hash": "44ebe7efdbe0b6bb578e2aee278eb708a611a1f5a2af53248cce7d42bb4a4f8a",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs'; import TabItem from '@theme/TabItem'; import constants from '@site/core/TabsConstants';",
      "source_content_hash": "0aed60180598135363f970d0b23d8d7665430a4b05f703a572a064dbbca30b07",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_4d1292be"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "[TypeScript][ts] is a language which extends JavaScript by adding type definitions. New React Native projects target TypeScript by default, but also support JavaScript and Flow.",
      "source_content_hash": "86c47bd10d223862f94d2cb5d26130fa3ea7f6a23691241265c2a6394a2458f2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "[TypeScript][ts] 是一種透過添加類型定義來擴展 JavaScript 的語言。新的 React Native 專案預設以 TypeScript 為目標，但同時也支援 JavaScript 和 Flow。"
      }
    },
    {
      "segment_id": "1cc03ec8",
      "source_content": "## Getting Started with TypeScript",
      "source_content_hash": "fce5c3b10a1069c430fc99344fa2da43414a4533fd55ac4ed18df998b8406533",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 開始使用 TypeScript"
      }
    },
    {
      "segment_id": "8d66f911",
      "source_content": "New projects created by the [React Native CLI](getting-started-without-a-framework#step-1-creating-a-new-application) or popular templates like [Ignite][ignite] will use TypeScript by default.",
      "source_content_hash": "37ce4af21cca0f3588a04054c22ae11830c4dc48e096c33073e5efb12e3eb03d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "由 [React Native CLI](getting-started-without-a-framework#step-1-creating-a-new-application) 或像 [Ignite][ignite] 這樣的熱門模板所建立的新專案，預設會使用 TypeScript。"
      }
    },
    {
      "segment_id": "ad8fd492",
      "source_content": "TypeScript may also be used with [Expo][expo], which maintains TypeScript templates, or will prompt you to automatically install and configure TypeScript when a `.ts` or `.tsx` file is added to your project.",
      "source_content_hash": "ec10ef0fe7416c1db025fdd2e0893f519cc89f34f7a3b3eb6c529c4e5c756801",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "TypeScript 也可以與 [Expo][expo] 一起使用，它維護了 TypeScript 模板，或在你的專案中添加 `.ts` 或 `.tsx` 文件時，會提示你自動安裝和配置 TypeScript。"
      }
    },
    {
      "segment_id": "41ad46a6",
      "source_content": "```shell\nnpx create-expo-app --template\n```",
      "source_content_hash": "eb678342451f08b942b3f73696ddf2af2c63f6ea203cabdfc660ed7fd08e0d23",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_41ad46a6"
      }
    },
    {
      "segment_id": "bc633244",
      "source_content": "## Adding TypeScript to an Existing Project",
      "source_content_hash": "60ca37a7e27bf416449d204e27d261f58a9fc33134461944c0c485af6e997413",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 在現有專案中添加 TypeScript"
      }
    },
    {
      "segment_id": "da23c906",
      "source_content": "1. Add TypeScript, types, and ESLint plugins to your project.",
      "source_content_hash": "fe052aaa3791f4903d01df83fa364a542a0d7e5fdc720d8c6d8e4219b1afbbde",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "1. 將 TypeScript、類型定義和 ESLint 插件添加到你的專案中。"
      }
    },
    {
      "segment_id": "42e34e45",
      "source_content": "<Tabs groupId=\"package-manager\" queryString defaultValue={constants.defaultPackageManager} values={constants.packageManagers}>\n<TabItem value=\"npm\">\n\n```shell\nnpm install -D @tsconfig/react-native @types/jest @types/react @types/react-test-renderer typescript\n```\n\n</TabItem>\n<TabItem value=\"yarn\">\n\n```shell\nyarn add --dev @tsconfig/react-native @types/jest @types/react @types/react-test-renderer typescript\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "5160588fd68730c03030baf3fba004c9ef3e9c7c1300009d373a20e95503ff06",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_42e34e45"
      }
    },
    {
      "segment_id": "688f7369",
      "source_content": ":::note\nThis command adds the latest version of every dependency. The versions may need to be changed to match the existing packages used by your project. You can use a tool like [React Native Upgrade Helper](https://react-native-community.github.io/upgrade-helper/) to see the versions shipped by React Native.\n:::",
      "source_content_hash": "3930d8f40d1892e6602260f526eae44d847fb26454e52d8d617b5c894e82de86",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-hant": ":::note\n此命令會添加每個依賴項的最新版本。版本可能需要更改以匹配專案中現有的套件。你可以使用像 [React Native Upgrade Helper](https://react-native-community.github.io/upgrade-helper/) 這樣的工具來查看 React Native 提供的版本。\n:::"
      }
    },
    {
      "segment_id": "4c077b92",
      "source_content": "2. Add a TypeScript config file. Create a `tsconfig.json` in the root of your project:",
      "source_content_hash": "5661bc661f9c351d49a6ce351b7a9cca7b86e3a535e1697f064dacfe5293867c",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "2. 添加 TypeScript 配置文件。在專案的根目錄下創建一個 `tsconfig.json`："
      }
    },
    {
      "segment_id": "b75ddc12",
      "source_content": "```json\n{\n  \"extends\": \"@tsconfig/react-native/tsconfig.json\"\n}\n```",
      "source_content_hash": "867a8223193517198f3fae8e6aed30e746044a746c1ec656b5e70f8357e16e7f",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_b75ddc12"
      }
    },
    {
      "segment_id": "310e47b7",
      "source_content": "3. Rename a JavaScript file to be `*.tsx`",
      "source_content_hash": "548c126f8476d72452a877d0177f0ebf8cba7990cee95183071ab6de5511c998",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "3. 將一個 JavaScript 文件重命名為 `*.tsx`"
      }
    },
    {
      "segment_id": "758c127f",
      "source_content": "> You should leave the `./index.js` entrypoint file as it is otherwise you may run into an issue when it comes to bundling a production build.",
      "source_content_hash": "56f20500e20cef582b5aed17d7715a44e67e320c9773b6c3a0d8795631c5fcbb",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 你應該保留 `./index.js` 入口文件，否則在打包生產版本時可能會遇到問題。"
      }
    },
    {
      "segment_id": "36ab8340",
      "source_content": "4. Run `tsc` to type-check your new TypeScript files.",
      "source_content_hash": "d3da83b3a4720e8a367d962ec9cc1515908da2ce6049e8ae556a58687ff7d98f",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "4. 運行 `tsc` 來對新的 TypeScript 文件進行類型檢查。"
      }
    },
    {
      "segment_id": "ce33792e",
      "source_content": "<Tabs groupId=\"package-manager\" queryString defaultValue={constants.defaultPackageManager} values={constants.packageManagers}>\n<TabItem value=\"npm\">\n\n```shell\nnpx tsc\n```\n\n</TabItem>\n<TabItem value=\"yarn\">\n\n```shell\nyarn tsc\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "3ae63402d55e16910a2b961e30b78175d1329707ceef8056019c7050198d47a5",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_ce33792e"
      }
    },
    {
      "segment_id": "b051b70c",
      "source_content": "## Using JavaScript Instead of TypeScript",
      "source_content_hash": "7eae17dc2beab0e282144009a2b54d87c14d9cf2ed10203d05a5fe07c446b86a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 使用 JavaScript 而非 TypeScript"
      }
    },
    {
      "segment_id": "d0dd855b",
      "source_content": "React Native defaults new applications to TypeScript, but JavaScript may still be used. Files with a `.jsx` extension are treated as JavaScript instead of TypeScript, and will not be typechecked. JavaScript modules may still be imported by TypeScript modules, along with the reverse.",
      "source_content_hash": "be3fd867043a561620fb5a8d13c5590878a6a64bb1ac9ee215186ee580dd1e30",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Native 預設新應用程式使用 TypeScript，但仍然可以使用 JavaScript。帶有 `.jsx` 擴展名的文件會被視為 JavaScript 而非 TypeScript，並且不會進行類型檢查。JavaScript 模組仍然可以被 TypeScript 模組導入，反之亦然。"
      }
    },
    {
      "segment_id": "2fd0be2a",
      "source_content": "## How TypeScript and React Native works",
      "source_content_hash": "f3eae7b5508916d1b7f902b3058979f441a233d582fac8fe65e6ecec2e6eefda",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## TypeScript 與 React Native 如何協同工作"
      }
    },
    {
      "segment_id": "6270d577",
      "source_content": "Out of the box, TypeScript sources are transformed by [Babel][babel] during bundling. We recommend that you use the TypeScript compiler only for type checking. This is the default behavior of `tsc` for newly created applications. If you have existing TypeScript code being ported to React Native, there are [one or two caveats][babel-7-caveats] to using Babel instead of TypeScript.",
      "source_content_hash": "a360b21b8717204d67928dc100ec0ae71ef0009055bd6ca6c7784e8f594d158c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "開箱即用，TypeScript 源代碼在打包過程中由 [Babel][babel] 進行轉換。我們建議你僅使用 TypeScript 編譯器進行類型檢查。這是新創建應用程式中 `tsc` 的預設行為。如果你有現有的 TypeScript 代碼正在移植到 React Native，使用 Babel 而非 TypeScript 時有[一兩個注意事項][babel-7-caveats]。"
      }
    },
    {
      "segment_id": "a4bf4268",
      "source_content": "## What does React Native + TypeScript look like",
      "source_content_hash": "e32e0949bf1804dc30460c05b8f02950155451cdddc91086afd69f4dfac8e501",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## React Native + TypeScript 是什麼樣子"
      }
    },
    {
      "segment_id": "ec619944",
      "source_content": "You can provide an interface for a React Component's [Props](props) and [State](state) via `React.Component<Props, State>` which will provide type-checking and editor auto-completing when working with that component in JSX.",
      "source_content_hash": "ae2561a810f8f86c0501803500a72a54f43324c0991228ba231a8cc1c271cf27",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以透過 `React.Component<Props, State>` 為 React 組件的 [Props](props) 和 [State](state) 提供接口，這將在 JSX 中使用該組件時提供類型檢查和編輯器自動完成功能。"
      }
    },
    {
      "segment_id": "26f7c825",
      "source_content": "```tsx title=\"components/Hello.tsx\"\nimport React from 'react';\nimport {Button, StyleSheet, Text, View} from 'react-native';\n\nexport type Props = {\n  name: string;\n  baseEnthusiasmLevel?: number;\n};\n\nconst Hello: React.FC<Props> = ({\n  name,\n  baseEnthusiasmLevel = 0,\n}) => {\n  const [enthusiasmLevel, setEnthusiasmLevel] = React.useState(\n    baseEnthusiasmLevel,\n  );\n\n  const onIncrement = () =>\n    setEnthusiasmLevel(enthusiasmLevel + 1);\n  const onDecrement = () =>\n    setEnthusiasmLevel(\n      enthusiasmLevel > 0 ? enthusiasmLevel - 1 : 0,\n    );\n\n  const getExclamationMarks = (numChars: number) =>\n    numChars > 0 ? Array(numChars + 1).join('!') : '';\n\n  return (\n    <View style={styles.container}>\n      <Text style={styles.greeting}>\n        Hello {name}\n        {getExclamationMarks(enthusiasmLevel)}\n      </Text>\n      <View>\n        <Button\n          title=\"Increase enthusiasm\"\n          accessibilityLabel=\"increment\"\n          onPress={onIncrement}\n          color=\"blue\"\n        />\n        <Button\n          title=\"Decrease enthusiasm\"\n          accessibilityLabel=\"decrement\"\n          onPress={onDecrement}\n          color=\"red\"\n        />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  greeting: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    margin: 16,\n  },\n});\n\nexport default Hello;\n```",
      "source_content_hash": "d3fa0aa98e902cb2d626a8d9d128609fe13728a78c1d3687a5fc6cffbddce253",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_26f7c825"
      }
    },
    {
      "segment_id": "4c787c52",
      "source_content": "You can explore the syntax more in the [TypeScript playground][tsplay].",
      "source_content_hash": "59c8308abcf80269aa296f18fd60e501ab6f525214162f3a73f0bf0f5c3cbc82",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "你可以在 [TypeScript playground][tsplay] 中進一步探索語法。"
      }
    },
    {
      "segment_id": "b50cf7ff",
      "source_content": "## Where to Find Useful Advice",
      "source_content_hash": "e3b8d89c1cc64a402ec72b8c855f35780c16ddf3aee41c150beb3016a4d12e93",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 哪裡可以找到有用的建議"
      }
    },
    {
      "segment_id": "504cd4ff",
      "source_content": "- [TypeScript Handbook][ts-handbook]\n- [React's documentation on TypeScript][react-ts]\n- [React + TypeScript Cheatsheets][cheat] has a good overview on how to use React with TypeScript",
      "source_content_hash": "9d88b8a38a3663fc1000c0f6c2d2d32032ced9d51a5fd8a814ae6db4ff7d93e3",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "- [TypeScript 手冊][ts-handbook]\n- [React 關於 TypeScript 的文檔][react-ts]\n- [React + TypeScript 速查表][cheat] 提供了關於如何將 React 與 TypeScript 一起使用的良好概述"
      }
    },
    {
      "segment_id": "7312e69e",
      "source_content": "## Using Custom Path Aliases with TypeScript",
      "source_content_hash": "04ea4b1545ae0fc8f3aa55f6defd183c84e85e1dbe9a9df9c29a0a777b2062d0",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 在 TypeScript 中使用自定義路徑別名"
      }
    },
    {
      "segment_id": "2dbfc5f7",
      "source_content": "To use custom path aliases with TypeScript, you need to set the path aliases to work from both Babel and TypeScript. Here's how:",
      "source_content_hash": "c557eba05fb1e4208c43424a7564f0a39b55da268a32e86a8c314cdd652a3f78",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "要在 TypeScript 中使用自定義路徑別名，你需要設置路徑別名以同時適用於 Babel 和 TypeScript。方法如下："
      }
    },
    {
      "segment_id": "5df815de",
      "source_content": "1. Edit your `tsconfig.json` to have your [custom path mappings][path-map]. Set anything in the root of `src` to be available with no preceding path reference, and allow any test file to be accessed by using `tests/File.tsx`:",
      "source_content_hash": "518c5129393530444e8c557ed7800e59e67869d3d64e97f931c546efac44d3a9",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "1. 編輯你的 `tsconfig.json` 以擁有[自定義路徑映射][path-map]。設置 `src` 根目錄下的任何內容都可以無需前置路徑引用即可使用，並允許通過 `tests/File.tsx` 訪問任何測試文件："
      }
    },
    {
      "segment_id": "71969be5",
      "source_content": "```diff\n{\n-  \"extends\": \"@tsconfig/react-native/tsconfig.json\"\n+  \"extends\": \"@tsconfig/react-native/tsconfig.json\",\n+  \"compilerOptions\": {\n+    \"baseUrl\": \".\",\n+    \"paths\": {\n+      \"*\": [\"src/*\"],\n+      \"tests\": [\"tests/*\"],\n+      \"@components/*\": [\"src/components/*\"],\n+    },\n+  }\n}\n```",
      "source_content_hash": "9603c80e0b1bd60c86fb88466dde60c82339b380fafa1e246059f5c9797f8248",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_71969be5"
      }
    },
    {
      "segment_id": "d0f2205c",
      "source_content": "2. Add [`babel-plugin-module-resolver`][bpmr] as a development package to your project:",
      "source_content_hash": "7b15181b868c7c57d616c2ddd6cc5e148ac42465e941d217b7ff499137cee019",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "2. 將 [`babel-plugin-module-resolver`][bpmr] 作為開發包添加到你的專案中："
      }
    },
    {
      "segment_id": "e106568d",
      "source_content": "<Tabs groupId=\"package-manager\" queryString defaultValue={constants.defaultPackageManager} values={constants.packageManagers}>\n<TabItem value=\"npm\">\n\n```shell\nnpm install --save-dev babel-plugin-module-resolver\n```\n\n</TabItem>\n<TabItem value=\"yarn\">\n\n```shell\nyarn add --dev babel-plugin-module-resolver\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "99ec837903321320d7638207598a974db05f0d3e3a8ea01b11dd7d9cf31db093",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_e106568d"
      }
    },
    {
      "segment_id": "d796d443",
      "source_content": "3. Finally, configure your `babel.config.js` (note that the syntax for your `babel.config.js` is different from your `tsconfig.json`):",
      "source_content_hash": "5df022fea03356f2f2f28a088dea39d90b0500ec97aa81c35fd08218e80d34c5",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-hant": "3. 最後，配置你的 `babel.config.js`（請注意 `babel.config.js` 的語法與 `tsconfig.json` 不同）："
      }
    },
    {
      "segment_id": "117486ca",
      "source_content": "```diff\n{\n   presets: ['module:metro-react-native-babel-preset'],\n+  plugins: [\n+    [\n+       'module-resolver',\n+       {\n+         root: ['./src'],\n+         extensions: ['.ios.js', '.android.js', '.js', '.ts', '.tsx', '.json'],\n+         alias: {\n+           tests: ['./tests/'],\n+           \"@components\": \"./src/components\",\n+         }\n+       }\n+    ]\n+  ]\n}\n```",
      "source_content_hash": "91065ec907b5381021fedebbe660c5057b2dde4c4509ee21cb1011ba13a826a6",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_117486ca"
      }
    },
    {
      "segment_id": "d47c81c3",
      "source_content": "[react-ts]: https://react.dev/learn/typescript",
      "source_content_hash": "88ac5a7e9e24cd678ace5c44e8448605fcda5ec7e37817a139c3300657090842",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[react-ts]: https://react.dev/learn/typescript"
      }
    },
    {
      "segment_id": "3323bc1c",
      "source_content": "[ts]: https://www.typescriptlang.org/",
      "source_content_hash": "a4d36caac03fdb3ae376aebe13f97466557ee4ea561eef6c447ecd5afab2d645",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[ts]: https://www.typescriptlang.org/"
      }
    },
    {
      "segment_id": "2e381527",
      "source_content": "[flow]: https://flow.org",
      "source_content_hash": "91a8fbaa3283a44f9cad105b2a07a173dd228b491f154da5246da6953ff9b76e",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[flow]: https://flow.org"
      }
    },
    {
      "segment_id": "8d9a6807",
      "source_content": "[ts-template]: https://github.com/react-native-community/react-native-template-typescript",
      "source_content_hash": "5a4430773e5cdad1970a80cacb685ced64c403a6b97af9b17bc72ac5b6472179",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[ts-template]: https://github.com/react-native-community/react-native-template-typescript"
      }
    },
    {
      "segment_id": "ca696c75",
      "source_content": "[babel]: /docs/javascript-environment#javascript-syntax-transformers",
      "source_content_hash": "4cc9afede4cc1794759c278e94a23264d3e64370b6bbffa55ff5f1a45f47d805",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[babel]: /docs/javascript-environment#javascript-syntax-transformers"
      }
    },
    {
      "segment_id": "333da9c3",
      "source_content": "[babel-7-caveats]: https://babeljs.io/docs/en/next/babel-plugin-transform-typescript",
      "source_content_hash": "91d511ad8a0c62668d589675e9ee06c05c9b61d58ee97a2852de31b619d6ad62",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[babel-7-caveats]: https://babeljs.io/docs/en/next/babel-plugin-transform-typescript"
      }
    },
    {
      "segment_id": "aff5e027",
      "source_content": "[cheat]: https://github.com/typescript-cheatsheets/react-typescript-cheatsheet#reacttypescript-cheatsheets",
      "source_content_hash": "1bfaf25241bbb72000de77d0bc449c180e7b63223f514edf7632c95238ef2c06",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[cheat]: https://github.com/typescript-cheatsheets/react-typescript-cheatsheet#reacttypescript-cheatsheets"
      }
    },
    {
      "segment_id": "dfa49e8f",
      "source_content": "[ts-handbook]: https://www.typescriptlang.org/docs/handbook/intro.html",
      "source_content_hash": "064134f9c01fbcb0b2b7dca0be2b379198bfc517713c00c0bd3941a7f96aacd8",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[ts-handbook]: https://www.typescriptlang.org/docs/handbook/intro.html"
      }
    },
    {
      "segment_id": "b169ba3e",
      "source_content": "[path-map]: https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping",
      "source_content_hash": "b3f7722bcb686ac855f90f5b0b178c330172195819ccadb27f6c1f0df4c62455",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[path-map]: https://www.typescriptlang.org/docs/handbook/module-resolution.html#path-mapping"
      }
    },
    {
      "segment_id": "b2153971",
      "source_content": "[bpmr]: https://github.com/tleunen/babel-plugin-module-resolver",
      "source_content_hash": "607cc20965ad64d19b3fb7f539cf9f54ee10dd2850f3e60ac9a07bc316b57541",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[bpmr]: https://github.com/tleunen/babel-plugin-module-resolver"
      }
    },
    {
      "segment_id": "4a5efa5a",
      "source_content": "[expo]: https://expo.io",
      "source_content_hash": "a7b6d69ec7ec4f1ef6ffcff34cb9daf7d3a00bf2c386a318b87cd48c5edc8fd7",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[expo]: https://expo.io"
      }
    },
    {
      "segment_id": "66b9dd26",
      "source_content": "[ignite]: https://github.com/infinitered/ignite",
      "source_content_hash": "879e8614a8d065a664ae48612b9230564cf078b33679739815b03f6721fc6bfb",
      "node_type": "definition",
      "translatable": true,
      "translations": {
        "zh-hant": "[ignite]: https://github.com/infinitered/ignite"
      }
    },
    {
      "segment_id": "47030723",
      "source_content": "[tsplay]: https://www.typescriptlang.org/play?strictNullChecks=false&jsx=3#code/JYWwDg9gTgLgBAJQKYEMDG8BmUIjgcilQ3wG4BYAKFEljgG8AhAVxhggDsAaOAZRgCeAGyS8AFkiQweAFSQAPaXABqwJAHcAvnGy4CRdDAC0HFDGAA3JGSpUFteILBI4ABRxgAznAC8DKnBwpiBIAFxwnjBQwBwA5hSUgQBGKJ5IAKIcMGLMnsCpIAAySFZCAPzhHMwgSUhQCZq2lGickXAAEkhCQhDhyIYAdABiAMIAPO4QXgB8vnAAFPRBKCE8KWmZ2bn5nkUlXXMADHCaAJS+s-QBcC0cbQDaSFk5eQXFpTxpMJsvO3ulAF05v0MANcqIYGYkPN1hlnts3vshKcEtdbm1OABJDhoIghLJzebnHyzL4-BG7d5deZPLavSlIuAAajgAEYUWjWvBOAARJC4pD4+B+IkXCJScn0-7U2m-RGlOCzY5lOCyinSoRwIxsuDhQ4cyicu7wWIS+RoIQrMzATgAWRQUAA1t4RVUQCMxA7PJVqrUoMTZm6PV7FXBlXAAIJQKAoATzIOeqDeFnsgYAKwgMXm+AAhPhzuF8DZDYk4EQYMwoBwFtdAmNVBoIoIRD56JFhEhPANbpCYnVNNNa4E4GM5Iomx3W+2RF3YkQpDFYgOh8OOl0evR8ARGqXV4F6MEkDu98P6KbvubLSBrXaHc6afCpVTkce92MAPRjmCD3fD+tqdQfxPOsWDYTgVz3cwYBbAAibEBVSFw1SlGCINXdA0E7PIkmAIRgEEQoUFqIQfBgmIBSFVDfxPTh3Cw1ssRxPFaVfYCbggHooFIpIhGYJAqLY98gOAsZQPYDg0OHKDYL5BC0lVR8-gEti4AwrDgBwvCCKIrpSIAE35ZismUtjaKITxPAYjhZKMmBWOAlpONIog9JMvchIgj8G0AocvIA4SDU0VFmi5CcZzmfgO3ESQYG7AwYGhK5Sx7FA+ygcIktXTARHkcJWS4IcUDw2IOExBKQG9OAYMwrI6hggrfzTXJzEwAQRk4BKsnCaraTq65NAawI5xixcMqHTAOt4YAAC8wjgAAmQ5BuHCasgAdSQYBYjEGBCySDi9PwZbAmvKBYhiPKADZloGqgzmC+xoHgAzMBQZghHgTpuggBIgA",
      "source_content_hash": "d1cd01c79dd46282b68dee64104fddac7abbc61f79f099407737c6e10635186b",
      "node_type": "definition",
      "translatable": true,
      "translations": {}
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/version-0.76/typescript.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.556533+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "30139c81a07aec1f72c0f5dfc90aae552415925dc4b7aa0f1ccb7a4b4413fad6"
  }
}