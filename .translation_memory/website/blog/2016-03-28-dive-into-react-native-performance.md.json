{
  "source_file_path_relative_to_docusaurus_root": "blog/2016-03-28-dive-into-react-native-performance.md",
  "source_file_content_hash": "06fc547f3400ccb088cd1521b0594c43ed12da7aa534bd6ba24a9edd88506725",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ntitle: Dive into React Native Performance\nauthor: Pieter De Baets\nauthorTitle: Software Engineer at Facebook\nauthorURL: 'https://github.com/javache'\nauthorImageURL: 'https://avatars1.githubusercontent.com/u/5676?v=3&s=460'\nauthorTwitter: javache\ntags: [engineering]\n---",
      "source_content_hash": "4e4a9ba62c3f8ba26b5a78b7cc3be43578ef68d407b40c212786449b67bb2540",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "8ac585fb",
      "source_content": "React Native allows you to build Android and iOS apps in JavaScript using React and Relay's declarative programming model. This leads to more concise, easier-to-understand code; fast iteration without a compile cycle; and easy sharing of code across multiple platforms. You can ship faster and focus on details that really matter, making your app look and feel fantastic. Optimizing performance is a big part of this. Here is the story of how we made React Native app startup twice as fast.",
      "source_content_hash": "e00f21bc2c3f49d9c0bce3718800fa8e323a7682a3e936e2cc966ec06815c84f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "React Native 讓你能夠使用 JavaScript 並結合 React 和 Relay 的宣告式程式設計模型來開發 Android 和 iOS 應用程式。這使得程式碼更簡潔、更易於理解，能夠快速迭代而無需編譯週期，並能輕鬆跨多平台共享程式碼。你可以更快地發布應用，專注於真正重要的細節，讓你的應用看起來和使用起來都令人驚艷。性能優化是這其中的重要一環。以下是我們如何讓 React Native 應用啟動速度提升一倍的故事。"
      }
    },
    {
      "segment_id": "ba4f48ff",
      "source_content": "## Why the hurry?",
      "source_content_hash": "9c98762ab5720d61d8b3d517f951e49b4f8a1f9db6a3ff6f00d955eea7426c25",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-hant": "## 為什麼要追求速度？"
      }
    },
    {
      "segment_id": "cf898102",
      "source_content": "With an app that runs faster, content loads quickly, which means people get more time to interact with it, and smooth animations make the app enjoyable to use. In emerging markets, where [2011 class phones](https://code.facebook.com/posts/952628711437136/classes-performance-and-network-segmentation-on-android/) on [2G networks](https://newsroom.fb.com/news/2015/10/news-feed-fyi-building-for-all-connectivity/) are the majority, a focus on performance can make the difference between an app that is usable and one that isn't.",
      "source_content_hash": "e920f5bb6a2d7f4231584760ce9b073bb618b48ef4b73e230f0ab8ed0a718870",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "應用運行得更快，意味著內容能更快載入，使用者有更多時間與之互動，流暢的動畫則讓應用使用起來更加愉悅。在新興市場，[2011 年的手機](https://code.facebook.com/posts/952628711437136/classes-performance-and-network-segmentation-on-android/)和[2G 網路](https://newsroom.fb.com/news/2015/10/news-feed-fyi-building-for-all-connectivity/)仍是主流，專注於性能優化可能決定了一個應用是否可用。"
      }
    },
    {
      "segment_id": "42ad8e83",
      "source_content": "Since releasing React Native on [iOS](https://reactjs.org/blog/2015/03/26/introducing-react-native.html) and on [Android](https://code.facebook.com/posts/1189117404435352/react-native-for-android-how-we-built-the-first-cross-platform-react-native-app/), we have been improving list view scrolling performance, memory efficiency, UI responsiveness, and app startup time. Startup sets the first impression of an app and stresses all parts of the framework, so it is the most rewarding and challenging problem to tackle.",
      "source_content_hash": "dc0070dbe599c82b5273a86deed36aabdb5c11a5bab33f024812000bd26289a9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-hant": "自從在 [iOS](https://reactjs.org/blog/2015/03/26/introducing-react-native.html) 和 [Android](https://code.facebook.com/posts/1189117404435352/react-native-for-android-how-we-built-the-first-cross-platform-react-native-app/) 上發布 React Native 以來，我們一直在改進列表滾動性能、記憶體效率、UI 響應速度以及應用啟動時間。啟動速度決定了使用者對應用的第一印象，並且考驗了框架的各個部分，因此這是最具挑戰性但也最值得解決的問題。"
      }
    },
    {
      "segment_id": "09a8fe76",
      "source_content": "<footer>\n  <a\n    href=\"https://code.facebook.com/posts/895897210527114/dive-into-react-native-performance/\"\n    className=\"btn\">Read more</a>\n</footer>",
      "source_content_hash": "68caabf0cd89ccdb3ca156db350383aab42cda8e5b88546e77a9b8fc3bffefd8",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-hant": "@@untranslatable_placeholder_09a8fe76"
      }
    },
    {
      "segment_id": "f7b50957",
      "source_content": "> This is an excerpt. Read the rest of the post on [Facebook Code](https://code.facebook.com/posts/895897210527114/dive-into-react-native-performance/).",
      "source_content_hash": "6982c314a931251a63ff3be4aae47fc3a35cd7e519837654e2d9b72a7932793b",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-hant": "> 此為節錄內容。完整文章請見 [Facebook Code](https://code.facebook.com/posts/895897210527114/dive-into-react-native-performance/)。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-blog/2016-03-28-dive-into-react-native-performance.md",
  "last_updated_timestamp": "2025-06-18T10:03:59.205712+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-hant": "06fc547f3400ccb088cd1521b0594c43ed12da7aa534bd6ba24a9edd88506725"
  }
}